var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.616,1,2.735]],["body/controllers/AppController.html",[0,1.826,1,3.09,2,1.236,3,0.121,4,0.107,5,0.107,6,2.55,7,0.256,8,1.05,9,2.536,10,4.354,11,4.354,12,4.354,13,2.948,14,3.383,15,6.251,16,6.604,17,2.39,18,0.016,19,2.55,20,2.948,21,0.887,22,2.948,23,1.248,24,0.81,25,0.57,26,1.248,27,2.419,28,1.248,29,2.171,30,2.948,31,2.948,32,2.948,33,2.948,34,4.058,35,2.948,36,2.948,37,0.479,38,1.51,39,2.55,40,1.597,41,2.948,42,2.55,43,1.936,44,1.805,45,1.805,46,0.528,47,1.805,48,2.55,49,2.092,50,2.092,51,2.092,52,2.948,53,2.358,54,1.936,55,1.805,56,2.948,57,2.092,58,5.177,59,1.936,60,3.766,61,2.975,62,2.948,63,1.805,64,1.296,65,2.092,66,2.948,67,2.092,68,2.948,69,2.288,70,2.948,71,1.936,72,0.121,73,0.018,74,1.361,75,1.597,76,0.772,77,2.948,78,2.948,79,2.948,80,2.948,81,1.595,82,4.058,83,2.073,84,2.948,85,4.354,86,4.354,87,4.354,88,4.354,89,4.354,90,2.23,91,4.354,92,1.248,93,2.948,94,2.948,95,4.354,96,2.948,97,2.948,98,2.288,99,2.948,100,2.948,101,2.948,102,1.805,103,2.55,104,2.948,105,2.55,106,2.948,107,2.948,108,2.948,109,2.948,110,2.948,111,1.51,112,2.948,113,0.009,114,0.009]],["title/modules/AppModule.html",[115,1.543,116,2.735]],["body/modules/AppModule.html",[1,3.912,2,1.978,3,0.135,4,0.12,5,0.12,18,0.016,37,0.501,46,0.589,47,4.063,48,2.845,72,0.135,73,0.02,111,2.415,113,0.009,114,0.009,115,1.888,116,5.445,117,1.598,118,2.291,119,2.845,120,2.845,121,2.845,122,4.355,123,4.355,124,4.355,125,4.355,126,4.355,127,4.063,128,2.554,129,1.782,130,1.782,131,3.289,132,2.71,133,2.71,134,3.289,135,2.845,136,2.553,137,2.015,138,1.446,139,3.289,140,2.553,141,2.334,142,2.845,143,3.289,144,3.289,145,3.289,146,1.519,147,3.289,148,3.289,149,2.845,150,2.015,151,2.845,152,2.553,153,3.289,154,3.289,155,3.289,156,4.716,157,3.289,158,2.845,159,4.716,160,2.334,161,3.289,162,3.289,163,2.845,164,3.289,165,3.289,166,3.289,167,3.289,168,3.289,169,3.289,170,3.289,171,3.289,172,3.289,173,3.289,174,3.289,175,3.289,176,3.289,177,3.289,178,3.289,179,3.289,180,3.289,181,3.289]],["title/injectables/AppService.html",[47,2.36,182,0.603]],["body/injectables/AppService.html",[3,0.223,4,0.197,5,0.197,7,0.471,8,1.583,18,0.016,21,0.929,28,1.307,37,0.355,46,0.971,47,4.022,72,0.223,73,0.033,92,1.307,113,0.013,114,0.013,182,1.028,183,1.901,184,4.689,185,7.342,186,5.421,187,1.283,188,5.421,189,5.421]],["title/modules/AuthModule.html",[115,1.543,122,2.531]],["body/modules/AuthModule.html",[3,0.152,4,0.135,5,0.135,18,0.016,37,0.485,46,0.662,54,2.424,61,4.331,64,1.623,72,0.152,73,0.022,111,1.891,113,0.01,114,0.01,115,2.049,117,1.794,118,2.485,122,5.091,127,4.217,128,2.771,129,2,130,2,132,2.94,133,2.94,135,3.194,136,2.865,163,3.194,190,3.194,191,3.194,192,3.692,193,3.194,194,4.521,195,4.521,196,4.521,197,4.521,198,3.692,199,3.97,200,3.692,201,2.865,202,5.116,203,3.692,204,3.194,205,3.692,206,3.692,207,3.692,208,3.692,209,5.116,210,3.692,211,3.63,212,3.692,213,3.194,214,2.865,215,3.692,216,3.194,217,3.692]],["title/injectables/AuthService.html",[61,2.215,182,0.603]],["body/injectables/AuthService.html",[3,0.098,4,0.087,5,0.087,7,0.207,8,0.894,9,2.679,14,3.145,18,0.016,21,1.053,23,1.481,24,0.961,25,0.676,26,1.481,27,2.249,28,1.418,29,1.907,37,0.364,45,1.46,46,0.427,61,2.13,72,0.098,73,0.014,74,1.712,75,2.008,76,0.624,81,2.442,83,2.798,92,1.34,102,1.46,113,0.007,114,0.007,146,2.1,182,0.58,183,0.836,187,1.474,201,1.85,213,3.207,214,1.85,216,3.207,218,2.062,219,3.707,220,3.707,221,3.707,222,5.06,223,3.707,224,3.707,225,1.85,226,2.628,227,6.14,228,2.384,229,2.877,230,3.707,231,2.384,232,4.565,233,1.85,234,3.707,235,2.384,236,3.707,237,2.384,238,3.707,239,2.384,240,3.707,241,2.384,242,3.707,243,2.986,244,2.384,245,1.37,246,2.631,247,2.384,248,1.46,249,1.291,250,2.062,251,1.85,252,2.384,253,3.193,254,2.443,255,2.384,256,1.566,257,1.46,258,2.062,259,1.85,260,2.384,261,2.384,262,3.707,263,2.877,264,2.384,265,1.566,266,2.369,267,2.948,268,3.142,269,4.437,270,3.707,271,3.707,272,3.707,273,5.13,274,2.384,275,4.548,276,3.53,277,2.384,278,2.384,279,3.707,280,2.384,281,2.13,282,2.877,283,2.384,284,3.707,285,2.631,286,2.384,287,2.062,288,2.384,289,2.384,290,2.384,291,2.384,292,2.384]],["title/guards/AuthenticatedGuard.html",[293,2.735,294,2.991]],["body/guards/AuthenticatedGuard.html",[3,0.209,4,0.186,5,0.186,7,0.443,8,1.525,18,0.016,21,0.874,23,1.229,24,0.798,25,0.561,26,1.229,28,1.229,37,0.414,40,2.76,46,0.913,72,0.209,73,0.031,81,1.867,92,1.229,113,0.013,114,0.013,182,0.99,294,4.907,295,3.617,296,4.408,297,5.1,298,4.487,299,3.892,300,5.096,301,3.617,302,3.955,303,3.617,304,3.617,305,3.617,306,4.408]],["title/controllers/BranchController.html",[0,1.616,307,2.735]],["body/controllers/BranchController.html",[0,1.552,2,1.552,3,0.152,4,0.135,5,0.135,7,0.322,8,1.236,17,2.929,18,0.016,21,1.088,23,1.417,24,0.92,25,0.648,26,1.417,28,1.53,37,0.437,38,2.625,44,3.139,46,0.663,53,3.608,55,2.267,72,0.152,73,0.022,76,0.969,90,1.896,92,1.53,113,0.01,114,0.01,187,1.347,307,3.637,308,3.202,309,2.431,310,1.482,311,2.052,312,3.436,313,2.776,314,2.776,315,3.202,316,4.221,317,3.202,318,3.702,319,2.873,320,3.702,321,2.005,322,2.873,323,3.702,324,2.929,325,2.005,326,4.728,327,2.873,328,3.702,329,2.005,330,2.127,331,3.6,332,3.202,333,1.896,334,3.977,335,1.896,336,3.702,337,1.896,338,2.873,339,3.702,340,3.702,341,2.627,342,2.627,343,3.702,344,2.627,345,2.627,346,3.702]],["title/modules/BranchModule.html",[115,1.543,123,2.531]],["body/modules/BranchModule.html",[2,2.556,3,0.197,4,0.175,5,0.175,18,0.016,37,0.476,46,0.862,72,0.197,73,0.029,113,0.012,114,0.012,115,2.441,117,2.336,118,2.961,123,4.873,128,3.302,129,2.604,130,2.604,132,3.503,133,2.763,137,2.945,138,2.114,307,4.75,331,4.545,332,4.159,347,4.159,348,4.159,349,4.808,350,4.808,351,4.326,352,4.808,353,3.157,354,4.159,355,2.945]],["title/injectables/BranchService.html",[182,0.603,331,2.36]],["body/injectables/BranchService.html",[3,0.135,4,0.12,5,0.12,7,0.285,8,1.135,9,2.704,18,0.016,21,1.092,23,1.45,24,0.941,25,0.663,26,1.45,28,1.45,29,2.522,37,0.458,46,0.588,72,0.135,73,0.02,74,2.174,75,2.55,76,0.859,81,2.333,83,2.55,92,1.45,113,0.009,114,0.009,138,1.443,182,0.737,183,1.151,187,1.295,248,2.01,249,1.778,254,1.443,281,2.706,310,2.654,311,1.885,312,3.258,313,2.55,314,2.55,315,4.072,316,3.9,321,2.55,324,2.174,325,2.55,326,4.483,331,2.884,333,1.681,334,3.654,335,1.681,356,2.839,357,3.282,358,3.949,359,3.449,360,3.282,361,4.708,362,3.282,363,3.282,364,3.282,365,3.282,366,2.155,367,1.314,368,2.839,369,1.778,370,3.282,371,3.282,372,2.839,373,3.282,374,3.282,375,3.282,376,3.282,377,3.282,378,4.708,379,2.839,380,3.282,381,3.282]],["title/classes/CreateBranchDto.html",[73,0.023,316,2.36]],["body/classes/CreateBranchDto.html",[3,0.123,4,0.109,5,0.109,7,0.259,17,2.408,18,0.016,21,0.894,24,0.688,25,0.574,27,1.609,37,0.402,72,0.123,73,0.032,76,1.819,102,4.325,113,0.009,114,0.009,187,1.124,249,1.616,256,3.424,257,2.691,316,2.691,382,1.093,383,4.975,384,2.316,385,1.357,386,2.533,387,1.96,388,6.267,389,4.805,390,2.885,391,3.685,392,1.96,393,3.777,394,1.96,395,4.325,396,4.467,397,3.777,398,2.885,399,2.118,400,2.885,401,2.25,402,1.96,403,3.41,404,4.464,405,3.41,406,2.316,407,3.118,408,2.984,409,2.984,410,2.984,411,2.525,412,3.8,413,2.581,414,2.984,415,2.984,416,4.393,417,2.984,418,3.41,419,2.984,420,2.984,421,3.41,422,1.529,423,3.777,424,1.828,425,2.118,426,2.581,427,3.777,428,2.885,429,2.316,430,1.96,431,1.96,432,1.828,433,2.581,434,2.984,435,1.828,436,1.616,437,1.715,438,2.885,439,1.96,440,2.885,441,2.118,442,2.408,443,3.424,444,4.393,445,2.316,446,2.316,447,2.316,448,1.715,449,2.984,450,2.316,451,2.984,452,2.984]],["title/classes/CreatePermissionDto.html",[73,0.023,453,2.36]],["body/classes/CreatePermissionDto.html",[3,0.121,4,0.107,5,0.107,7,0.255,17,2.635,18,0.016,21,0.978,24,0.679,25,0.629,37,0.399,38,2.223,72,0.121,73,0.031,76,1.891,90,2.223,102,2.659,113,0.009,114,0.009,187,0.848,249,1.59,257,2.659,329,2.351,382,1.075,385,1.341,387,2.85,389,4.871,390,3.747,391,3.81,392,1.928,393,4.186,394,1.928,395,4.308,396,3.747,397,3.747,398,2.85,400,2.85,401,2.223,402,1.928,411,4.1,412,4.936,418,3.369,423,3.391,424,1.798,425,2.083,427,3.747,428,3.391,430,1.928,431,1.928,432,1.798,436,1.59,437,1.687,438,3.391,439,1.928,440,2.85,442,2.004,443,2.85,448,1.687,450,3.369,453,2.659,454,5.267,455,2.278,456,3.369,457,3.163,458,2.659,459,1.426,460,2.936,461,2.936,462,2.936,463,4.468,464,2.936,465,4.341,466,2.936,467,5.255,468,2.936,469,2.936,470,4.341,471,3.755,472,2.936,473,4.468,474,2.936,475,2.936,476,2.936,477,2.278,478,2.539,479,2.936,480,2.936,481,2.936,482,2.539,483,2.936,484,2.936,485,2.936,486,2.539,487,2.539]],["title/classes/CreateRoleDto.html",[73,0.023,488,2.36]],["body/classes/CreateRoleDto.html",[3,0.138,4,0.123,5,0.123,7,0.293,17,2.578,18,0.016,21,0.957,24,0.75,25,0.615,37,0.422,72,0.138,73,0.034,76,1.873,113,0.01,114,0.01,187,1.091,249,1.823,257,2.936,367,1.92,382,1.233,385,1.481,386,2.329,387,2.21,389,4.617,390,3.148,391,3.295,392,2.21,393,3.148,394,2.21,395,4.094,396,3.995,397,3.995,398,3.148,399,2.389,400,3.148,401,2.455,402,2.21,411,4.111,423,3.995,424,2.062,425,2.389,426,2.911,427,3.666,428,3.148,430,2.21,431,2.21,432,2.062,436,1.823,437,1.934,438,2.21,439,2.21,440,3.148,441,2.389,442,2.578,443,3.666,448,1.934,450,2.612,467,5.456,477,3.72,488,2.936,489,5.263,490,2.612,491,3.666,492,3.366,493,3.366,494,4.147,495,4.794,496,3.366,497,3.366,498,4.147,499,3.366,500,3.366,501,3.366,502,2.911,503,3.366,504,3.366,505,3.366,506,3.366]],["title/classes/CreateRouterDto.html",[73,0.023,507,2.531]],["body/classes/CreateRouterDto.html",[3,0.244,4,0.216,5,0.216,18,0.015,72,0.244,73,0.036,113,0.014,114,0.014,382,2.173,507,4.549,508,5.131,509,4.603]],["title/classes/CreateUserDto.html",[73,0.023,510,2.36]],["body/classes/CreateUserDto.html",[3,0.056,4,0.049,5,0.049,7,0.118,17,2.539,18,0.016,21,0.943,24,0.48,25,0.606,37,0.269,72,0.056,73,0.019,76,1.894,102,1.429,111,0.695,113,0.005,114,0.005,146,0.626,187,1.232,243,2.015,245,1.764,249,1.263,256,3.828,257,1.429,258,3.152,259,2.828,266,2.071,267,1.764,382,0.497,385,0.721,386,0.659,387,2.393,388,1.173,389,4.816,390,2.945,391,3.588,392,2.015,393,2.945,394,0.891,395,4.284,396,4.349,397,3.329,398,1.532,399,0.963,400,2.945,401,3.457,402,0.891,403,1.81,404,2.828,405,3.187,406,1.053,407,3.598,411,4.284,413,2.018,418,3.481,421,2.828,422,0.695,423,3.611,424,0.831,427,3.48,428,3.329,429,1.053,430,0.891,431,0.891,432,0.831,435,0.831,436,0.735,437,2.36,438,2.015,439,0.891,440,3.726,441,0.963,442,2.447,443,3.153,445,1.053,446,1.053,447,3.187,459,0.659,467,3.481,471,2.018,477,1.053,510,1.429,511,4.909,512,0.963,513,1.81,514,2.178,515,2.382,516,1.81,517,3.88,518,2.018,519,1.81,520,1.356,521,1.356,522,1.356,523,1.356,524,4.485,525,3.644,526,2.333,527,1.356,528,1.356,529,3.069,530,1.356,531,5.5,532,4.485,533,4.485,534,4.485,535,1.356,536,1.356,537,2.333,538,5.5,539,5.07,540,5.5,541,5.5,542,4.485,543,4.485,544,5.5,545,1.356,546,2.333,547,2.333,548,1.81,549,2.828,550,1.356,551,3.644,552,3.152,553,1.356,554,1.356,555,2.333,556,3.644,557,3.644,558,1.356,559,3.069,560,1.356,561,0.831,562,1.356,563,2.018,564,3.644,565,3.644,566,1.356,567,2.333,568,2.333,569,1.356,570,1.356,571,1.356,572,2.333,573,1.356,574,1.356,575,1.173,576,2.018,577,1.81,578,2.018,579,2.018,580,1.173,581,1.356,582,1.356,583,3.069,584,2.333,585,1.356,586,1.356,587,3.88,588,1.173,589,1.173,590,1.356,591,1.356,592,1.356,593,1.356,594,1.356,595,1.356,596,1.356,597,1.173,598,1.356,599,1.173,600,1.356,601,1.356,602,1.356,603,1.356,604,1.173,605,1.356,606,1.356,607,1.173,608,1.356,609,1.356,610,1.173,611,2.018,612,1.356,613,2.018,614,1.356,615,1.356,616,0.963,617,0.831,618,1.053]],["title/classes/FilterUserDto.html",[73,0.023,619,2.735]],["body/classes/FilterUserDto.html",[3,0.14,4,0.124,5,0.124,7,0.295,17,1.569,18,0.016,21,0.582,25,0.374,37,0.423,72,0.14,73,0.034,76,1.47,113,0.01,114,0.01,187,0.664,249,2.614,256,4.877,257,2.956,266,2.228,382,1.245,385,1.491,387,2.231,389,4.628,390,3.169,391,3.309,392,2.231,393,3.169,394,2.231,395,4.392,396,4.628,397,4.012,398,3.169,399,2.411,400,3.169,401,3.13,402,2.231,403,3.745,404,4.742,405,3.745,406,2.637,407,3.425,411,4.178,421,3.745,422,1.74,423,3.169,424,2.081,425,2.411,427,3.169,428,3.169,429,2.637,430,2.231,431,2.231,432,2.081,435,2.081,436,1.84,437,1.952,438,2.231,439,2.231,440,3.685,441,2.411,442,1.569,443,2.231,445,2.637,446,2.637,447,4.355,512,2.411,549,3.745,575,2.939,576,4.174,577,3.745,578,4.174,579,4.174,580,2.939,587,4.174,588,2.939,589,2.939,619,3.425,620,4.174,621,4.826,622,3.397,623,3.397,624,3.397]],["title/classes/GlobalService.html",[73,0.023,625,2.735]],["body/classes/GlobalService.html",[3,0.154,4,0.137,5,0.137,7,0.326,18,0.016,21,0.886,25,0.57,38,2.648,72,0.154,73,0.023,90,2.648,113,0.01,114,0.01,150,4.237,152,6.09,329,2.8,382,1.374,385,1.598,442,1.731,457,4.806,625,3.669,626,3.243,627,5.789,628,5.918,629,3.749,630,2.661,631,5.17,632,6.379,633,6.918,634,5.17,635,6.379,636,5.17,637,3.749]],["title/guards/GuestGuard.html",[49,2.735,293,2.735]],["body/guards/GuestGuard.html",[3,0.212,4,0.188,5,0.188,7,0.449,8,1.538,18,0.016,21,0.886,23,1.246,24,0.809,25,0.569,26,1.246,28,1.246,37,0.339,40,2.8,46,0.926,49,4.526,72,0.212,73,0.031,81,1.894,92,1.246,113,0.013,114,0.013,182,0.998,295,3.668,297,5.126,298,4.526,299,3.912,301,3.668,304,3.668,305,3.668,306,4.471,459,2.511,638,4.471,639,5.169]],["title/classes/HashHelper.html",[73,0.023,248,2.36]],["body/classes/HashHelper.html",[3,0.085,4,0.076,5,0.076,7,0.18,8,0.802,9,2.54,18,0.016,21,0.998,23,1.337,24,0.868,25,0.641,26,1.337,28,1.605,37,0.218,72,0.085,73,0.013,75,2.251,83,1.664,92,1.337,111,2.434,113,0.007,114,0.007,150,4.46,187,1.439,246,5.197,248,2.036,269,2.875,281,4.251,310,1.903,330,3.477,382,0.761,385,1.027,391,3.003,401,2.434,411,3.825,437,3.678,442,0.959,459,1.615,486,2.875,548,4.695,561,1.272,630,1.474,640,1.612,641,4.156,642,3.324,643,3.324,644,3.324,645,3.324,646,2.359,647,3.324,648,3.324,649,2.076,650,3.324,651,5.197,652,2.076,653,4.751,654,6.656,655,6.05,656,5.536,657,5.758,658,4.751,659,4.751,660,4.751,661,2.076,662,5.197,663,2.076,664,3.687,665,3.324,666,2.076,667,2.076,668,3.324,669,3.324,670,3.324,671,2.076,672,3.324,673,3.324,674,3.324,675,2.076,676,3.324,677,3.324,678,3.324,679,2.076,680,2.076,681,3.324,682,3.324,683,3.324,684,2.076,685,1.796,686,2.875,687,2.359,688,1.612,689,1.796,690,1.612,691,3.641,692,2.076,693,2.076,694,2.076,695,2.076,696,2.076,697,2.076,698,2.076,699,2.076,700,2.076,701,2.076,702,2.076,703,3.324,704,2.076,705,2.076,706,2.076]],["title/interfaces/IBranch.html",[369,2.087,707,1.242]],["body/interfaces/IBranch.html",[3,0.194,4,0.172,5,0.172,7,0.41,14,3.397,18,0.016,24,1.038,25,0.795,27,2.43,37,0.395,72,0.194,76,1.83,113,0.012,114,0.012,187,1.485,250,4.078,281,4.016,367,1.888,369,3.26,385,1.86,386,3.394,448,2.709,616,4.959,617,4.062,707,1.519,708,2.29,709,4.078,710,1.784,711,3.811,712,4.078]],["title/interfaces/IHash.html",[707,1.242,713,2.531]],["body/interfaces/IHash.html",[3,0.202,4,0.179,5,0.179,7,0.428,14,3.466,18,0.016,25,0.745,27,2.479,37,0.406,72,0.202,76,1.915,113,0.012,114,0.012,187,1.323,367,1.972,385,1.912,617,3.79,646,5.038,707,1.586,708,2.391,710,1.834,711,3.889,712,4.258,713,4.063,714,4.258,715,5.853,716,4.923,717,4.923,718,4.923,719,4.923]],["title/interfaces/IPermisssion.html",[707,1.242,720,2.531]],["body/interfaces/IPermisssion.html",[3,0.195,4,0.173,5,0.173,7,0.412,18,0.016,24,1.041,25,0.797,37,0.396,72,0.195,76,1.894,113,0.012,114,0.012,187,1.446,310,2.664,367,1.9,369,3.603,385,1.868,448,2.727,456,5.163,457,4.075,458,4.075,459,2.937,482,4.105,487,4.105,707,1.529,708,2.305,710,1.792,711,3.823,720,3.969,721,4.105,722,3.368,723,4.745,724,4.105]],["title/interfaces/IProfile.html",[707,1.242,725,2.531]],["body/interfaces/IProfile.html",[3,0.152,4,0.135,5,0.135,7,0.321,18,0.016,24,0.919,25,0.842,37,0.385,72,0.152,76,2.001,113,0.01,114,0.01,146,2.71,187,1.536,310,2.351,367,1.479,369,3.179,385,1.581,386,3.078,448,2.122,513,4.556,514,4.166,515,4.556,516,4.556,517,5.078,518,5.078,519,4.556,561,3.133,597,3.194,599,3.194,604,3.194,607,3.194,610,3.194,617,3.133,707,1.19,708,1.794,710,1.516,711,3.373,722,2.62,724,3.194,725,3.359,726,3.194,727,5.078,728,5.078,729,5.078,730,3.595,731,3.194,732,3.692,733,3.692,734,3.692,735,3.692,736,3.692,737,3.692]],["title/interfaces/IRefreshHash.html",[65,2.735,707,1.242]],["body/interfaces/IRefreshHash.html",[3,0.209,4,0.185,5,0.185,7,0.441,18,0.015,25,0.791,65,4.477,72,0.209,76,1.88,113,0.013,114,0.013,187,1.471,222,5.571,285,5.094,385,1.949,561,4.608,707,1.636,708,2.467,738,4.393,739,7.178,740,7.178]],["title/interfaces/IRoles.html",[707,1.242,730,2.36]],["body/interfaces/IRoles.html",[3,0.196,4,0.174,5,0.174,7,0.415,18,0.016,24,1.044,25,0.774,37,0.437,72,0.196,76,1.839,113,0.012,114,0.012,187,1.372,310,2.812,367,1.913,369,3.803,385,1.876,386,3.241,448,2.745,491,4.61,707,1.539,708,2.32,710,1.799,711,3.835,720,4.61,722,3.39,730,3.718,741,4.132,742,4.777,743,4.777]],["title/interfaces/IRouter.html",[707,1.242,744,2.735]],["body/interfaces/IRouter.html",[3,0.192,4,0.17,5,0.17,7,0.406,18,0.016,24,1.09,25,0.793,37,0.392,72,0.192,76,1.885,113,0.012,114,0.012,187,1.497,310,2.788,367,1.87,369,3.771,385,1.848,386,3.382,457,4.264,458,4.264,459,3.207,707,1.504,708,2.268,710,1.773,711,3.794,722,3.313,744,4.246,745,4.039]],["title/interfaces/IUser.html",[14,1.974,707,1.242]],["body/interfaces/IUser.html",[3,0.183,4,0.162,5,0.162,7,0.387,14,2.972,18,0.016,25,0.801,37,0.448,72,0.183,76,1.857,113,0.012,114,0.012,187,1.337,243,4.238,245,3.709,276,5.307,367,2.324,385,1.793,459,2.819,616,4.581,617,3.554,618,5.009,707,1.435,708,2.163,710,1.72,711,3.709,713,4.491,725,4.238,730,2.728,731,3.852,746,3.852,747,5.009,748,4.453,749,4.453,750,4.453,751,4.453,752,4.453,753,4.453,754,4.453]],["title/interfaces/IUserHash.html",[34,2.735,707,1.242]],["body/interfaces/IUserHash.html",[3,0.225,4,0.2,5,0.2,7,0.477,18,0.015,25,0.728,34,4.692,72,0.225,76,1.731,113,0.013,114,0.013,187,1.441,281,4.079,285,5.037,385,2.043,707,1.766,708,2.663,755,4.742,756,4.742,757,5.482]],["title/injectables/JwtAuthGuard.html",[50,2.735,182,0.603]],["body/injectables/JwtAuthGuard.html",[3,0.287,4,0.172,5,0.172,7,0.41,8,1.452,18,0.016,21,0.808,23,1.137,24,0.738,25,0.519,26,1.137,27,2.645,28,1.137,37,0.458,45,2.888,46,0.845,50,4.272,63,2.888,64,2.073,72,0.194,73,0.029,92,1.137,113,0.012,114,0.012,160,3.346,182,0.942,183,1.654,253,2.709,254,2.073,265,3.096,266,2.177,267,2.709,268,2.888,299,2.553,302,3.659,303,3.346,710,1.397,758,3.687,759,3.096,760,4.672,761,4.672,762,4.714,763,4.272,764,4.078,765,3.659,766,4.078]],["title/injectables/JwtLocalAuthGuard.html",[57,2.735,182,0.603]],["body/injectables/JwtLocalAuthGuard.html",[3,0.23,4,0.204,5,0.204,18,0.016,37,0.439,46,1.005,57,4.757,59,3.684,63,3.436,64,2.467,72,0.23,73,0.034,113,0.013,114,0.013,182,1.049,183,1.968,299,3.038,710,1.663,758,3.436,759,3.684,767,4.852]],["title/injectables/JwtNoAuthGuard.html",[71,2.531,182,0.603]],["body/injectables/JwtNoAuthGuard.html",[3,0.288,4,0.174,5,0.174,7,0.415,8,1.464,18,0.016,21,0.819,23,1.152,24,0.748,25,0.526,26,1.152,27,2.572,28,1.152,37,0.46,45,2.926,46,0.856,63,2.926,64,2.1,71,3.986,72,0.196,73,0.029,92,1.152,113,0.012,114,0.012,160,3.39,182,0.95,183,1.676,253,2.745,254,2.1,265,3.137,266,2.206,267,2.745,268,2.926,299,2.587,302,3.707,303,3.39,710,1.416,758,3.718,759,3.137,760,4.711,761,4.711,763,3.39,764,4.132,765,3.707,768,4.777,769,4.132]],["title/injectables/JwtRefreshGuard.html",[67,2.735,182,0.603]],["body/injectables/JwtRefreshGuard.html",[3,0.29,4,0.178,5,0.178,7,0.424,8,1.482,18,0.016,21,0.835,23,1.175,24,0.763,25,0.537,26,1.175,27,2.671,28,1.175,37,0.403,45,2.985,46,0.873,63,2.985,64,2.143,67,4.363,72,0.2,73,0.03,92,1.175,113,0.012,114,0.012,182,0.962,183,1.709,253,2.801,254,2.143,265,3.2,266,2.25,267,2.801,268,2.985,282,3.782,710,1.444,758,3.766,760,4.771,761,4.771,763,4.363,765,3.782,766,4.215,770,4.215,771,4.873]],["title/injectables/JwtStrategy.html",[182,0.603,194,2.531]],["body/injectables/JwtStrategy.html",[3,0.176,4,0.156,5,0.156,7,0.372,8,1.364,9,2.32,18,0.016,21,0.969,23,1.364,24,0.885,25,0.623,26,1.364,27,2.072,28,1.033,29,1.796,37,0.442,40,3.43,43,3.714,46,0.767,64,1.883,72,0.176,73,0.026,74,1.977,81,2.072,83,1.715,92,1.033,113,0.011,114,0.011,182,0.885,183,1.502,194,3.714,211,3.039,214,3.323,225,3.323,226,3.45,229,4.389,232,3.323,251,3.323,285,3.039,337,2.193,710,1.269,772,3.704,773,4.389,774,4.282,775,5.655,776,4.282,777,4.892,778,3.323,779,3.704,780,3.323,781,3.039,782,3.704,783,3.323,784,3.704,785,4.282,786,3.704,787,4.282,788,4.282,789,4.282,790,4.282,791,4.282,792,4.282]],["title/injectables/LocalAuthGuard.html",[51,2.735,182,0.603]],["body/injectables/LocalAuthGuard.html",[3,0.2,4,0.178,5,0.178,7,0.424,8,1.482,9,2.467,18,0.016,21,0.835,23,1.175,24,0.763,25,0.537,26,1.175,28,1.175,29,2.044,37,0.403,40,2.639,46,0.873,51,4.363,63,2.985,64,2.143,72,0.2,73,0.03,81,2.252,83,2.462,92,1.175,113,0.012,114,0.012,182,0.962,183,1.709,297,4.363,298,4.363,299,3.831,301,3.458,305,3.458,459,2.367,710,1.444,759,3.2,767,4.215,793,5.318,794,4.873,795,5.318,796,4.873,797,4.873]],["title/controllers/PermissionController.html",[0,1.616,798,2.735]],["body/controllers/PermissionController.html",[0,1.431,2,1.431,3,0.14,4,0.124,5,0.124,7,0.297,8,1.168,17,2.985,18,0.016,21,1.108,23,1.476,24,0.958,25,0.675,26,1.476,28,1.559,37,0.44,38,2.48,44,2.966,46,0.612,53,2.622,55,2.091,72,0.14,73,0.021,76,0.894,90,1.748,92,1.559,113,0.01,114,0.01,187,1.439,309,2.241,310,1.939,311,1.939,312,3.316,313,2.622,314,2.622,317,2.953,321,1.849,324,3.258,325,1.849,329,1.849,330,1.962,333,1.748,335,1.748,337,1.748,338,2.649,341,3.436,342,2.422,344,3.436,345,2.422,453,4.113,491,2.241,798,3.436,799,2.953,800,3.436,801,2.953,802,3.413,803,3.413,804,3.413,805,2.422,806,4.188,807,3.413,808,4.633,809,3.413,810,3.446,811,2.953,812,3.758,813,2.649,814,3.413,815,2.953,816,3.413,817,3.413,818,3.413,819,3.413,820,2.953,821,3.413]],["title/modules/PermissionModule.html",[115,1.543,124,2.531]],["body/modules/PermissionModule.html",[2,2.567,3,0.199,4,0.176,5,0.176,18,0.016,37,0.477,46,0.867,72,0.199,73,0.029,113,0.012,114,0.012,115,2.452,117,2.351,118,2.974,124,4.881,128,3.316,129,2.622,130,2.622,132,3.518,133,2.782,137,2.965,138,2.128,353,3.179,355,2.965,798,4.765,810,4.553,811,4.187,822,4.187,823,4.187,824,4.84,825,4.84,826,4.751,827,4.84,828,4.84]],["title/injectables/PermissionService.html",[182,0.603,810,2.36]],["body/injectables/PermissionService.html",[3,0.137,4,0.121,5,0.121,7,0.289,8,1.146,9,2.032,18,0.016,21,1.141,23,1.544,24,1.002,25,0.705,26,1.544,28,1.653,29,1.395,37,0.436,46,0.596,72,0.137,73,0.02,74,1.536,75,1.802,81,1.219,83,1.332,92,1.544,113,0.01,114,0.01,138,1.463,182,0.744,183,1.167,187,1.301,254,1.463,266,1.536,311,1.904,312,3.278,313,2.575,314,2.575,321,2.575,324,3.074,325,2.575,333,1.704,335,1.704,358,3.974,366,2.185,367,1.332,411,1.912,453,4.078,491,4.204,494,2.878,561,4.37,720,2.185,800,3.374,801,4.112,805,3.374,808,4.501,810,2.912,812,3.69,829,2.878,830,3.327,831,3.327,832,4.754,833,4.112,834,3.327,835,3.327,836,3.327,837,3.327,838,3.327,839,3.327,840,3.327,841,2.878,842,3.327,843,3.327,844,3.327,845,2.878,846,2.582,847,5.235,848,2.878,849,2.878]],["title/controllers/RolesController.html",[0,1.616,850,2.735]],["body/controllers/RolesController.html",[0,1.367,2,1.367,3,0.134,4,0.119,5,0.119,7,0.283,8,1.13,17,2.933,18,0.016,21,1.089,23,1.532,24,0.994,25,0.7,26,1.532,28,1.532,37,0.433,38,2.809,44,2.87,46,0.584,53,3.44,55,1.997,72,0.134,73,0.02,76,0.854,90,1.67,92,1.532,113,0.009,114,0.009,146,1.505,187,1.475,309,2.14,310,2.648,311,1.876,312,2.537,313,2.537,314,2.537,319,2.53,321,1.766,322,2.53,324,3.278,325,1.766,327,2.53,329,1.766,330,1.873,333,1.67,335,1.67,337,1.67,338,2.53,341,2.313,342,2.313,344,2.313,345,2.313,488,4.05,800,3.325,805,2.313,806,2.82,813,2.53,815,4.053,820,2.82,850,3.325,851,2.82,852,2.82,853,3.26,854,2.53,855,3.26,856,3.26,857,3.26,858,3.26,859,4.578,860,3.26,861,3.359,862,2.82,863,3.636,864,3.26,865,3.26,866,3.26,867,3.26,868,2.82,869,3.26,870,3.26,871,3.26]],["title/modules/RolesModule.html",[115,1.543,125,2.531]],["body/modules/RolesModule.html",[2,2.567,3,0.199,4,0.176,5,0.176,18,0.016,37,0.477,46,0.867,72,0.199,73,0.029,113,0.012,114,0.012,115,2.452,117,2.351,118,2.974,125,4.881,128,3.316,129,2.622,130,2.622,132,3.518,133,2.782,137,2.965,138,2.128,353,3.179,355,2.965,850,4.765,861,4.553,862,4.187,872,4.187,873,4.187,874,4.84,875,4.84,876,4.751,877,4.84,878,4.84]],["title/injectables/RolesService.html",[182,0.603,861,2.36]],["body/injectables/RolesService.html",[3,0.129,4,0.115,5,0.115,7,0.273,8,1.101,9,2.578,18,0.016,21,1.12,23,1.575,24,1.023,25,0.72,26,1.575,28,1.51,29,2.254,37,0.428,46,0.564,72,0.129,73,0.019,74,2.109,75,1.704,81,1.969,83,2.153,92,1.51,113,0.009,114,0.009,138,1.383,146,2.482,182,0.715,183,1.104,187,1.415,254,1.383,259,2.442,266,1.453,310,2.362,311,1.829,312,2.473,313,2.473,314,2.473,321,2.473,324,3.017,325,2.473,333,1.612,335,1.612,358,3.873,366,2.066,367,1.26,391,1.704,488,3.613,561,4.002,730,1.927,800,3.241,805,3.241,845,2.722,846,2.442,847,3.95,848,2.722,849,2.722,852,3.95,854,2.442,859,4.426,861,2.797,863,3.544,868,2.722,879,2.722,880,3.146,881,3.146,882,4.567,883,3.146,884,3.146,885,3.146,886,3.146,887,3.146,888,3.146,889,3.146,890,3.146,891,3.146,892,3.146,893,5.376,894,3.146,895,2.722,896,3.146,897,3.146,898,4.567]],["title/controllers/RouterController.html",[0,1.616,899,2.735]],["body/controllers/RouterController.html",[0,1.744,2,1.744,3,0.171,4,0.152,5,0.152,7,0.361,8,1.338,17,2.561,18,0.016,21,0.951,23,1.338,24,0.868,25,0.611,26,1.338,28,1.338,37,0.455,38,2.13,44,3.398,46,0.745,53,3.38,55,2.547,72,0.171,73,0.025,76,1.089,90,2.13,92,1.338,113,0.011,114,0.011,187,1.394,309,2.731,313,3.004,314,3.004,321,2.253,322,3.228,324,3.074,325,2.253,327,3.228,329,2.253,330,2.39,333,2.13,335,2.13,337,2.13,341,2.952,342,2.952,344,2.952,345,2.952,359,3.38,458,2.547,507,2.731,899,3.937,900,3.598,901,4.159,902,4.858,903,4.159,904,3.598,905,4.305,906,4.159,907,4.159,908,4.159]],["title/guards/RouterGuard.html",[293,2.735,909,2.735]],["body/guards/RouterGuard.html",[3,0.156,4,0.138,5,0.138,7,0.33,8,1.258,9,2.183,18,0.016,21,0.894,23,1.258,24,0.817,25,0.575,26,1.258,28,0.916,29,1.593,37,0.342,40,2.057,46,0.681,72,0.156,73,0.023,74,1.754,76,0.995,81,2.463,83,2.089,92,1.747,98,2.948,111,3.052,113,0.01,114,0.01,141,2.696,146,1.754,182,0.817,295,2.696,297,4.552,298,3.702,299,3.474,301,2.696,304,2.696,305,2.696,337,1.946,359,3.474,368,3.286,372,3.286,491,2.494,687,2.696,909,3.702,910,3.286,911,3.799,912,3.799,913,3.799,914,5.217,915,3.286,916,3.799,917,5.217,918,3.799,919,3.702,920,3.799,921,3.799,922,3.799,923,3.799,924,3.799,925,3.799,926,3.799,927,3.799,928,3.799,929,4.978,930,3.799,931,3.799,932,3.799,933,5.959,934,3.799,935,3.799,936,3.799,937,3.799,938,3.799,939,3.799,940,3.799,941,3.799]],["title/modules/RouterModule.html",[115,1.543,126,2.531]],["body/modules/RouterModule.html",[2,2.458,3,0.186,4,0.165,5,0.165,18,0.016,37,0.479,46,0.81,72,0.186,73,0.027,113,0.012,114,0.012,115,2.347,117,2.197,118,2.847,126,4.881,128,3.175,129,2.45,130,2.45,132,3.368,133,2.599,137,2.77,138,1.989,199,3.51,351,4.16,353,2.97,354,3.912,355,2.77,359,4.189,899,4.615,904,3.912,942,3.912,943,3.912,944,3.912,945,4.523,946,5.861,947,4.523,948,3.51,949,4.523,950,4.523,951,4.523,952,4.523,953,4.523]],["title/injectables/RouterService.html",[182,0.603,359,2.087]],["body/injectables/RouterService.html",[3,0.113,4,0.1,5,0.1,7,0.239,8,0.997,9,2.741,18,0.016,21,1.107,23,1.429,24,0.927,25,0.653,26,1.429,28,1.501,29,2.318,37,0.423,46,0.493,72,0.113,73,0.017,74,1.27,75,2.993,81,2.365,82,1.953,83,2.722,92,1.333,113,0.008,114,0.008,138,1.21,141,2.935,152,3.21,182,0.647,183,0.965,187,1.408,248,1.685,249,1.49,281,2.377,304,1.953,310,1.99,311,1.656,313,2.24,314,2.24,321,2.24,324,1.91,325,2.24,335,1.409,358,3.629,359,2.24,366,1.807,367,1.102,379,2.38,386,1.337,457,1.685,458,1.685,625,1.953,627,2.38,687,3.527,744,1.953,756,2.38,795,5.384,902,4.362,905,2.135,919,1.953,954,2.38,955,5.527,956,6.224,957,2.752,958,2.752,959,4.136,960,4.136,961,2.752,962,2.752,963,2.752,964,2.752,965,2.752,966,2.752,967,2.752,968,2.752,969,2.752,970,2.752,971,2.752,972,2.752,973,2.752,974,2.752,975,2.752,976,2.752,977,4.136,978,2.752,979,2.752,980,2.752,981,2.752,982,2.752,983,2.752,984,2.752,985,2.752,986,4.136,987,2.752,988,2.752,989,2.752,990,2.752,991,2.752,992,2.752,993,2.752]],["title/injectables/RtStrategy.html",[182,0.603,195,2.531]],["body/injectables/RtStrategy.html",[3,0.163,4,0.144,5,0.144,7,0.345,8,1.295,9,2.232,18,0.016,21,0.921,23,1.295,24,0.841,25,0.592,26,1.295,28,0.956,29,1.663,37,0.447,40,3.537,43,2.604,46,0.711,64,1.744,69,3.077,72,0.163,73,0.024,74,1.831,81,1.453,82,4.324,92,1.469,113,0.011,114,0.011,182,0.841,183,1.391,195,3.527,211,2.814,222,3.077,225,3.077,226,3.345,229,4.169,251,3.077,253,3.087,254,2.362,263,3.077,266,2.48,267,3.087,268,3.29,282,3.077,287,3.43,337,2.031,710,1.175,773,4.169,777,5.27,778,3.077,779,3.43,780,3.077,781,2.814,782,3.43,783,3.077,784,3.43,786,3.43,994,3.43,995,3.965,996,4.647,997,3.965,998,3.077,999,3.965,1000,3.965,1001,5.372,1002,3.965,1003,3.965,1004,5.372,1005,3.965,1006,3.965,1007,3.965,1008,3.965]],["title/injectables/SessionSerializer.html",[182,0.603,196,2.531]],["body/injectables/SessionSerializer.html",[3,0.183,4,0.163,5,0.163,7,0.388,8,1.402,9,2.368,18,0.016,21,0.997,23,1.402,24,0.91,25,0.641,26,1.402,27,2.508,28,1.402,37,0.381,46,0.8,64,1.964,72,0.183,73,0.027,113,0.012,114,0.012,182,0.91,183,1.567,187,0.873,196,3.818,710,1.723,763,4.126,1009,3.864,1010,6.464,1011,5.814,1012,5.814,1013,5.814,1014,7.278,1015,4.467,1016,6.464,1017,4.467,1018,4.512,1019,5.814,1020,4.467,1021,4.467,1022,5.814,1023,4.467,1024,4.467,1025,5.814,1026,4.467]],["title/classes/UpdateBranchDto.html",[73,0.023,326,2.531]],["body/classes/UpdateBranchDto.html",[3,0.232,4,0.206,5,0.206,18,0.016,37,0.441,72,0.232,73,0.034,113,0.014,114,0.014,311,2.264,316,3.463,326,4.422,334,4.388,382,2.071,384,4.388,422,2.896,710,1.676,1027,4.89,1028,3.712,1029,5.654]],["title/classes/UpdatePermissionDto.html",[73,0.023,808,2.531]],["body/classes/UpdatePermissionDto.html",[3,0.232,4,0.206,5,0.206,18,0.016,37,0.441,72,0.232,73,0.034,113,0.014,114,0.014,311,2.264,382,2.071,422,2.896,453,3.463,455,4.388,710,1.676,808,4.422,812,4.388,1028,3.712,1030,4.89,1031,5.654]],["title/classes/UpdateRoleDto.html",[73,0.023,859,2.531]],["body/classes/UpdateRoleDto.html",[3,0.232,4,0.206,5,0.206,18,0.016,37,0.441,72,0.232,73,0.034,113,0.014,114,0.014,311,2.264,382,2.071,422,2.896,488,3.463,490,4.388,710,1.676,859,4.422,863,4.388,1028,3.712,1032,4.89,1033,5.654]],["title/classes/UpdateRouterDto.html",[73,0.023,902,2.531]],["body/classes/UpdateRouterDto.html",[3,0.221,4,0.196,5,0.196,7,0.468,18,0.016,21,0.922,25,0.593,37,0.428,72,0.221,73,0.033,113,0.013,114,0.013,311,2.155,382,1.971,385,2.02,386,3.175,422,2.756,459,2.614,507,3.533,509,4.176,710,1.595,902,4.292,905,4.176,1028,3.533,1034,5.654,1035,5.38,1036,5.38,1037,5.38]],["title/classes/UpdateUserDto.html",[73,0.023,1038,2.735]],["body/classes/UpdateUserDto.html",[3,0.232,4,0.206,5,0.206,18,0.016,37,0.441,72,0.232,73,0.034,113,0.014,114,0.014,311,2.264,382,2.071,422,2.896,510,3.463,512,4.012,710,1.676,1028,3.712,1038,4.779,1039,4.89,1040,4.388,1041,5.654]],["title/controllers/UsersController.html",[0,1.616,1042,2.735]],["body/controllers/UsersController.html",[0,1.179,2,1.179,3,0.115,4,0.102,5,0.102,7,0.244,8,1.013,9,2.621,14,2.861,15,5.912,17,2.579,18,0.016,19,3.635,21,0.957,23,1.347,24,0.874,25,0.615,26,1.347,27,2.19,28,1.347,29,2.342,37,0.456,38,1.44,39,2.431,42,2.431,43,1.845,44,3.083,46,0.504,53,2.726,55,1.721,60,2.431,71,1.845,72,0.115,73,0.017,76,0.736,81,2.046,83,2.394,90,1.44,92,1.347,105,2.431,113,0.008,114,0.008,187,1.226,226,2.578,245,2.415,253,2.415,254,1.848,256,2.759,266,1.94,309,1.845,310,2.512,311,1.683,312,2.276,319,2.181,324,2.579,329,1.522,330,1.615,333,1.44,335,1.44,337,1.44,391,1.522,395,1.721,401,1.44,510,3.983,619,4.615,747,3.261,758,1.721,813,2.181,846,2.181,909,2.982,998,2.181,1038,1.994,1040,3.906,1042,2.982,1043,2.431,1044,3.635,1045,4.202,1046,2.81,1047,2.81,1048,2.81,1049,2.81,1050,4.202,1051,2.81,1052,2.81,1053,2.81,1054,2.81,1055,2.81,1056,2.81,1057,2.431,1058,2.431,1059,2.81,1060,2.81,1061,2.81,1062,2.81,1063,2.81,1064,4.202,1065,2.81,1066,2.81,1067,4.202,1068,2.81,1069,2.81,1070,2.81,1071,2.81,1072,2.81,1073,2.81,1074,2.81,1075,2.431,1076,2.81,1077,2.81,1078,2.81,1079,2.81,1080,2.81,1081,2.81,1082,2.81,1083,2.81,1084,2.81,1085,2.81,1086,2.81]],["title/modules/UsersModule.html",[115,1.543,127,2.36]],["body/modules/UsersModule.html",[2,2.424,3,0.182,4,0.161,5,0.161,18,0.016,37,0.485,46,0.793,72,0.182,73,0.027,113,0.012,114,0.012,115,2.315,117,2.15,118,2.808,127,4.529,128,3.13,129,2.397,130,2.397,132,3.321,133,2.544,137,2.711,138,1.946,199,3.435,226,3.948,353,2.906,355,3.942,1042,4.567,1057,3.829,1087,3.829,1088,3.829,1089,3.829,1090,4.426,1091,4.426,1092,4.485,1093,4.426,1094,4.485,1095,4.426,1096,4.485,1097,4.426,1098,4.426,1099,4.426,1100,4.426,1101,4.426]],["title/injectables/UsersService.html",[182,0.603,226,1.974]],["body/injectables/UsersService.html",[3,0.081,4,0.072,5,0.072,7,0.172,8,0.771,9,2.755,14,2.368,18,0.016,21,1.105,23,1.555,24,1.009,25,0.71,26,1.555,27,2.447,28,1.52,29,2.128,37,0.374,46,0.355,72,0.081,73,0.012,74,1.477,75,2.18,81,2.407,83,2.675,92,1.584,111,1.639,113,0.006,114,0.006,138,0.871,182,0.501,183,0.695,187,1.465,226,1.639,232,4.613,233,1.537,245,2.313,246,4.357,254,2.231,263,1.537,276,4.613,281,1.838,311,1.281,312,1.733,324,2.134,333,1.014,358,4.14,366,1.3,367,0.793,510,3.324,514,2.27,646,4.053,687,1.405,713,1.3,725,1.3,747,3.587,769,1.713,833,2.767,841,1.713,854,1.537,895,1.713,929,1.537,1040,1.537,1044,2.767,1058,1.713,1102,1.713,1103,3.199,1104,3.199,1105,3.199,1106,3.199,1107,3.199,1108,3.199,1109,3.199,1110,3.199,1111,1.98,1112,4.025,1113,4.025,1114,1.98,1115,3.199,1116,3.199,1117,1.98,1118,3.199,1119,1.98,1120,1.98,1121,1.98,1122,1.98,1123,3.199,1124,1.98,1125,3.199,1126,4.622,1127,1.98,1128,3.199,1129,1.98,1130,1.98,1131,1.98,1132,3.199,1133,1.98,1134,3.199,1135,1.98,1136,1.98,1137,1.98,1138,1.98,1139,1.98,1140,1.98,1141,1.98,1142,1.98,1143,1.98,1144,3.199,1145,1.98,1146,1.98,1147,1.98,1148,1.98,1149,1.98,1150,1.98,1151,1.98,1152,3.199,1153,3.199,1154,1.98,1155,1.98,1156,1.98,1157,1.98,1158,1.98,1159,1.98,1160,4.025,1161,1.98,1162,1.98,1163,1.98,1164,1.98,1165,1.98,1166,1.98,1167,3.199,1168,3.199,1169,1.98,1170,1.98,1171,1.98,1172,1.98,1173,1.98]],["title/coverage.html",[1174,4.089]],["body/coverage.html",[0,2.391,1,1.571,5,0.081,6,1.914,14,1.134,18,0.016,25,0.244,27,0.811,34,1.571,47,1.355,49,1.571,50,1.571,51,1.571,53,1.199,54,1.453,57,1.571,59,1.453,61,1.272,65,1.571,67,1.571,71,1.453,73,0.043,113,0.007,114,0.007,146,1.022,182,1.111,184,1.914,194,1.453,195,1.453,196,1.453,197,1.453,218,1.914,226,1.134,248,1.355,254,0.973,293,3.076,294,1.718,296,1.914,307,1.571,308,1.914,310,0.886,316,1.355,326,1.453,331,1.355,351,1.571,356,1.914,359,1.199,369,1.199,383,1.914,384,2.714,435,1.355,436,1.199,453,1.355,454,1.914,455,2.714,488,1.355,489,1.914,490,2.714,507,1.453,508,1.914,509,2.714,510,1.355,511,1.914,512,3.076,619,1.571,620,1.914,625,1.571,626,1.914,638,1.914,640,2.714,688,1.718,691,1.453,707,2.052,709,1.914,713,1.453,714,1.914,720,1.453,721,1.914,725,1.453,726,1.914,730,1.355,738,1.914,741,1.914,744,1.571,745,1.914,746,1.914,755,1.914,758,3.016,759,3.234,770,1.914,772,1.914,793,1.914,798,1.571,799,1.914,808,1.453,810,1.355,826,1.718,829,1.914,850,1.571,851,1.914,859,1.453,861,1.355,876,1.718,879,1.914,899,1.571,900,1.914,902,1.453,909,1.571,910,1.914,919,5.664,948,1.718,954,1.914,994,1.914,1009,1.914,1018,3.822,1027,1.914,1030,1.914,1032,1.914,1034,1.914,1038,1.571,1039,1.914,1042,1.571,1043,1.914,1092,1.718,1094,1.718,1096,1.718,1102,1.914,1174,1.718,1175,2.213,1176,2.213,1177,2.213,1178,4.925,1179,1.718,1180,6.866,1181,7.433,1182,6.37,1183,4.335,1184,6.189,1185,1.914,1186,5.363,1187,5.701,1188,1.914,1189,1.914,1190,1.914,1191,1.914,1192,1.914,1193,1.914,1194,1.914,1195,1.914,1196,3.497,1197,2.213,1198,1.914,1199,1.914,1200,2.213,1201,2.714,1202,1.914,1203,1.914,1204,4.335,1205,1.914,1206,1.914,1207,1.914,1208,2.213,1209,2.213,1210,1.914,1211,1.914,1212,1.914,1213,2.213,1214,2.213,1215,2.213]],["title/dependencies.html",[118,2.253,1216,2.78]],["body/dependencies.html",[18,0.016,46,0.774,54,2.837,59,2.837,64,1.9,69,4.415,73,0.035,103,3.737,113,0.011,114,0.011,118,2.099,136,3.353,138,1.9,140,3.353,141,3.066,142,3.737,149,3.737,150,2.646,158,3.737,160,3.066,201,3.353,211,3.066,303,3.066,367,1.73,422,2.213,424,2.646,432,2.646,685,3.737,686,3.737,690,3.353,781,4.514,1217,7.023,1218,5.689,1219,4.32,1220,4.32,1221,5.689,1222,4.32,1223,4.32,1224,4.32,1225,4.32,1226,4.32,1227,4.32,1228,4.32,1229,4.32,1230,4.32,1231,3.737,1232,4.32,1233,4.32,1234,4.32,1235,4.32,1236,4.32,1237,4.32,1238,4.32,1239,4.32,1240,4.32,1241,4.32,1242,4.32,1243,4.32,1244,4.32,1245,4.32,1246,4.32,1247,4.32,1248,4.32,1249,4.32,1250,3.737,1251,3.737,1252,4.32]],["title/miscellaneous/enumerations.html",[1253,1.968,1254,4.011]],["body/miscellaneous/enumerations.html",[7,0.346,18,0.016,27,2.395,38,3.125,90,2.757,102,2.435,113,0.011,114,0.011,146,1.836,233,4.177,329,2.915,401,3.125,433,4.655,442,3.645,463,4.655,473,3.439,478,4.655,498,4.655,502,3.439,563,3.439,577,3.086,1179,3.086,1253,2.435,1254,3.439,1255,5.382,1256,4.655,1257,4.655,1258,3.976,1259,3.976,1260,3.976,1261,7.042,1262,3.976,1263,5.382,1264,3.976,1265,5.382,1266,4.655,1267,3.976,1268,5.382,1269,3.976,1270,3.976,1271,3.976,1272,3.976,1273,3.976,1274,6.538,1275,3.976,1276,5.382,1277,3.976,1278,6.538,1279,6.538,1280,3.976,1281,5.382,1282,3.976,1283,3.976,1284,5.382,1285,5.382,1286,5.382]],["title/miscellaneous/functions.html",[1253,1.968,1287,4.011]],["body/miscellaneous/functions.html",[7,0.461,18,0.015,23,1.687,24,1.095,26,1.687,53,3.509,54,4.254,113,0.013,114,0.013,146,3.23,1189,4.586,1190,5.603,1192,4.586,1194,4.586,1201,4.114,1202,6.051,1253,3.247,1287,4.586,1288,5.301,1289,4.586,1290,5.301,1291,5.301,1292,5.301,1293,6.995,1294,5.301,1295,5.301]],["title/index.html",[7,0.279,1296,3.214,1297,3.214]],["body/index.html",[4,0.163,18,0.016,113,0.012,114,0.012,140,5.017,151,3.864,664,3.467,1174,3.467,1298,4.467,1299,4.467,1300,5.814,1301,4.467,1302,4.467,1303,4.467,1304,4.467,1305,4.467,1306,4.467,1307,4.467,1308,4.467,1309,4.467,1310,4.467,1311,7.411,1312,4.467,1313,4.467,1314,4.467,1315,7.278,1316,4.467,1317,4.467,1318,5.814,1319,4.467,1320,4.467,1321,4.467,1322,4.467,1323,5.814,1324,5.814,1325,4.467,1326,4.467,1327,4.467,1328,5.814,1329,5.814,1330,4.467,1331,4.467,1332,4.467,1333,4.467,1334,4.467,1335,3.864,1336,4.467,1337,4.467,1338,4.467,1339,4.467,1340,4.467,1341,4.467,1342,4.467,1343,4.467,1344,4.467,1345,3.864,1346,4.467,1347,4.467,1348,4.467,1349,4.467,1350,4.467,1351,4.467,1352,3.864]],["title/injectables/localStrategy.html",[182,0.603,197,2.531]],["body/injectables/localStrategy.html",[3,0.176,4,0.156,5,0.156,7,0.373,8,1.366,9,2.323,18,0.016,21,0.971,23,1.366,24,0.887,25,0.624,26,1.366,27,2.076,28,1.036,29,1.801,37,0.442,43,2.82,45,2.631,46,0.77,59,2.82,61,4.137,64,1.888,72,0.176,73,0.026,74,1.983,76,1.125,81,1.573,83,1.72,92,1.036,111,2.2,113,0.011,114,0.011,182,0.887,183,1.507,187,1.407,197,3.721,204,3.715,243,4.603,245,3.875,337,2.2,710,1.273,773,4.398,778,3.333,780,3.333,781,3.048,783,3.333,996,4.901,1185,3.715,1353,4.295,1354,4.295,1355,4.295,1356,4.295,1357,4.295,1358,4.295,1359,4.295,1360,4.295]],["title/modules.html",[117,2.559]],["body/modules.html",[18,0.013,113,0.013,114,0.013,116,3.833,117,2.623,122,3.546,123,3.546,124,3.546,125,3.546,126,3.546,127,3.308,1335,6.684,1361,7.727,1362,7.727,1363,7.727]],["title/overview.html",[1364,4.557]],["body/overview.html",[2,1.537,18,0.016,47,3.581,61,4.049,113,0.01,114,0.01,116,5.473,117,1.78,118,2.472,119,3.169,120,3.169,121,3.169,122,5.064,123,4.358,124,4.358,125,4.358,126,4.51,127,4.315,128,2.756,129,1.985,130,1.985,183,1.285,190,3.169,191,3.169,193,3.169,194,3.839,195,3.839,196,3.839,197,3.839,226,3.609,295,2.6,331,3.581,347,3.169,348,3.169,359,3.816,382,1.342,549,2.844,552,3.169,708,1.78,810,3.581,822,3.169,823,3.169,861,3.581,872,3.169,873,3.169,942,3.169,943,3.169,944,3.169,1087,3.169,1088,3.169,1089,3.169,1364,3.169,1365,3.664,1366,3.664,1367,3.664,1368,3.169]],["title/properties.html",[385,1.433,1216,2.78]],["body/properties.html",[18,0.016,113,0.014,114,0.014,385,1.84,664,4.622,1345,5.152,1352,5.152,1369,5.956,1370,5.956,1371,5.956]],["title/classes/regexHelper.html",[73,0.023,435,2.36]],["body/classes/regexHelper.html",[3,0.154,4,0.136,5,0.136,7,0.325,18,0.016,21,1.214,72,0.154,73,0.023,113,0.01,114,0.01,150,4.818,382,1.37,385,1.595,435,3.161,442,3.271,630,5.028,691,4.652,919,4.522,1198,3.235,1368,5.512,1372,5.91,1373,5.91,1374,5.91,1375,5.91,1376,5.91,1377,5.91,1378,5.91,1379,5.161,1380,3.74,1381,3.74,1382,7.219,1383,7.219,1384,5.161,1385,5.161,1386,5.161,1387,3.74,1388,5.161,1389,5.161,1390,3.74,1391,5.161,1392,5.161,1393,5.161,1394,3.74,1395,5.161,1396,5.161,1397,3.74,1398,3.74]],["title/classes/sanitizeHelper.html",[73,0.023,436,2.087]],["body/classes/sanitizeHelper.html",[3,0.137,4,0.122,5,0.122,7,0.291,8,1.15,18,0.016,21,0.953,23,1.341,24,0.871,25,0.613,26,1.341,28,1.608,37,0.219,72,0.137,73,0.02,92,1.341,113,0.01,114,0.01,150,4.375,187,1.46,246,4.304,330,3.196,382,1.224,401,3.595,407,3.385,436,2.583,437,4.164,442,2.202,548,3.702,656,5.768,657,5.768,691,3.652,1075,4.126,1199,2.891,1250,2.891,1251,2.891,1399,4.77,1400,4.77,1401,4.77,1402,3.343,1403,3.343,1404,6.668,1405,6.065,1406,6.065,1407,4.77,1408,4.77,1409,3.343,1410,4.77,1411,6.065,1412,4.77,1413,3.343,1414,4.77,1415,4.77,1416,3.343,1417,3.343,1418,4.77,1419,4.77,1420,4.77,1421,4.77,1422,4.77,1423,3.343,1424,3.343,1425,3.343,1426,3.343]],["title/miscellaneous/variables.html",[1253,1.968,1427,4.011]],["body/miscellaneous/variables.html",[7,0.194,9,1.289,18,0.016,24,0.774,25,0.783,27,2.273,40,1.905,81,1.972,82,1.583,83,1.409,92,1.193,98,1.731,111,3.271,113,0.007,114,0.007,146,2.011,187,1.17,243,1.464,245,1.282,253,2.504,254,2.932,265,2.31,266,1.624,267,2.022,268,2.155,299,1.905,310,2.398,324,1.624,351,2.497,355,3.667,386,2.403,442,3.176,456,1.731,457,2.155,458,2.668,459,1.083,513,1.731,514,1.583,515,1.731,516,1.731,519,1.731,611,4.656,613,6.204,616,2.497,617,3.029,618,1.731,630,5.228,640,1.731,646,1.583,688,2.73,689,1.929,690,1.731,691,2.31,715,1.929,727,1.929,728,1.929,729,1.929,826,2.73,876,2.73,915,1.929,929,2.73,948,2.73,998,1.731,1018,1.731,1092,2.73,1094,2.73,1096,2.73,1179,1.731,1188,1.929,1191,1.929,1193,1.929,1195,1.929,1201,1.731,1203,3.043,1205,1.929,1206,1.929,1207,1.929,1210,1.929,1211,1.929,1212,1.929,1231,1.929,1253,1.366,1256,1.929,1257,1.929,1266,1.929,1289,1.929,1427,1.929,1428,2.23,1429,2.23,1430,2.23,1431,2.23,1432,2.23,1433,2.23,1434,2.23,1435,2.23,1436,2.23,1437,2.23,1438,2.23,1439,3.518,1440,3.518,1441,3.518,1442,3.518,1443,2.23,1444,2.23,1445,2.23,1446,2.23,1447,2.23,1448,2.23,1449,5.383,1450,4.356,1451,2.23,1452,4.356,1453,6.879,1454,2.23,1455,6.386,1456,2.23,1457,2.23,1458,4.356,1459,2.23,1460,2.23,1461,3.518,1462,4.946,1463,2.23,1464,2.23,1465,2.23,1466,2.23,1467,2.23,1468,2.23,1469,2.23,1470,2.23,1471,2.23,1472,2.23,1473,2.23,1474,3.518,1475,2.23,1476,2.23,1477,2.23,1478,2.23,1479,2.23,1480,2.23,1481,2.23,1482,2.23,1483,2.23,1484,2.23,1485,2.23,1486,2.23,1487,2.23,1488,4.356,1489,2.23,1490,2.23,1491,2.23]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":919,"title":{},"body":{"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"coverage.html":{},"classes/regexHelper.html":{}}}],["0.0.1",{"_index":1370,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["0.28.7",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1186,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["00)?(\\+)?\\d{1,3",{"_index":1391,"title":{},"body":{"classes/regexHelper.html":{}}}],["1.0.0",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":648,"title":{},"body":{"classes/HashHelper.html":{}}}],["100",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["12",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["16",{"_index":1367,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["2.7.1",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["21.234.567",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"overview.html":{}}}],["3.0.0",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["56",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["6",{"_index":1366,"title":{},"body":{"overview.html":{}}}],["6.0.5",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["60m",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":1365,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.'})@maxlength(12",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":1368,"title":{},"body":{"overview.html":{},"classes/regexHelper.html":{}}}],["9.0.0",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["aca",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["access",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"dependencies.html":{}}}],["access(method",{"_index":960,"title":{},"body":{"injectables/RouterService.html":{}}}],["access.method",{"_index":937,"title":{},"body":{"guards/RouterGuard.html":{}}}],["access_token",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontrolmodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["action",{"_index":847,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["active",{"_index":1278,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actualmente",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["admin",{"_index":1274,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allowedattributes",{"_index":1420,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["allowedtags",{"_index":1419,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["amazing",{"_index":1336,"title":{},"body":{"index.html":{}}}],["any,req",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apellido",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["api",{"_index":631,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/error",{"_index":634,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/router",{"_index":632,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/router/:id",{"_index":633,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/v1/swagger",{"_index":635,"title":{},"body":{"classes/GlobalService.html":{}}}],["apiproperty",{"_index":421,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["app",{"_index":1313,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["app.roles",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1306,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":116,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appresources",{"_index":1255,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["approles",{"_index":1257,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["approles.user",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appservice",{"_index":47,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":686,"title":{},"body":{"classes/HashHelper.html":{},"dependencies.html":{}}}],["argon2.hash(str",{"_index":704,"title":{},"body":{"classes/HashHelper.html":{}}}],["argon2.verify(str",{"_index":706,"title":{},"body":{"classes/HashHelper.html":{}}}],["array",{"_index":1414,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["arraynotempty",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["arraynotempty({message:'debe",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["autentificación",{"_index":677,"title":{},"body":{"classes/HashHelper.html":{}}}],["auth",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth(...roles",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth.guard",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":768,"title":{},"body":{"injectables/JwtNoAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":794,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":762,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"injectables/localStrategy.html":{}}}],["auth/auth.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards",{"_index":52,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["authenticatedguard",{"_index":294,"title":{"guards/AuthenticatedGuard.html":{}},"body":{"guards/AuthenticatedGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":765,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":767,"title":{},"body":{"injectables/JwtLocalAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":122,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1345,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":61,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["autorizado",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1337,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":998,"title":{},"body":{"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception('correo",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception('no",{"_index":1004,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["badrequestexception('nombre",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["banned",{"_index":1286,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":684,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcrypt.compare(str",{"_index":694,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcrypt.hash(str",{"_index":692,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcryptjs",{"_index":685,"title":{},"body":{"classes/HashHelper.html":{},"dependencies.html":{}}}],["blacklist",{"_index":623,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["blacklist.enum.ts",{"_index":1265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":459,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IPermisssion.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/LocalAuthGuard.html":{},"classes/UpdateRouterDto.html":{},"miscellaneous/variables.html":{}}}],["booleano",{"_index":486,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/HashHelper.html":{}}}],["booleano'})@isnotempty({message",{"_index":461,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["bootstrap",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":310,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["branch.controller",{"_index":350,"title":{},"body":{"modules/BranchModule.html":{}}}],["branch.dto",{"_index":334,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/UpdateBranchDto.html":{}}}],["branch.dto.ts",{"_index":384,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["branch.dto.ts:16",{"_index":409,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.dto.ts:22",{"_index":420,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.dto.ts:27",{"_index":414,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.map(async",{"_index":985,"title":{},"body":{"injectables/RouterService.html":{}}}],["branch.save",{"_index":377,"title":{},"body":{"injectables/BranchService.html":{}}}],["branch.service",{"_index":332,"title":{},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{}}}],["branch.token",{"_index":375,"title":{},"body":{"injectables/BranchService.html":{}}}],["branch/branch.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["branch:code",{"_index":843,"title":{},"body":{"injectables/PermissionService.html":{}}}],["branch:ibranch",{"_index":724,"title":{},"body":{"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{}}}],["branch:string",{"_index":868,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["branchcontroller",{"_index":307,"title":{"controllers/BranchController.html":{}},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{},"coverage.html":{}}}],["branches",{"_index":378,"title":{},"body":{"injectables/BranchService.html":{}}}],["branchmodel",{"_index":361,"title":{},"body":{"injectables/BranchService.html":{}}}],["branchmodule",{"_index":123,"title":{"modules/BranchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"modules.html":{},"overview.html":{}}}],["branchschema",{"_index":351,"title":{},"body":{"modules/BranchModule.html":{},"modules/RouterModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["branchservice",{"_index":331,"title":{"injectables/BranchService.html":{}},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"coverage.html":{},"overview.html":{}}}],["browse",{"_index":1363,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1361,"title":{},"body":{"modules.html":{}}}],["browser:string",{"_index":719,"title":{},"body":{"interfaces/IHash.html":{}}}],["building",{"_index":1301,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":977,"title":{},"body":{"injectables/RouterService.html":{}}}],["bytes",{"_index":699,"title":{},"body":{"classes/HashHelper.html":{}}}],["bytes.tostring(cryptojs.enc.utf8",{"_index":702,"title":{},"body":{"classes/HashHelper.html":{}}}],["cache",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["cachemodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":297,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["canactivate(context",{"_index":298,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["caracteres",{"_index":405,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["caracteres'})@maxlength(16",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["career",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["career:string",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["carrera",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["carrera'})@isnotempty()@transform",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["catch",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":73,"title":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["classes",{"_index":382,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["client",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_branchmodule",{"_index":347,"title":{},"body":{"modules/BranchModule.html":{},"overview.html":{}}}],["cluster_branchmodule_providers",{"_index":348,"title":{},"body":{"modules/BranchModule.html":{},"overview.html":{}}}],["cluster_permissionmodule",{"_index":822,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_permissionmodule_providers",{"_index":823,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":872,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":873,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_routermodule",{"_index":942,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_routermodule_exports",{"_index":944,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_routermodule_providers",{"_index":943,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1087,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1088,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1089,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":833,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/UsersService.html":{}}}],["code:string",{"_index":841,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/UsersService.html":{}}}],["common/types/refresh.type",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["como",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["compara",{"_index":653,"title":{},"body":{"classes/HashHelper.html":{}}}],["compare",{"_index":642,"title":{},"body":{"classes/HashHelper.html":{}}}],["compare(str",{"_index":650,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken",{"_index":643,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken(str",{"_index":661,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken(str:string",{"_index":705,"title":{},"body":{"classes/HashHelper.html":{}}}],["con",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RolesService.html":{}}}],["configmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["connect",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["console.log(data",{"_index":990,"title":{},"body":{"injectables/RouterService.html":{}}}],["console.log(user",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["const",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["constraint1",{"_index":397,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["constructor",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}}}],["constructor(@injectmodel('permission",{"_index":840,"title":{},"body":{"injectables/PermissionService.html":{}}}],["constructor(@injectmodel('router",{"_index":970,"title":{},"body":{"injectables/RouterService.html":{}}}],["constructor(authservice",{"_index":1353,"title":{},"body":{"injectables/localStrategy.html":{}}}],["constructor(branchmodel",{"_index":357,"title":{},"body":{"injectables/BranchService.html":{}}}],["constructor(permissionmodel",{"_index":830,"title":{},"body":{"injectables/PermissionService.html":{}}}],["constructor(private",{"_index":337,"title":{},"body":{"controllers/BranchController.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{}}}],["constructor(rolemodel",{"_index":880,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(routermodel",{"_index":957,"title":{},"body":{"injectables/RouterService.html":{}}}],["constructor(routerservice",{"_index":911,"title":{},"body":{"guards/RouterGuard.html":{}}}],["constructor(usermodel",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["contener",{"_index":396,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["contenido",{"_index":1407,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["context",{"_index":301,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":305,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["context.switchtohttp().getrequest().user?.profile.rolesbranch",{"_index":916,"title":{},"body":{"guards/RouterGuard.html":{}}}],["contraseña",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["control",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('branch",{"_index":336,"title":{},"body":{"controllers/BranchController.html":{}}}],["controller('permission",{"_index":814,"title":{},"body":{"controllers/PermissionController.html":{}}}],["controller('roles",{"_index":864,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('router",{"_index":906,"title":{},"body":{"controllers/RouterController.html":{}}}],["controller('users",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/RouterController.html":{},"modules/RouterModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["correo",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["coverage",{"_index":1174,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creado",{"_index":846,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["create",{"_index":311,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":338,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{}}}],["create(@res",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(branch",{"_index":962,"title":{},"body":{"injectables/RouterService.html":{}}}],["create(branch:any",{"_index":971,"title":{},"body":{"injectables/RouterService.html":{}}}],["create(createbranchdto",{"_index":315,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{}}}],["create(createpermissiondto",{"_index":801,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["create(createroledto",{"_index":852,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createuserdto",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(res",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["createbranchdto",{"_index":316,"title":{"classes/CreateBranchDto.html":{}},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["createdat",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["createdat:date",{"_index":753,"title":{},"body":{"interfaces/IUser.html":{}}}],["createparamdecorator",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpermissiondto",{"_index":453,"title":{"classes/CreatePermissionDto.html":{}},"body":{"classes/CreatePermissionDto.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["createroledto",{"_index":488,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createroledto,branch:string",{"_index":890,"title":{},"body":{"injectables/RolesService.html":{}}}],["createrouterdto",{"_index":507,"title":{"classes/CreateRouterDto.html":{}},"body":{"classes/CreateRouterDto.html":{},"controllers/RouterController.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":510,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto,branch:code",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["crypto",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["cryptojs",{"_index":688,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptojs.aes.decrypt(token.tostring",{"_index":700,"title":{},"body":{"classes/HashHelper.html":{}}}],["cryptojs.aes.encrypt(str",{"_index":696,"title":{},"body":{"classes/HashHelper.html":{}}}],["ctx",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuando",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["cuenta",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["d",{"_index":1379,"title":{},"body":{"classes/regexHelper.html":{}}}],["d*(?:[a",{"_index":1388,"title":{},"body":{"classes/regexHelper.html":{}}}],["data",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["data.refresh_token",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["data.refresh_token,{httponly",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["data:string",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data[r._id.tostring",{"_index":987,"title":{},"body":{"injectables/RouterService.html":{}}}],["data[r.branch._id.tostring()].push",{"_index":992,"title":{},"body":{"injectables/RouterService.html":{}}}],["date",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IProfile.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["date.now",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":401,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"classes/sanitizeHelper.html":{}}}],["debe",{"_index":389,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["deben",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["decripta",{"_index":668,"title":{},"body":{"classes/HashHelper.html":{}}}],["decriptado",{"_index":669,"title":{},"body":{"classes/HashHelper.html":{}}}],["decrypttoken",{"_index":644,"title":{},"body":{"classes/HashHelper.html":{}}}],["decrypttoken(token",{"_index":666,"title":{},"body":{"classes/HashHelper.html":{}}}],["decrypttoken(token:string",{"_index":698,"title":{},"body":{"classes/HashHelper.html":{}}}],["default",{"_index":630,"title":{},"body":{"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/regexHelper.html":{},"miscellaneous/variables.html":{}}}],["default:date.now",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default:true",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["del",{"_index":563,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/CreatePermissionDto.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":806,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{}}}],["deletehashtoken",{"_index":1103,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletehashtoken(_id",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["dentro",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":118,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":984,"title":{},"body":{"injectables/RouterService.html":{}}}],["description",{"_index":664,"title":{},"body":{"classes/HashHelper.html":{},"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":1011,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["deserializeuser(user",{"_index":1013,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["development",{"_index":1314,"title":{},"body":{"index.html":{}}}],["device:string",{"_index":718,"title":{},"body":{"interfaces/IHash.html":{}}}],["disabled",{"_index":1279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disallowedtagsmode",{"_index":1421,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["discard",{"_index":1422,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["disponible",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["disponibles",{"_index":1270,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dkk",{"_index":1396,"title":{},"body":{"classes/regexHelper.html":{}}}],["document",{"_index":711,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{}}}],["documentation",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":1014,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["done(null",{"_index":1025,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["dto/create",{"_index":333,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/filter",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/update",{"_index":335,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{}}}],["d{1,3}(?:\\.\\d{1,3}){2",{"_index":1395,"title":{},"body":{"classes/regexHelper.html":{}}}],["e",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["e2e",{"_index":1325,"title":{},"body":{"index.html":{}}}],["each",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ecrud",{"_index":478,"title":{},"body":{"classes/CreatePermissionDto.html":{},"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1302,"title":{},"body":{"index.html":{}}}],["ejemplo",{"_index":1272,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["el",{"_index":411,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"injectables/PermissionService.html":{}}}],["element.method",{"_index":975,"title":{},"body":{"injectables/RouterService.html":{}}}],["element.path",{"_index":973,"title":{},"body":{"injectables/RouterService.html":{}}}],["email",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email:string",{"_index":736,"title":{},"body":{"interfaces/IProfile.html":{}}}],["emethod",{"_index":463,"title":{},"body":{"classes/CreatePermissionDto.html":{},"miscellaneous/enumerations.html":{}}}],["en",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enable",{"_index":456,"title":{},"body":{"classes/CreatePermissionDto.html":{},"interfaces/IPermisssion.html":{},"miscellaneous/variables.html":{}}}],["enable:boolean",{"_index":487,"title":{},"body":{"classes/CreatePermissionDto.html":{},"interfaces/IPermisssion.html":{}}}],["encripta",{"_index":672,"title":{},"body":{"classes/HashHelper.html":{}}}],["encriptado",{"_index":654,"title":{},"body":{"classes/HashHelper.html":{}}}],["encripted",{"_index":662,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypt",{"_index":645,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypt(str",{"_index":670,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypted",{"_index":651,"title":{},"body":{"classes/HashHelper.html":{}}}],["encuentra",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["encuentra.'})@isnotempty({message",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enum",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:emethod",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:eroles",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:estatusbranch",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":1254,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath:'.env",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["enviara",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["eroles",{"_index":498,"title":{},"body":{"classes/CreateRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["eroles.active",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":763,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/SessionSerializer.html":{}}}],["err:error",{"_index":1022,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,payloader",{"_index":1015,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,user",{"_index":1020,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["es",{"_index":495,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["espacios",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["espacios.'})@minlength(15",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["especiales",{"_index":445,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["especiales.'})@matches(regexhelper.onlynumbers",{"_index":406,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["esta",{"_index":1271,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["estado",{"_index":412,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{}}}],["estar",{"_index":393,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["estatusbranch",{"_index":433,"title":{},"body":{"classes/CreateBranchDto.html":{},"miscellaneous/enumerations.html":{}}}],["estatusbranch.active",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["euserblacklist",{"_index":1263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["executioncontext",{"_index":299,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{},"miscellaneous/variables.html":{}}}],["exito",{"_index":894,"title":{},"body":{"injectables/RolesService.html":{}}}],["exp",{"_index":739,"title":{},"body":{"interfaces/IRefreshHash.html":{}}}],["expiresin",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["exports",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["exports:[routerservice",{"_index":953,"title":{},"body":{"modules/RouterModule.html":{}}}],["exports:[usersservice",{"_index":1101,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":710,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"injectables/localStrategy.html":{}}}],["extractjwt",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors([(request:request",{"_index":999,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["extraer",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":929,"title":{},"body":{"guards/RouterGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["filter",{"_index":621,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["filter:string",{"_index":624,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["filteruser",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruser(@res",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruser(res",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruserdto",{"_index":619,"title":{"classes/FilterUserDto.html":{}},"body":{"classes/FilterUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["findall",{"_index":312,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@branch",{"_index":866,"title":{},"body":{"controllers/RolesController.html":{}}}],["findall(@res",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(id",{"_index":854,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["findall(id:string",{"_index":895,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["findall(res",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":313,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{}}}],["findone(@param('id",{"_index":342,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["findone(id",{"_index":321,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{}}}],["forbiddenexception",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('no",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["formato",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["framework",{"_index":1300,"title":{},"body":{"index.html":{}}}],["function",{"_index":1018,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1287,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genera",{"_index":681,"title":{},"body":{"classes/HashHelper.html":{}}}],["get(':id",{"_index":341,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["get('auth/v2/logout",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfreshtoken",{"_index":1104,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfreshtoken(_id",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfreshtoken(_id:string",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":1296,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettoken(_id",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1105,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1106,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(id",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":1107,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername(username",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter",{"_index":1108,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter(username",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter(username:string):promise",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserprofilebyusername",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserprofilebyusername(id",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":946,"title":{},"body":{"modules/RouterModule.html":{}}}],["globalservice",{"_index":625,"title":{"classes/GlobalService.html":{}},"body":{"classes/GlobalService.html":{},"injectables/RouterService.html":{},"coverage.html":{}}}],["grow",{"_index":1332,"title":{},"body":{"index.html":{}}}],["guard",{"_index":293,"title":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":295,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{},"overview.html":{}}}],["guestguard",{"_index":49,"title":{"guards/GuestGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/GuestGuard.html":{},"coverage.html":{}}}],["ha",{"_index":845,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["habilite",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlerequest",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(err",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["hash",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{}}}],["hash.interface",{"_index":748,"title":{},"body":{"interfaces/IUser.html":{}}}],["hash.save",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["hash:{type",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashhelper",{"_index":248,"title":{"classes/HashHelper.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/RouterService.html":{},"coverage.html":{}}}],["hashhelper.compare(password",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.comparehashrefreshtoken(usertoken.hashrefreshtoken",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.decrypttoken(branch",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashhelper.decrypttoken(token",{"_index":981,"title":{},"body":{"injectables/RouterService.html":{}}}],["hashhelper.encrypt(this.password",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashhelper.hashrefreshtoken(refreshtoken",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.tokengenerator(branch._id.tostring",{"_index":374,"title":{},"body":{"injectables/BranchService.html":{}}}],["hashmodel",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashrefreshtoken",{"_index":646,"title":{},"body":{"classes/HashHelper.html":{},"interfaces/IHash.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["hashrefreshtoken(str",{"_index":674,"title":{},"body":{"classes/HashHelper.html":{}}}],["hashschema",{"_index":1096,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hasrefeshtoken",{"_index":665,"title":{},"body":{"classes/HashHelper.html":{}}}],["header",{"_index":914,"title":{},"body":{"guards/RouterGuard.html":{}}}],["hello",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1342,"title":{},"body":{"index.html":{}}}],["html",{"_index":1251,"title":{},"body":{"dependencies.html":{},"classes/sanitizeHelper.html":{}}}],["httpcode",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(httpstatus.ok",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["https://nestjs.com",{"_index":1349,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["iat",{"_index":740,"title":{},"body":{"interfaces/IRefreshHash.html":{}}}],["ibranch",{"_index":369,"title":{"interfaces/IBranch.html":{}},"body":{"injectables/BranchService.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"coverage.html":{}}}],["id",{"_index":324,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id:string",{"_index":815,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{}}}],["identifier",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["if(!_id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!access",{"_index":940,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(!branch",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(!data",{"_index":1001,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["if(!header",{"_index":928,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(!id",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(!mongoose.types.objectid.isvalid(id",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(!payload",{"_index":1003,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["if(access?.status",{"_index":941,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(err",{"_index":766,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["if(header",{"_index":938,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(roles.length",{"_index":918,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(user",{"_index":769,"title":{},"body":{"injectables/JwtNoAuthGuard.html":{},"injectables/UsersService.html":{}}}],["iguales",{"_index":660,"title":{},"body":{"classes/HashHelper.html":{}}}],["ihash",{"_index":713,"title":{"interfaces/IHash.html":{}},"body":{"interfaces/IHash.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["implements",{"_index":304,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{}}}],["import",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["imports",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["ingresado",{"_index":655,"title":{},"body":{"classes/HashHelper.html":{}}}],["ingresar",{"_index":418,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateUserDto.html":{}}}],["ingrese",{"_index":470,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["injectable",{"_index":182,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{}}}],["injectables",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["injectmodel",{"_index":366,"title":{},"body":{"injectables/BranchService.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('branch",{"_index":371,"title":{},"body":{"injectables/BranchService.html":{}}}],["injectmodel('hash",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel('profile",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel('roles",{"_index":889,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectmodel('user",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1310,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1312,"title":{},"body":{"index.html":{}}}],["interes",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["interes.'})@transform",{"_index":573,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["interface",{"_index":707,"title":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{}},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"coverage.html":{}}}],["interface/branch.interface",{"_index":370,"title":{},"body":{"injectables/BranchService.html":{}}}],["interface/hash.interface",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["interface/permission.schema",{"_index":839,"title":{},"body":{"injectables/PermissionService.html":{}}}],["interface/profile.interface",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["interface/roles.interface",{"_index":888,"title":{},"body":{"injectables/RolesService.html":{}}}],["interface/router.interface",{"_index":969,"title":{},"body":{"injectables/RouterService.html":{}}}],["interface/user.interface",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["interfaces",{"_index":708,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"overview.html":{}}}],["invalidos",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["ipermisssion",{"_index":720,"title":{"interfaces/IPermisssion.html":{}},"body":{"interfaces/IPermisssion.html":{},"interfaces/IRoles.html":{},"injectables/PermissionService.html":{},"coverage.html":{}}}],["iprofile",{"_index":725,"title":{"interfaces/IProfile.html":{}},"body":{"interfaces/IProfile.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["irefreshhash",{"_index":65,"title":{"interfaces/IRefreshHash.html":{}},"body":{"controllers/AppController.html":{},"interfaces/IRefreshHash.html":{},"coverage.html":{}}}],["iroles",{"_index":730,"title":{"interfaces/IRoles.html":{}},"body":{"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["irouter",{"_index":744,"title":{"interfaces/IRouter.html":{}},"body":{"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"coverage.html":{}}}],["isarray",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isarray()@isstring({each",{"_index":570,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean",{"_index":476,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isboolean({message",{"_index":460,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isboolean({message:'el",{"_index":485,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isemail",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@transform",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isempty",{"_index":501,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum",{"_index":425,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/FilterUserDto.html":{}}}],["isenum(emethod",{"_index":464,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isenum(emethod,{message:'debe",{"_index":483,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["isenum(eroles",{"_index":504,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum(eroles)@isnotempty()@transform",{"_index":499,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum(estatusbranch",{"_index":452,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isenum(estatusbranch)@isnotempty({message",{"_index":410,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isglobal",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["isglobal:true",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":426,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{}}}],["ismongoid({message",{"_index":493,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["ismongoid({message:'debe",{"_index":449,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["ismongoid({message:'el",{"_index":506,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isnotempty",{"_index":427,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isnotempty({message",{"_index":415,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isnotempty({message:'debe",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring({message",{"_index":562,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring({message:'debe",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":477,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring",{"_index":428,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isstring()@isnotempty()@transform",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({message",{"_index":387,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isstring({message:'debe",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["iuser",{"_index":14,"title":{"interfaces/IUser.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iuserhash",{"_index":34,"title":{"interfaces/IUserHash.html":{}},"body":{"controllers/AppController.html":{},"interfaces/IUserHash.html":{},"coverage.html":{}}}],["join",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":690,"title":{},"body":{"classes/HashHelper.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":636,"title":{},"body":{"classes/GlobalService.html":{}}}],["json.stringify([access.router",{"_index":936,"title":{},"body":{"guards/RouterGuard.html":{}}}],["json.stringify(permission",{"_index":935,"title":{},"body":{"guards/RouterGuard.html":{}}}],["jwt",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":50,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtlocalauthguard",{"_index":57,"title":{"injectables/JwtLocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtLocalAuthGuard.html":{},"coverage.html":{}}}],["jwtlocalauthguard)@post('auth/v2/login",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtmodule",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnoauthguard",{"_index":71,"title":{"injectables/JwtNoAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtNoAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtrefreshguard",{"_index":67,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsession",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["jwtsession()@delete(':id",{"_index":857,"title":{},"body":{"controllers/RolesController.html":{}}}],["jwtsession()@get",{"_index":319,"title":{},"body":{"controllers/BranchController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["jwtsession()@get(':id",{"_index":322,"title":{},"body":{"controllers/BranchController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["jwtsession()@get('profile",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["jwtsession()@patch(':id",{"_index":327,"title":{},"body":{"controllers/BranchController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["jwtsession()@post",{"_index":317,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{}}}],["jwtsession(...roles",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jwtstrategy",{"_index":194,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1346,"title":{},"body":{"index.html":{}}}],["la",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["las",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["lastlogin",{"_index":727,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["lastlogin:date",{"_index":737,"title":{},"body":{"interfaces/IProfile.html":{}}}],["lastname",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["lastname:string",{"_index":732,"title":{},"body":{"interfaces/IProfile.html":{}}}],["letras",{"_index":440,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@apiproperty",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@maxlength(16",{"_index":399,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@maxlength(48",{"_index":468,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["letras.'})@transform",{"_index":402,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["license",{"_index":1352,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1329,"title":{},"body":{"index.html":{}}}],["limit",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["limit:100",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["limpiar",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["list",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lista",{"_index":1268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lo",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["loadroutes",{"_index":955,"title":{},"body":{"injectables/RouterService.html":{}}}],["local",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtLocalAuthGuard.html":{},"coverage.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["localauthguard",{"_index":51,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":197,"title":{"injectables/localStrategy.html":{}},"body":{"modules/AuthModule.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["login",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginjwt",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["loginjwt(@user",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["loginjwt(user",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["logout",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(user",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutjwt",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["logoutjwt(@user",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["logoutjwt(user",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["mail",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["maintenance",{"_index":1281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["map((permission",{"_index":923,"title":{},"body":{"guards/RouterGuard.html":{}}}],["mas",{"_index":398,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["match",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":429,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.onlynumbers",{"_index":446,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.onlynumbersplusspace",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.onlytext",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.onlytextfirst3",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.phonenumbervalidator",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.specialcharacters",{"_index":403,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matching",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["max:8",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximo",{"_index":400,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength",{"_index":430,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength(12",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(15",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(16",{"_index":441,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength(16,{message:'la",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(48",{"_index":484,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["menos",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":395,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/UsersController.html":{}}}],["message:'desconectado",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["message:'el",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["message:'la",{"_index":444,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["message:'no",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["metadata",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":457,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/GlobalService.html":{},"interfaces/IPermisssion.html":{},"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"miscellaneous/variables.html":{}}}],["method:string",{"_index":723,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["metodo",{"_index":465,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["min:1",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimo",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":431,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["minlength(12",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(15",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":439,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["minlength(5",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5,{message:'la",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1253,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1328,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1318,"title":{},"body":{"index.html":{}}}],["model",{"_index":358,"title":{},"body":{"injectables/BranchService.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["model:'permission",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["module",{"_index":115,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":117,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":1231,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoid",{"_index":683,"title":{},"body":{"classes/HashHelper.html":{}}}],["mongoose",{"_index":367,"title":{},"body":{"injectables/BranchService.html":{},"classes/CreateRoleDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.types.objectid",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":353,"title":{},"body":{"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.database_host,{usenewurlparser",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1341,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1347,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["name:'branch",{"_index":354,"title":{},"body":{"modules/BranchModule.html":{},"modules/RouterModule.html":{}}}],["name:'hash",{"_index":1100,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:'permission",{"_index":828,"title":{},"body":{"modules/PermissionModule.html":{}}}],["name:'profile",{"_index":1099,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:'roles",{"_index":878,"title":{},"body":{"modules/RolesModule.html":{}}}],["name:'router",{"_index":951,"title":{},"body":{"modules/RouterModule.html":{}}}],["name:'user",{"_index":1098,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:string",{"_index":448,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{}}}],["name:{type:string",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestframework",{"_index":1351,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["nestjs/config",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["nestjs/platform",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":422,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.js",{"_index":1299,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":467,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{}}}],["normal",{"_index":1285,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1311,"title":{},"body":{"index.html":{}}}],["nuevo",{"_index":678,"title":{},"body":{"classes/HashHelper.html":{}}}],["null",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["numero",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["numeros",{"_index":447,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["numeros.'})@apiproperty",{"_index":408,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["numeros.'})@matches(regexhelper.onlytextfirst3",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["o",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["observable",{"_index":302,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{}}}],["onlynumbers",{"_index":1372,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlynumbersplusspace",{"_index":1373,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlytext",{"_index":1374,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlytextfirst3",{"_index":1375,"title":{},"body":{"classes/regexHelper.html":{}}}],["onmoduleinit",{"_index":956,"title":{},"body":{"injectables/RouterService.html":{}}}],["open",{"_index":1330,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["out",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1364,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1276,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":1216,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":682,"title":{},"body":{"classes/HashHelper.html":{}}}],["param",{"_index":330,"title":{},"body":{"controllers/BranchController.html":{},"classes/HashHelper.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"classes/sanitizeHelper.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["parser",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1028,"title":{},"body":{"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createbranchdto",{"_index":1029,"title":{},"body":{"classes/UpdateBranchDto.html":{}}}],["partialtype(createpermissiondto",{"_index":1031,"title":{},"body":{"classes/UpdatePermissionDto.html":{}}}],["partialtype(createroledto",{"_index":1033,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createrouterdto",{"_index":1036,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["partialtype(createuserdto",{"_index":1041,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["passportmodule",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportserializer",{"_index":1010,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["passportstrategy",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1356,"title":{},"body":{"injectables/localStrategy.html":{}}}],["passportstrategy(strategy,'jwt",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1359,"title":{},"body":{"injectables/localStrategy.html":{}}}],["passreqtocallback:true",{"_index":1002,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["passthrough",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["password",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["password:string",{"_index":752,"title":{},"body":{"interfaces/IUser.html":{}}}],["passwordfield",{"_index":1358,"title":{},"body":{"injectables/localStrategy.html":{}}}],["patch",{"_index":329,"title":{},"body":{"controllers/BranchController.html":{},"classes/CreatePermissionDto.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch(':id",{"_index":344,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["path",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalService.html":{},"injectables/RouterService.html":{}}}],["path:string",{"_index":980,"title":{},"body":{"injectables/RouterService.html":{}}}],["payload",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payloader:string",{"_index":1026,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["permiso",{"_index":494,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/PermissionService.html":{}}}],["permisos",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":491,"title":{},"body":{"classes/CreateRoleDto.html":{},"interfaces/IRoles.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"guards/RouterGuard.html":{}}}],["permission.controller",{"_index":825,"title":{},"body":{"modules/PermissionModule.html":{}}}],["permission.dto",{"_index":812,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{}}}],["permission.dto.ts",{"_index":455,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["permission.dto.ts:12",{"_index":475,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["permission.dto.ts:15",{"_index":466,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["permission.dto.ts:22",{"_index":469,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["permission.dto.ts:27",{"_index":462,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["permission.length",{"_index":922,"title":{},"body":{"guards/RouterGuard.html":{}}}],["permission.map((permission",{"_index":924,"title":{},"body":{"guards/RouterGuard.html":{}}}],["permission.method.tolowercase",{"_index":926,"title":{},"body":{"guards/RouterGuard.html":{}}}],["permission.router.tolowercase",{"_index":925,"title":{},"body":{"guards/RouterGuard.html":{}}}],["permission.save",{"_index":844,"title":{},"body":{"injectables/PermissionService.html":{}}}],["permission.service",{"_index":811,"title":{},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{}}}],["permission/permission.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["permission:[{type:mongoose.types.objectid",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissioncontroller",{"_index":798,"title":{"controllers/PermissionController.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"coverage.html":{}}}],["permissionenable",{"_index":933,"title":{},"body":{"guards/RouterGuard.html":{}}}],["permissionmodel",{"_index":832,"title":{},"body":{"injectables/PermissionService.html":{}}}],["permissionmodule",{"_index":124,"title":{"modules/PermissionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"modules.html":{},"overview.html":{}}}],["permissionschema",{"_index":826,"title":{},"body":{"modules/PermissionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionservice",{"_index":810,"title":{"injectables/PermissionService.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"coverage.html":{},"overview.html":{}}}],["permiten",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["phone",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["phone:string",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["phonenumbervalidator",{"_index":1376,"title":{},"body":{"classes/regexHelper.html":{}}}],["picture",{"_index":728,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["picture:string",{"_index":735,"title":{},"body":{"interfaces/IProfile.html":{}}}],["plano",{"_index":673,"title":{},"body":{"classes/HashHelper.html":{}}}],["please",{"_index":1339,"title":{},"body":{"index.html":{}}}],["populate('profile",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["populate({path:'profile",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["populate:{path:'rolesbranch',model:'roles',populate:{path:'permission",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["por",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["post",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/CreatePermissionDto.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('auth/v2/login",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/v2/refresh",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["post('create",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('filter/user",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["pre(\"save",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":309,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["primeras",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["private",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["process.env.central_token",{"_index":939,"title":{},"body":{"guards/RouterGuard.html":{}}}],["process.env.jwt_access_token_expiration_time",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_refresh_expiration_time",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_refresh_token_secret",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["process.env.jwt_secret",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.token_branch",{"_index":701,"title":{},"body":{"classes/HashHelper.html":{}}}],["process.env.token_branch).tostring",{"_index":697,"title":{},"body":{"classes/HashHelper.html":{}}}],["production",{"_index":1320,"title":{},"body":{"index.html":{}}}],["profile",{"_index":747,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile(@res",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(res",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile._id.tostring",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["profile.interface",{"_index":749,"title":{},"body":{"interfaces/IUser.html":{}}}],["profile.save",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["profile:iprofile",{"_index":751,"title":{},"body":{"interfaces/IUser.html":{}}}],["profile:{type",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profileid",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["profilemodel",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["profileschema",{"_index":1094,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1298,"title":{},"body":{"index.html":{}}}],["project",{"_index":1331,"title":{},"body":{"index.html":{}}}],["promise",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/HashHelper.html":{},"injectables/UsersService.html":{},"classes/sanitizeHelper.html":{}}}],["promise.all",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":385,"title":{"properties.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"classes/UpdateRouterDto.html":{},"properties.html":{},"classes/regexHelper.html":{}}}],["provide",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":691,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["puede",{"_index":404,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["que",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["quitarlo",{"_index":930,"title":{},"body":{"guards/RouterGuard.html":{}}}],["r",{"_index":986,"title":{},"body":{"injectables/RouterService.html":{}}}],["read",{"_index":1340,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{}}}],["ref:'branch",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'hash",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'permission",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'profile",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'rol",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ref:'roles",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'sede",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ref:'user",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":764,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{}}}],["refresca",{"_index":676,"title":{},"body":{"classes/HashHelper.html":{}}}],["refresh",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{}}}],["refresh.guard",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["refresh.guard.ts",{"_index":770,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.guard.ts:6",{"_index":771,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh_token",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRefreshHash.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(_id",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtokens(@user",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtokens(user",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["regexhelper",{"_index":435,"title":{"classes/regexHelper.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"coverage.html":{},"classes/regexHelper.html":{}}}],["remove",{"_index":800,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["remove(@param('id",{"_index":820,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{}}}],["remove(id",{"_index":805,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["removes",{"_index":849,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["repository",{"_index":1309,"title":{},"body":{"index.html":{}}}],["req",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{}}}],["req.get('authorization').replace('bearer','').trim",{"_index":1006,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req?.signedcookies.authorization",{"_index":1005,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["request",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.headers.code",{"_index":915,"title":{},"body":{"guards/RouterGuard.html":{},"miscellaneous/variables.html":{}}}],["request.isauthenticated",{"_index":306,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{}}}],["request.route.path",{"_index":932,"title":{},"body":{"guards/RouterGuard.html":{}}}],["request.user",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request?.signedcookies.authorization",{"_index":1000,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["require",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"crypto",{"_index":689,"title":{},"body":{"classes/HashHelper.html":{},"miscellaneous/variables.html":{}}}],["require('connect",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required:true",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["res({passthrough:true",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["res.clearcookie('authorization",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["res.cookie('authorization",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(available",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(user.profile",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(users",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["result",{"_index":795,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/RouterService.html":{}}}],["results",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":657,"title":{},"body":{"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["return",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["revisar",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rimraf",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["rol",{"_index":893,"title":{},"body":{"injectables/RolesService.html":{}}}],["role",{"_index":898,"title":{},"body":{"injectables/RolesService.html":{}}}],["role.dto",{"_index":863,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":490,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:14",{"_index":492,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:19",{"_index":500,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:24",{"_index":497,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["rolemodel",{"_index":882,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles.controller",{"_index":875,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((roles",{"_index":920,"title":{},"body":{"guards/RouterGuard.html":{}}}],["roles.permission).filter((permission",{"_index":921,"title":{},"body":{"guards/RouterGuard.html":{}}}],["roles.save",{"_index":892,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles.service",{"_index":862,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/roles.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["roles:[string",{"_index":733,"title":{},"body":{"interfaces/IProfile.html":{}}}],["rolesbranch",{"_index":729,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["rolesbranch:iroles",{"_index":734,"title":{},"body":{"interfaces/IProfile.html":{}}}],["rolesbuilder",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":850,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":125,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesschema",{"_index":876,"title":{},"body":{"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolessede",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["rolesservice",{"_index":861,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["rootpath",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":458,"title":{},"body":{"classes/CreatePermissionDto.html":{},"interfaces/IPermisssion.html":{},"interfaces/IRouter.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"miscellaneous/variables.html":{}}}],["router.controller",{"_index":947,"title":{},"body":{"modules/RouterModule.html":{}}}],["router.dto",{"_index":905,"title":{},"body":{"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{}}}],["router.dto.ts",{"_index":509,"title":{},"body":{"classes/CreateRouterDto.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["router.dto.ts:5",{"_index":1035,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["router.push({method:element.method,router:element.path,branch:branch,status:true",{"_index":976,"title":{},"body":{"injectables/RouterService.html":{}}}],["router.service",{"_index":904,"title":{},"body":{"controllers/RouterController.html":{},"modules/RouterModule.html":{}}}],["router/router.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["router:string",{"_index":482,"title":{},"body":{"classes/CreatePermissionDto.html":{},"interfaces/IPermisssion.html":{}}}],["routercontroller",{"_index":899,"title":{"controllers/RouterController.html":{}},"body":{"controllers/RouterController.html":{},"modules/RouterModule.html":{},"coverage.html":{}}}],["routerguard",{"_index":909,"title":{"guards/RouterGuard.html":{}},"body":{"guards/RouterGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["routerguard)@post('create",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["routermodel",{"_index":959,"title":{},"body":{"injectables/RouterService.html":{}}}],["routermodule",{"_index":126,"title":{"modules/RouterModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RouterModule.html":{},"modules.html":{},"overview.html":{}}}],["routerschema",{"_index":948,"title":{},"body":{"modules/RouterModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routerservice",{"_index":359,"title":{"injectables/RouterService.html":{}},"body":{"injectables/BranchService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"coverage.html":{},"overview.html":{}}}],["routerservice:routerservice",{"_index":372,"title":{},"body":{"injectables/BranchService.html":{},"guards/RouterGuard.html":{}}}],["routes",{"_index":627,"title":{},"body":{"classes/GlobalService.html":{},"injectables/RouterService.html":{}}}],["routes.map(async",{"_index":991,"title":{},"body":{"injectables/RouterService.html":{}}}],["routesblocked",{"_index":628,"title":{},"body":{"classes/GlobalService.html":{}}}],["routesenables",{"_index":917,"title":{},"body":{"guards/RouterGuard.html":{}}}],["routesenables.concat(...permission",{"_index":927,"title":{},"body":{"guards/RouterGuard.html":{}}}],["routesenables.some((permission",{"_index":934,"title":{},"body":{"guards/RouterGuard.html":{}}}],["rtstrategy",{"_index":195,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1315,"title":{},"body":{"index.html":{}}}],["rut",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["rut:string",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["rut:{type:string",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ruta",{"_index":473,"title":{},"body":{"classes/CreatePermissionDto.html":{},"miscellaneous/enumerations.html":{}}}],["ruta.'})@isnotempty({message",{"_index":472,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["rutas",{"_index":1269,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rutvalidar",{"_index":1377,"title":{},"body":{"classes/regexHelper.html":{}}}],["rxjs",{"_index":303,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"dependencies.html":{}}}],["s]+(\\d{1,3",{"_index":1392,"title":{},"body":{"classes/regexHelper.html":{}}}],["s]+(\\d{4,10",{"_index":1393,"title":{},"body":{"classes/regexHelper.html":{}}}],["salt",{"_index":641,"title":{},"body":{"classes/HashHelper.html":{}}}],["samesite:true",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["sanitize",{"_index":1250,"title":{},"body":{"dependencies.html":{},"classes/sanitizeHelper.html":{}}}],["sanitizehelper",{"_index":436,"title":{"classes/sanitizeHelper.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"coverage.html":{},"classes/sanitizeHelper.html":{}}}],["sanitizehelper.satinizeonlyscripts(value",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sanitizehelper.satonizeall(value",{"_index":443,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["sanitizehelper.satonizeallarray(value",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sanitizehtml",{"_index":1416,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["sanitizehtml(str",{"_index":1418,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizado",{"_index":1411,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizador",{"_index":1404,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts",{"_index":1399,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts(str",{"_index":1402,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts(str:string):string",{"_index":1423,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeall",{"_index":1400,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeall(str",{"_index":1408,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeallarray",{"_index":1401,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeallarray(str",{"_index":1412,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["scalable",{"_index":1303,"title":{},"body":{"index.html":{}}}],["schema",{"_index":355,"title":{},"body":{"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema:routerschema",{"_index":952,"title":{},"body":{"modules/RouterModule.html":{}}}],["schemas/branch.schema",{"_index":352,"title":{},"body":{"modules/BranchModule.html":{}}}],["schemas/hash.schema",{"_index":1097,"title":{},"body":{"modules/UsersModule.html":{}}}],["schemas/permission.schema",{"_index":827,"title":{},"body":{"modules/PermissionModule.html":{}}}],["schemas/profile.schema",{"_index":1095,"title":{},"body":{"modules/UsersModule.html":{}}}],["schemas/roles.schema",{"_index":877,"title":{},"body":{"modules/RolesModule.html":{}}}],["schemas/router.schema",{"_index":949,"title":{},"body":{"modules/RouterModule.html":{}}}],["schemas/user.schema",{"_index":1093,"title":{},"body":{"modules/UsersModule.html":{}}}],["scripts",{"_index":1405,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["se",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure:true",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["sede",{"_index":388,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{}}}],["selecionar",{"_index":416,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["select",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select('+password",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["semesterprogress",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["semesterprogress:number",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["semesterprogress:{type:number",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestre",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ser",{"_index":390,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["serializer/session.serializer",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["serializeuser",{"_index":1012,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser(user",{"_index":1019,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["server",{"_index":1304,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["session(...roles",{"_index":1295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sessionserializer",{"_index":196,"title":{"injectables/SessionSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["setmetadata('ispublic',true",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":658,"title":{},"body":{"classes/HashHelper.html":{}}}],["side",{"_index":1305,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["siguiente",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["simbolo",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sin",{"_index":1406,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["sistema",{"_index":1273,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["solo",{"_index":407,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/sanitizeHelper.html":{}}}],["son",{"_index":659,"title":{},"body":{"classes/HashHelper.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["specialcharacters",{"_index":1378,"title":{},"body":{"classes/regexHelper.html":{}}}],["sponsors",{"_index":1334,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":1256,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../branch",{"_index":1262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../branch.decorator.ts",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../branch.schema.ts",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crud.enum.ts",{"_index":1258,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../hash.helper.ts",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.schema.ts",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwtsession.decorator.ts",{"_index":1290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1289,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../method.enum.ts",{"_index":1259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../permission.schema.ts",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.schema.ts",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.schema.ts",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.schema.ts",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":1291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":1267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username",{"_index":1264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:23",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:38",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:53",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.roles.ts",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guards/authenticated.guard.ts",{"_index":296,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authenticated.guard.ts:6",{"_index":300,"title":{},"body":{"guards/AuthenticatedGuard.html":{}}}],["src/auth/guards/guest.guard.ts",{"_index":638,"title":{},"body":{"guards/GuestGuard.html":{},"coverage.html":{}}}],["src/auth/guards/guest.guard.ts:5",{"_index":639,"title":{},"body":{"guards/GuestGuard.html":{}}}],["src/auth/guards/jwt",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":793,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/router.guard",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/guards/router.guard.ts",{"_index":910,"title":{},"body":{"guards/RouterGuard.html":{},"coverage.html":{}}}],["src/auth/guards/router.guard.ts:6",{"_index":912,"title":{},"body":{"guards/RouterGuard.html":{}}}],["src/auth/guards/router.guard.ts:9",{"_index":913,"title":{},"body":{"guards/RouterGuard.html":{}}}],["src/auth/serializer/session.serializer.ts",{"_index":1009,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["src/auth/serializer/session.serializer.ts:10",{"_index":1017,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/serializer/session.serializer.ts:7",{"_index":1021,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1185,"title":{},"body":{"coverage.html":{},"injectables/localStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:16",{"_index":1355,"title":{},"body":{"injectables/localStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":1354,"title":{},"body":{"injectables/localStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts",{"_index":994,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/rt.strategy.ts:23",{"_index":997,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts:8",{"_index":995,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/branch/branch.controller.ts",{"_index":308,"title":{},"body":{"controllers/BranchController.html":{},"coverage.html":{}}}],["src/branch/branch.controller.ts:13",{"_index":318,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:19",{"_index":320,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:25",{"_index":323,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:31",{"_index":328,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.module.ts",{"_index":349,"title":{},"body":{"modules/BranchModule.html":{}}}],["src/branch/branch.service.ts",{"_index":356,"title":{},"body":{"injectables/BranchService.html":{},"coverage.html":{}}}],["src/branch/branch.service.ts:11",{"_index":360,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:16",{"_index":362,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:26",{"_index":363,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:31",{"_index":364,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:36",{"_index":365,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/dto/create",{"_index":383,"title":{},"body":{"classes/CreateBranchDto.html":{},"coverage.html":{}}}],["src/branch/dto/update",{"_index":1027,"title":{},"body":{"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["src/branch/interface/branch.interface",{"_index":722,"title":{},"body":{"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{}}}],["src/branch/interface/branch.interface.ts",{"_index":709,"title":{},"body":{"interfaces/IBranch.html":{},"coverage.html":{}}}],["src/branch/schemas/branch.schema",{"_index":950,"title":{},"body":{"modules/RouterModule.html":{}}}],["src/branch/schemas/branch.schema.ts",{"_index":1188,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/auth.decorator.ts",{"_index":1189,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/branch.decorator",{"_index":813,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/branch.decorator.ts",{"_index":1191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/jwtsession.decorator.ts",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":1193,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/session.decorator.ts",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/enum",{"_index":434,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["src/common/enum/branch",{"_index":1280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/crud.enum",{"_index":479,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["src/common/enum/crud.enum.ts",{"_index":1275,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/method.enum",{"_index":480,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["src/common/enum/method.enum.ts",{"_index":1277,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/roles",{"_index":502,"title":{},"body":{"classes/CreateRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/enum/user",{"_index":1283,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/username",{"_index":1282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/helper",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"injectables/RouterService.html":{}}}],["src/common/helper/hash.helper.ts",{"_index":640,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helper/hash.helper.ts:13",{"_index":671,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:23",{"_index":652,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:32",{"_index":680,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:41",{"_index":667,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:52",{"_index":675,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:6",{"_index":649,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:62",{"_index":663,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/regex.helper.ts",{"_index":1198,"title":{},"body":{"coverage.html":{},"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:3",{"_index":1380,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:4",{"_index":1398,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:5",{"_index":1390,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:6",{"_index":1387,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:7",{"_index":1394,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:8",{"_index":1381,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:9",{"_index":1397,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/satinize.helper.ts",{"_index":1199,"title":{},"body":{"coverage.html":{},"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:10",{"_index":1409,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:20",{"_index":1403,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:29",{"_index":1413,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/services/global.service",{"_index":968,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/common/services/global.service.ts",{"_index":626,"title":{},"body":{"classes/GlobalService.html":{},"coverage.html":{}}}],["src/common/services/global.service.ts:2",{"_index":629,"title":{},"body":{"classes/GlobalService.html":{}}}],["src/common/services/global.service.ts:3",{"_index":637,"title":{},"body":{"classes/GlobalService.html":{}}}],["src/common/types/refresh.type.ts",{"_index":755,"title":{},"body":{"interfaces/IUserHash.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/permission/dto/create",{"_index":454,"title":{},"body":{"classes/CreatePermissionDto.html":{},"coverage.html":{}}}],["src/permission/dto/update",{"_index":1030,"title":{},"body":{"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["src/permission/interface/permission.schema",{"_index":742,"title":{},"body":{"interfaces/IRoles.html":{}}}],["src/permission/interface/permission.schema.ts",{"_index":721,"title":{},"body":{"interfaces/IPermisssion.html":{},"coverage.html":{}}}],["src/permission/permission.controller.ts",{"_index":799,"title":{},"body":{"controllers/PermissionController.html":{},"coverage.html":{}}}],["src/permission/permission.controller.ts:14",{"_index":802,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:19",{"_index":803,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:24",{"_index":804,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:29",{"_index":809,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:34",{"_index":807,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.module.ts",{"_index":824,"title":{},"body":{"modules/PermissionModule.html":{}}}],["src/permission/permission.service.ts",{"_index":829,"title":{},"body":{"injectables/PermissionService.html":{},"coverage.html":{}}}],["src/permission/permission.service.ts:12",{"_index":834,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:18",{"_index":835,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:22",{"_index":836,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:26",{"_index":838,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:30",{"_index":837,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:9",{"_index":831,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/schemas/permission.schema.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/dto/create",{"_index":489,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/update",{"_index":1032,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/roles/interface/roles.interface",{"_index":731,"title":{},"body":{"interfaces/IProfile.html":{},"interfaces/IUser.html":{}}}],["src/roles/interface/roles.interface.ts",{"_index":741,"title":{},"body":{"interfaces/IRoles.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts",{"_index":851,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:13",{"_index":853,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:19",{"_index":855,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:25",{"_index":856,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:31",{"_index":860,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:37",{"_index":858,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":874,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":879,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:14",{"_index":883,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:20",{"_index":884,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:25",{"_index":885,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:30",{"_index":887,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:34",{"_index":886,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:9",{"_index":881,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/schemas/roles.schema.ts",{"_index":1206,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/router/dto/create",{"_index":508,"title":{},"body":{"classes/CreateRouterDto.html":{},"coverage.html":{}}}],["src/router/dto/update",{"_index":1034,"title":{},"body":{"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["src/router/interface/router.interface.ts",{"_index":745,"title":{},"body":{"interfaces/IRouter.html":{},"coverage.html":{}}}],["src/router/router.controller.ts",{"_index":900,"title":{},"body":{"controllers/RouterController.html":{},"coverage.html":{}}}],["src/router/router.controller.ts:13",{"_index":901,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.controller.ts:19",{"_index":903,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.module.ts",{"_index":945,"title":{},"body":{"modules/RouterModule.html":{}}}],["src/router/router.service",{"_index":368,"title":{},"body":{"injectables/BranchService.html":{},"guards/RouterGuard.html":{}}}],["src/router/router.service.ts",{"_index":954,"title":{},"body":{"injectables/RouterService.html":{},"coverage.html":{}}}],["src/router/router.service.ts:10",{"_index":958,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:14",{"_index":963,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:26",{"_index":964,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:31",{"_index":961,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:37",{"_index":967,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:46",{"_index":965,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:68",{"_index":966,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/schemas/router.schema.ts",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/filter",{"_index":620,"title":{},"body":{"classes/FilterUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1039,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/interface/hash.interface.ts",{"_index":714,"title":{},"body":{"interfaces/IHash.html":{},"coverage.html":{}}}],["src/users/interface/profile.interface.ts",{"_index":726,"title":{},"body":{"interfaces/IProfile.html":{},"coverage.html":{}}}],["src/users/interface/refresh.interface.ts",{"_index":738,"title":{},"body":{"interfaces/IRefreshHash.html":{},"coverage.html":{}}}],["src/users/interface/user.interface",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IBranch.html":{}}}],["src/users/interface/user.interface.ts",{"_index":746,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/schemas/hash.schema.ts",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/profile.schema.ts",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":1090,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1102,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:83",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:88",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1316,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1319,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1321,"title":{},"body":{"index.html":{}}}],["started",{"_index":1297,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1308,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"dependencies.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["status",{"_index":386,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{},"miscellaneous/variables.html":{}}}],["status.enum",{"_index":503,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["status.enum.ts",{"_index":1261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status:boolean",{"_index":1037,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["status:eroles",{"_index":505,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["status:string",{"_index":743,"title":{},"body":{"interfaces/IRoles.html":{}}}],["statususer",{"_index":1266,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["statususer.waiting",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stay",{"_index":1343,"title":{},"body":{"index.html":{}}}],["str",{"_index":656,"title":{},"body":{"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["str.foreach((i",{"_index":1425,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["strategies/jwt.strategy",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/rt.strategy",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["string",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["string):promise",{"_index":703,"title":{},"body":{"classes/HashHelper.html":{}}}],["string):string",{"_index":1417,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["string[]):string",{"_index":1424,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["su",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{},"classes/sanitizeHelper.html":{}}}],["sub",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IUserHash.html":{},"injectables/JwtStrategy.html":{}}}],["sub:payload.sub",{"_index":1008,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["sub:string",{"_index":757,"title":{},"body":{"interfaces/IUserHash.html":{}}}],["super",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["super.canactivate(context",{"_index":796,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["super.login(request",{"_index":797,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["support",{"_index":1335,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1362,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["telefono",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["tema",{"_index":572,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["tener",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test",{"_index":1324,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1327,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1326,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1323,"title":{},"body":{"index.html":{}}}],["texto",{"_index":437,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["texto.'})@apiproperty",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["texto.'})@isnotempty({message",{"_index":392,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["textos",{"_index":1415,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["thanks",{"_index":1333,"title":{},"body":{"index.html":{}}}],["themesinterest",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["themesinterest:[string",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["then(u",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login(user",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(user",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(user.sub,user.token",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateusername(username",{"_index":1360,"title":{},"body":{"injectables/localStrategy.html":{}}}],["this.branchmodel({...createbranchdto",{"_index":373,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchmodel.find",{"_index":379,"title":{},"body":{"injectables/BranchService.html":{},"injectables/RouterService.html":{}}}],["this.branchmodel.findbyid(id",{"_index":380,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchmodel.findoneandupdate({_id:id},{updatebranchdto},{new:true",{"_index":381,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchservice.create(createbranchdto",{"_index":339,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.findall",{"_index":340,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.findone(id",{"_index":343,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.update(id",{"_index":346,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.cachemanager.set(r._id.tostring",{"_index":988,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.gettoken(_id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashmodel",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findone({user:_id",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findoneanddelete",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findoneandupdate",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.ismodified('password",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadroutes",{"_index":993,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.password",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.permissionmodel",{"_index":842,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionservice.create(createpermissiondto,id",{"_index":816,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findall",{"_index":817,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findone(+id",{"_index":818,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.remove(+id",{"_index":821,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.update(+id",{"_index":819,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.profilemodel",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profilemodel.find({branch:id",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profilemodel.findone",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profilemodel.findone({id",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.rolemodel({...createroledto,branch",{"_index":891,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolemodel.find({branch:id}).populate('permission",{"_index":896,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolemodel.findone({id,branch",{"_index":897,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create(createroledto,id",{"_index":865,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findall(id",{"_index":867,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(id",{"_index":869,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.remove(+id",{"_index":871,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.update(+id",{"_index":870,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.routermodel.find({branch",{"_index":989,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.find({branch:id",{"_index":979,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.findbyidandupdate(id,{status},{new:true",{"_index":983,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.findone({router:path,method:method,branch:branch",{"_index":982,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.insertmany(router",{"_index":978,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routerservice.access(request.method.tolowercase",{"_index":931,"title":{},"body":{"guards/RouterGuard.html":{}}}],["this.routerservice.create(branch._id",{"_index":376,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.routerservice.findone(id",{"_index":907,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.routerservice.update(id",{"_index":908,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.salt",{"_index":693,"title":{},"body":{"classes/HashHelper.html":{}}}],["this.updaterefreshtoken(_id",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({username",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.deletehashtoken(user._id",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getfreshtoken(_id",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getfreshtoken(user._id",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(_id",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserbyusername(username",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateorcreatehashtoken(_id",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(branch",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(createuserdto.email",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(createuserdto.username",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyusernamefilter(filteruserdto.filter",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"guards/RouterGuard.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IUserHash.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["token:data",{"_index":1007,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["token:string",{"_index":756,"title":{},"body":{"interfaces/IUserHash.html":{},"injectables/RouterService.html":{}}}],["token:{type:string",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokengenerator",{"_index":647,"title":{},"body":{"classes/HashHelper.html":{}}}],["tokengenerator(str",{"_index":679,"title":{},"body":{"classes/HashHelper.html":{}}}],["tokengenerator(str:string",{"_index":695,"title":{},"body":{"classes/HashHelper.html":{}}}],["tokens",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/HashHelper.html":{}}}],["tokens.refresh_token",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":1410,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["touch",{"_index":1344,"title":{},"body":{"index.html":{}}}],["transform",{"_index":423,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["transformer",{"_index":424,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"dependencies.html":{}}}],["true",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"guards/RouterGuard.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["true,signed:true",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["true})@arraynotempty({message",{"_index":571,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["try",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["ttl",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["ttl:0",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1350,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["type:[string",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type:boolean",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type:mongoose.types.objectid",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":1307,"title":{},"body":{"index.html":{}}}],["u",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.id",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["u00f1\\u00d1",{"_index":1386,"title":{},"body":{"classes/regexHelper.html":{}}}],["u00f1\\u00d1]*)*[a",{"_index":1385,"title":{},"body":{"classes/regexHelper.html":{}}}],["u00f1\\u00d1]+(\\s*[a",{"_index":1384,"title":{},"body":{"classes/regexHelper.html":{}}}],["un",{"_index":391,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["una",{"_index":471,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/CreateUserDto.html":{}}}],["unauthorizedexception",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/localStrategy.html":{}}}],["unauthorizedexception('el",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unit",{"_index":1322,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}}}],["unlicensed",{"_index":1371,"title":{},"body":{"properties.html":{}}}],["update",{"_index":314,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{}}}],["update(@param('id",{"_index":345,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["update(id",{"_index":325,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{}}}],["updatebranchdto",{"_index":326,"title":{"classes/UpdateBranchDto.html":{}},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":715,"title":{},"body":{"interfaces/IHash.html":{},"miscellaneous/variables.html":{}}}],["updatedat:date",{"_index":717,"title":{},"body":{"interfaces/IHash.html":{}}}],["updatedat:date.now",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateorcreatehashtoken",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateorcreatehashtoken(_id",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepermissiondto",{"_index":808,"title":{"classes/UpdatePermissionDto.html":{}},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["updaterefreshtoken",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(_id",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateroledto",{"_index":859,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updaterouterdto",{"_index":902,"title":{"classes/UpdateRouterDto.html":{}},"body":{"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["updates",{"_index":848,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["updateuserdto",{"_index":1038,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["useclass",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@jwtsession()@get('auth/v2/logout')@httpcode(httpstatus.ok",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtnoauthguard",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtnoauthguard,jwtlocalauthguard",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtrefreshguard",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtrefreshguard)@post('auth/v2/refresh')@httpcode(httpstatus.ok",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1040,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":622,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["user.dto.ts:24",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:71",{"_index":569,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:77",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.interface",{"_index":716,"title":{},"body":{"interfaces/IHash.html":{}}}],["user.password",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["user:_id,hashrefreshtoken",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["user:any",{"_index":1023,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["user:iuser",{"_index":712,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{}}}],["user:string",{"_index":451,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["user[data",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userinterface",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["userinterface.id",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["usermodel",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["username:string",{"_index":750,"title":{},"body":{"interfaces/IUser.html":{}}}],["usernamefield",{"_index":1357,"title":{},"body":{"injectables/localStrategy.html":{}}}],["users",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1091,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/interface/refresh.interface",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["users/interface/user.interface",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":1092,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1042,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["usersmodule",{"_index":127,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":226,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["usuario",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/UsersController.html":{}}}],["usuario.'})@ismongoid({message",{"_index":417,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["v.method",{"_index":974,"title":{},"body":{"injectables/RouterService.html":{}}}],["v.path",{"_index":972,"title":{},"body":{"injectables/RouterService.html":{}}}],["vacia",{"_index":481,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["vacia.'})@transform",{"_index":474,"title":{},"body":{"classes/CreatePermissionDto.html":{}}}],["vacio",{"_index":438,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["vacio.'})@minlength(3",{"_index":394,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["vacio.'})@transform",{"_index":413,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{}}}],["validate",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["validate(payload",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":996,"title":{},"body":{"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["validateusername",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateusername(username",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":432,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"dependencies.html":{}}}],["valido",{"_index":450,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{}}}],["valido'})@transform",{"_index":419,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["valido.'})@isoptional()@transform",{"_index":496,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["value",{"_index":442,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"miscellaneous/enumerations.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["value.push(sanitizehtml(i",{"_index":1426,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["var",{"_index":687,"title":{},"body":{"classes/HashHelper.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["variable",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1427,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["ver",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["verified",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["verified:boolean",{"_index":754,"title":{},"body":{"interfaces/IUser.html":{}}}],["version",{"_index":1369,"title":{},"body":{"properties.html":{}}}],["void",{"_index":1016,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["void):any",{"_index":1024,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["waiting",{"_index":1284,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["watch",{"_index":1317,"title":{},"body":{"index.html":{}}}],["website",{"_index":1348,"title":{},"body":{"index.html":{}}}],["world",{"_index":189,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx.'})@matches(regexhelper.onlynumbersplusspace",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx.'})@maxlength(15",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["y",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["yes",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["you'd",{"_index":1338,"title":{},"body":{"index.html":{}}}],["z",{"_index":1383,"title":{},"body":{"classes/regexHelper.html":{}}}],["z]){3,}\\d",{"_index":1389,"title":{},"body":{"classes/regexHelper.html":{}}}],["za",{"_index":1382,"title":{},"body":{"classes/regexHelper.html":{}}}],["zoom",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginJWT\n                            \n                            \n                                    Async\n                                LogoutJWT\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginJWT\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginJWT(user: IUser, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtNoAuthGuard, JwtLocalAuthGuard)@Post('auth/v2/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LogoutJWT\n                        \n                    \n                \n            \n            \n                \n                    \n                    LogoutJWT(user: IUser, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@JWTSession()@Get('auth/v2/logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(user: IUserHash, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Post('auth/v2/refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUserHash\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, UseGuards, Request, HttpCode, HttpStatus, Req, Body, Res, UnauthorizedException  } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { GuestGuard, JwtAuthGuard, LocalAuthGuard } from './auth/guards';\nimport { JWTSession, Session, User } from 'src/common/decorators';\nimport { IUser } from './users/interface/user.interface';\nimport { JwtLocalAuthGuard } from './auth/guards/jwt-local-auth.guard';\nimport { AuthService } from './auth/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IRefreshHash } from './users/interface/refresh.interface';\nimport { JwtRefreshGuard } from './auth/guards/jwt-refresh.guard';\nimport { Response } from 'express';\nimport { IUserHash } from './common/types/refresh.type';\nimport { JwtNoAuthGuard } from './auth/guards/jwt-no-auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly authService: AuthService,\n  ) {}\n\n  @UseGuards(JwtNoAuthGuard,JwtLocalAuthGuard)\n  @Post('auth/v2/login')\n  async loginJWT(@User() user: IUser, @Res({passthrough:true}) res: Response) {\n\n    const data = await this.authService.login(user);\n\n    res.cookie('Authorization', data.refresh_token,{httpOnly: true,signed:true, sameSite:true, secure:true})\n   \n    delete data.refresh_token;\n    return data;\n  }\n\n  \n  @UseGuards(JwtAuthGuard)\n  @JWTSession()\n  @Get('auth/v2/logout')\n  @HttpCode(HttpStatus.OK)\n  async LogoutJWT(@User() user: IUser, @Res() res) {\n    \n    await this.authService.logout(user);\n\n    //TODO: VER COMO LIMPIAR LA COOKIE\n   // res.clearCookie('Authorization');\n\n    return res.status(HttpStatus.OK).json({\n      message:'desconectado'\n    });\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Post('auth/v2/refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshTokens(@User() user: IUserHash,\n  @Res({ passthrough: true }) res: Response\n  ) {\n    const data = await this.authService.refreshToken(user.sub,user.token);\n    res.cookie('Authorization', data.refresh_token,{httpOnly: true,signed:true, sameSite:true, secure:true})\n   \n    delete data.refresh_token;\n    return data;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBranchModule\n\nBranchModule\n\nAppModule -->\n\nBranchModule->AppModule\n\n\n\n\n\nPermissionModule\n\nPermissionModule\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRouterModule\n\nRouterModule\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BranchModule\n                        \n                        \n                            PermissionModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            RouterModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AccessControlModule } from 'nest-access-control';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { roles } from './app.roles';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { BranchModule } from './branch/branch.module';\nimport { PermissionModule } from './permission/permission.module';\nimport { RolesModule } from './roles/roles.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RouterModule } from './router/router.module';\n\n@Module({\n  imports: [\n    AccessControlModule.forRoles(roles),\n\n    ConfigModule.forRoot({ \n      isGlobal:true,\n      envFilePath:'.env'\n     }), \n     ThrottlerModule.forRoot({\n      ttl: 60,\n      limit: 100,\n    }),\n    MongooseModule.forRoot(process.env.DATABASE_HOST,{useNewUrlParser: true}),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    CacheModule.register({\n      isGlobal: true,\n      ttl:0,\n      limit:100\n    }),\n    AuthModule, \n    UsersModule, BranchModule, PermissionModule, RolesModule, RouterModule],\n  controllers: [AppController],\n  providers: [AppService,{ provide: APP_GUARD, useClass: ThrottlerGuard }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nlocalStrategy\n\nlocalStrategy\n\nAuthModule -->\n\nlocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RtStrategy\n                        \n                        \n                            SessionSerializer\n                        \n                        \n                            localStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './auth.service';\nimport { SessionSerializer } from './serializer/session.serializer';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { localStrategy } from './strategies/local.strategy';\nimport { RtStrategy } from './strategies/rt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    PassportModule.register({\n      defaultStrategy: 'jwt', //jwt\n    }),\n    UsersModule,\n    PassportModule,\n    PassportModule.register({ session: true }),\n    JwtModule.register({\n    // secret: process.env.JWT_SECRET,\n    //  signOptions: { expiresIn: '60m' },\n    }),\n  ],\n\n  providers: [AuthService, localStrategy, SessionSerializer, JwtStrategy, RtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                            \n                                    Async\n                                validateUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(_id: string, roles?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(_id: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(_id: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUsername(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { HashHelper } from 'src/common/helper';\nimport { IUser } from 'src/users/interface/user.interface';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly userService: UsersService,\n        private jwtService: JwtService) { }\n\n    async validateUsername(username: string, password: string): Promise {\n        const user = await this.userService.getUserByUsername(username);\n        if (!user) throw new UnauthorizedException('El usuario o la contraseña con invalidos.');\n        if (user && await HashHelper.compare(password, user.password)) {\n            user.password= null;\n            return user;\n        }\n        return null;\n    }\n\n    async login(user: IUser) {\n        \n        const { _id } = user;\n        if(!_id) throw new UnauthorizedException('No se encuentra autorizado');\n\n        const tokens = await this.getToken(_id);\n        await this.updateRefreshToken(_id, tokens.refresh_token);\n        return tokens;\n    }\n\n    async logout(user: IUser) {\n        const userToken = await this.userService.getfreshToken(user._id);\n        if (!userToken) throw new ForbiddenException('No se encuentra autorizado');\n\n        const hash = await this.userService.deleteHashToken(user._id);\n    }\n\n    async refreshToken(_id: string, refreshToken: string) {\n        const userToken = await this.userService.getfreshToken(_id);\n        if (!userToken) throw new ForbiddenException('No se encuentra autorizado');\n\n        const match = await HashHelper.compareHashRefreshToken(userToken.hashRefreshToken, refreshToken);\n\n        if (!match) throw new ForbiddenException('No se encuentra autorizado');\n\n        const tokens = await this.getToken(_id);\n        await this.updateRefreshToken(_id, tokens.refresh_token);\n        return tokens;\n    }\n\n    async getToken(_id: string, roles?: string[]) {\n\n        const [token, refresh] = await Promise.all([\n            this.jwtService.signAsync({\n                sub: _id,\n\n            }, {\n                secret: process.env.JWT_SECRET,\n                expiresIn: process.env.JWT_ACCESS_TOKEN_EXPIRATION_TIME\n            }),\n            this.jwtService.signAsync({\n                sub: _id,\n            }, {\n                secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                expiresIn: process.env.JWT_REFRESH_EXPIRATION_TIME\n            })\n        ]);\n\n        return {\n            access_token: token,\n            refresh_token: refresh\n        }\n\n\n    }\n\n    async updateRefreshToken(_id: string, refreshToken: string) {\n        const hash = await HashHelper.hashRefreshToken(refreshToken);\n        await this.userService.updateOrCreateHashToken(_id, hash);\n\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticatedGuard.html":{"url":"guards/AuthenticatedGuard.html","title":"guard - AuthenticatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authenticated.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authenticated.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class AuthenticatedGuard implements CanActivate{\n    canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        return request.isAuthenticated();\n     }\n    }\n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BranchController.html":{"url":"controllers/BranchController.html","title":"controller - BranchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BranchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/branch.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                branch\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createBranchDto: CreateBranchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Post()\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBranchDto\n                                    \n                                                CreateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get()\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateBranchDto: UpdateBranchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBranchDto\n                                    \n                                                UpdateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { JWTSession } from 'src/common/decorators';\nimport { BranchService } from './branch.service';\nimport { CreateBranchDto } from './dto/create-branch.dto';\nimport { UpdateBranchDto } from './dto/update-branch.dto';\n\n@Controller('branch')\nexport class BranchController {\n  constructor(private readonly branchService: BranchService) {}\n  \n  @JWTSession()\n  @Post()\n  create(@Body() createBranchDto: CreateBranchDto) {\n    return this.branchService.create(createBranchDto);\n  }\n\n  @JWTSession()\n  @Get()\n  findAll() {\n    return this.branchService.findAll();\n  }\n\n  @JWTSession()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.branchService.findOne(id);\n  }\n\n  @JWTSession()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateBranchDto: UpdateBranchDto) {\n    return this.branchService.update(id, updateBranchDto);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BranchModule.html":{"url":"modules/BranchModule.html","title":"module - BranchModule","body":"\n                   \n\n\n\n\n    Modules\n    BranchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BranchModule\n\n\n\ncluster_BranchModule_providers\n\n\n\n\nBranchService\n\nBranchService\n\n\n\nBranchModule\n\nBranchModule\n\nBranchModule -->\n\nBranchService->BranchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/branch/branch.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BranchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BranchController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BranchService } from './branch.service';\nimport { BranchController } from './branch.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BranchSchema } from './schemas/branch.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'Branch', schema: BranchSchema},\n    ])\n  ],\n  controllers: [BranchController],\n  providers: [BranchService]\n})\nexport class BranchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BranchService.html":{"url":"injectables/BranchService.html","title":"injectable - BranchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BranchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/branch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(branchModel: Model, routerService: RouterService)\n                    \n                \n                        \n                            \n                                Defined in src/branch/branch.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        branchModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routerService\n                                                  \n                                                        \n                                                                        RouterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createBranchDto: CreateBranchDto)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBranchDto\n                                    \n                                                CreateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateBranchDto: UpdateBranchDto)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBranchDto\n                                    \n                                                UpdateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { HashHelper } from 'src/common/helper';\nimport { RouterService } from 'src/router/router.service';\nimport { CreateBranchDto } from './dto/create-branch.dto';\nimport { UpdateBranchDto } from './dto/update-branch.dto';\nimport { IBranch } from './interface/branch.interface';\n\n@Injectable()\nexport class BranchService {\n  constructor(\n    @InjectModel('Branch') private branchModel: Model,\n    private readonly routerService:RouterService){}\n\n  async create(createBranchDto: CreateBranchDto) {\n    const branch = new this.branchModel({...createBranchDto});\n    const token = await HashHelper.tokenGenerator(branch._id.toString());\n    branch.token = token;\n\n    await this.routerService.create(branch._id);\n    branch.save();\n    return branch;\n  }\n\n  async findAll() {\n    const branches = await this.branchModel.find();\n    return branches;\n  }\n\n  async findOne(id: string) {\n    const branch = await this.branchModel.findById(id);\n    return branch;\n  }\n\n  async update(id: string, updateBranchDto: UpdateBranchDto) {\n    const branch = await this.branchModel.findOneAndUpdate({_id:id},{updateBranchDto},{new:true});\n    return branch;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBranchDto.html":{"url":"classes/CreateBranchDto.html","title":"class - CreateBranchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBranchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/dto/create-branch.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'La sede debe ser un texto.'})@IsNotEmpty({message: 'La sede no debe estar vacio.'})@MinLength(3, {message: 'La sede debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'La sede debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'La sede no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'La sede no puede contener solo numeros.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(EstatusBranch)@IsNotEmpty({message: 'El estado no debe estar vacio.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Debe selecionar un usuario.'})@IsMongoId({message: 'Debe ingresar un usuario valido'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Transform } from \"class-transformer\";\nimport { IsEnum, IsMongoId, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nimport { EstatusBranch } from \"src/common/enum\";\nimport { regexHelper, sanitizeHelper } from \"src/common/helper\";\n\nexport class CreateBranchDto {\n    @IsString({ message: 'La sede debe ser un texto.' })\n    @IsNotEmpty({ message: 'La sede no debe estar vacio.' })\n    @MinLength(3, { message: 'La sede debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'La sede debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    @Matches(regexHelper.specialCharacters, {message:'La sede no puede contener caracteres especiales.'})\n    @Matches(regexHelper.onlyNumbers, { message:'La sede no puede contener solo numeros.'})\n    @ApiProperty()\n    readonly name:string;\n\n\n    @IsNotEmpty({ message: 'Debe selecionar un usuario.' })\n    @IsMongoId({message:'Debe ingresar un usuario valido'})\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly user:string;\n\n    @IsEnum(EstatusBranch)\n    @IsNotEmpty({ message: 'El estado no debe estar vacio.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly status: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePermissionDto.html":{"url":"classes/CreatePermissionDto.html","title":"class - CreatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/dto/create-permission.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                enable\n                            \n                            \n                                    Readonly\n                                method\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        enable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean({message: 'El estado debe ser un booleano'})@IsNotEmpty({message: 'El estado no debe estar vacio.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/dto/create-permission.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EMethod\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(EMethod, {message: 'Debe ingresar un metodo valido: GET, POST, PATCH, DELETE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/dto/create-permission.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El nombre debe ser un texto.'})@IsNotEmpty({message: 'El nombre no debe estar vacio.'})@MinLength(3, {message: 'El nombre debe contener $constraint1 o mas letras.'})@MaxLength(48, {message: 'El nombre debe contener un maximo de $constraint1 letras.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/dto/create-permission.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Ingrese un una ruta.'})@IsNotEmpty({message: 'La ruta no debe estar vacia.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/dto/create-permission.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsBoolean, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { ECrud } from \"src/common/enum/crud.enum\";\nimport { EMethod } from \"src/common/enum/method.enum\";\nimport { sanitizeHelper } from \"src/common/helper\";\n\nexport class CreatePermissionDto {\n\n    @IsString({ message: 'Ingrese un una ruta.' })\n    @IsNotEmpty({ message: 'La ruta no debe estar vacia.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly router:string;\n\n    @IsEnum(EMethod,{message:'Debe ingresar un metodo valido: GET, POST, PATCH, DELETE'})\n    readonly method: EMethod;\n\n    @IsString({ message: 'El nombre debe ser un texto.' })\n    @IsNotEmpty({ message: 'El nombre no debe estar vacio.' })\n    @MinLength(3, { message: 'El nombre debe contener $constraint1 o mas letras.' })\n    @MaxLength(48, { message: 'El nombre debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly name:string;\n\n    \n    @IsBoolean({message:'El estado debe ser un booleano'})\n    @IsNotEmpty({ message: 'El estado no debe estar vacio.' })\n    readonly enable:Boolean;\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                permission\n                            \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El nombre debe ser un texto.'})@IsNotEmpty({message: 'El nombre no debe estar vacio.'})@MinLength(3, {message: 'El nombre debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El nombre debe contener un maximo de $constraint1 letras.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId({message: 'El permiso no es valido.'})@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ERoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ERoles)@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsEmpty, IsEnum, IsMongoId, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\nimport mongoose from \"mongoose\";\nimport { ERoles } from \"src/common/enum/roles-status.enum\";\nimport { sanitizeHelper } from \"src/common/helper\";\n\nexport class CreateRoleDto {\n\n    @IsString({ message: 'El nombre debe ser un texto.' })\n    @IsNotEmpty({ message: 'El nombre no debe estar vacio.' })\n    @MinLength(3, { message: 'El nombre debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'El nombre debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly name:string;\n\n    @IsEnum(ERoles)\n    @IsNotEmpty()\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly status:ERoles;\n\n    @IsMongoId({message:'El permiso no es valido.'})\n    @IsOptional()\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly permission: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRouterDto.html":{"url":"classes/CreateRouterDto.html","title":"class - CreateRouterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRouterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/dto/create-router.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateRouterDto {\n   \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                career\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phone\n                            \n                            \n                                    Readonly\n                                rut\n                            \n                            \n                                    Readonly\n                                semesterProgress\n                            \n                            \n                                    Readonly\n                                themesInterest\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        career\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Debe ingresar una carrera'})@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El apellido debe ser un texto.'})@IsNotEmpty({message: 'El apellido no debe estar vacio.'})@Transform( => )@Matches(regexHelper.onlyText, {message: 'El apellido debe contener solo texto.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El nombre debe ser un texto.'})@IsNotEmpty({message: 'El nombre no debe estar vacio.'})@Transform( => )@Matches(regexHelper.onlyText, {message: 'El nombre debe contener solo texto.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@MinLength(5, {message: 'La contraseña debe tener por lo menos $constraint1 caracteres'})@MaxLength(16, {message: 'La contraseña debe tener por lo menos $constraint1 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@Matches(regexHelper.phoneNumberValidator, {message: 'El numero de telefono debe contener el siguiente formato: +56 X XXXX XXXX.'})@Matches(regexHelper.onlyNumbersPlusSpace, {message: 'El numero de telefono deben contener solo numeros, un simbolo + y 3 espacios.'})@MinLength(15, {message: 'El numero de telefono debe contener un minimo de 15 letras el siguiente formato: +56 X XXXX XXXX.'})@MaxLength(15, {message: 'El numero de telefono debe contener un maximo de 15 letras el siguiente formato: +56 X XXXX XXXX.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        rut\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@MinLength(12, {message: 'El rut debe tener un minimo de 12 letras con el siguiente formato: 21.234.567-8.'})@MaxLength(12, {message: 'El rut debe tener un maximo de 12 letras con el siguiente formato: 21.234.567-8.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        semesterProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString({message: 'Debe ingresar el numero del semestre que se encuentra.'})@IsNotEmpty({message: 'Debe ingresar en el semestre que se encuentra actualmente.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        themesInterest\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})@ArrayNotEmpty({message: 'Debe tener por lo menos un tema de interes.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El usuario debe ser un texto.'})@IsNotEmpty({message: 'El usuario no debe estar vacio.'})@MinLength(3, {message: 'El usuario debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El usuario debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'El usuario no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'El usuario no puede contener solo numeros.'})@Matches(regexHelper.onlyTextfirst3, {message: 'No se permiten numeros dentro de las primeras 3 letras.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ArrayNotEmpty, isArray, IsArray, IsEmail, IsNotEmpty, IsNumber, IsNumberString, IsOptional, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { Transform } from 'class-transformer';\nimport { sanitizeHelper } from 'src/common/helper';\nimport { regexHelper } from 'src/common/helper';\n\nexport class CreateUserDto {\n  @IsString({ message: 'El usuario debe ser un texto.' })\n  @IsNotEmpty({ message: 'El usuario no debe estar vacio.' })\n  @MinLength(3, { message: 'El usuario debe contener $constraint1 o mas letras.' })\n  @MaxLength(16, { message: 'El usuario debe contener un maximo de $constraint1 letras.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.specialCharacters, {message:'El usuario no puede contener caracteres especiales.'})\n  @Matches(regexHelper.onlyNumbers, { message:'El usuario no puede contener solo numeros.'})\n  @Matches(regexHelper.onlyTextfirst3, { message:'No se permiten numeros dentro de las primeras 3 letras.'})\n  @ApiProperty()\n  readonly username: string;\n\n  @IsString({ message: 'El nombre debe ser un texto.' })\n  @IsNotEmpty({ message: 'El nombre no debe estar vacio.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.onlyText, { message:'El nombre debe contener solo texto.'})\n  @ApiProperty()\n  readonly name: string;\n\n  @IsString({ message: 'El apellido debe ser un texto.' })\n  @IsNotEmpty({ message: 'El apellido no debe estar vacio.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.onlyText, { message:'El apellido debe contener solo texto.'})\n  @ApiProperty()\n  readonly lastName: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satinizeOnlyScripts(value))\n  @MinLength(5,{message:'La contraseña debe tener por lo menos $constraint1 caracteres'})\n  @MaxLength(16,{message:'La contraseña debe tener por lo menos $constraint1 caracteres'})\n  readonly password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.phoneNumberValidator, { message:'El numero de telefono debe contener el siguiente formato: +56 X XXXX XXXX.'})\n  @Matches(regexHelper.onlyNumbersPlusSpace, { message:'El numero de telefono deben contener solo numeros, un simbolo + y 3 espacios.'})\n  @MinLength(15, { message: 'El numero de telefono debe contener un minimo de 15 letras el siguiente formato: +56 X XXXX XXXX.' })\n  @MaxLength(15, { message: 'El numero de telefono debe contener un maximo de 15 letras el siguiente formato: +56 X XXXX XXXX.' })\n  readonly phone:string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @MinLength(12, { message: 'El rut debe tener un minimo de 12 letras con el siguiente formato: 21.234.567-8.' })\n  @MaxLength(12, { message: 'El rut debe tener un maximo de 12 letras con el siguiente formato: 21.234.567-8.' })\n  readonly rut:string;\n\n\n  @IsArray()\n  @IsString({ each: true }) \n  @ArrayNotEmpty({message:'Debe tener por lo menos un tema de interes.'})\n  @Transform(({ value }) => sanitizeHelper.satonizeALLArray(value))\n  readonly themesInterest:[string];\n\n\n  @IsNumberString({message:'Debe ingresar el numero del semestre que se encuentra.'})\n  @IsNotEmpty({message:'Debe ingresar en el semestre que se encuentra actualmente.'})\n  readonly semesterProgress:number;\n\n\n  @IsString({message:'Debe ingresar una carrera'})\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  readonly career:string;\n\n  //readonly roles:     [string];\n  //  sede:        {type:mongoose.Types.ObjectId, ref:'Sede', required:true},\n  //   rolesSede:   {type:mongoose.Types.ObjectId, ref:'Rol', required:true},\n  // readonly status: string;\n  // readonly createdAt:   Date;\n  // readonly verified: boolean;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterUserDto.html":{"url":"classes/FilterUserDto.html","title":"class - FilterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/filter-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                filter\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El usuario debe ser un texto.'})@IsNotEmpty({message: 'El usuario no debe estar vacio.'})@MinLength(3, {message: 'El usuario debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El usuario debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'El usuario no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'El usuario no puede contener solo numeros.'})@Matches(regexHelper.onlyTextfirst3, {message: 'No se permiten numeros dentro de las primeras 3 letras.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/filter-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { Transform } from 'class-transformer';\nimport { sanitizeHelper } from 'src/common/helper';\nimport { regexHelper } from 'src/common/helper';\n\nexport class FilterUserDto {\n    @IsString({ message: 'El usuario debe ser un texto.' })\n    @IsNotEmpty({ message: 'El usuario no debe estar vacio.' })\n    @MinLength(3, { message: 'El usuario debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'El usuario debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    @Matches(regexHelper.specialCharacters, {message:'El usuario no puede contener caracteres especiales.'})\n    @Matches(regexHelper.onlyNumbers, { message:'El usuario no puede contener solo numeros.'})\n    @Matches(regexHelper.onlyTextfirst3, { message:'No se permiten numeros dentro de las primeras 3 letras.'})\n\n    //blacklist\n    @ApiProperty()\n    readonly filter:string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalService.html":{"url":"classes/GlobalService.html","title":"class - GlobalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/global.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                routes\n                            \n                            \n                                    Static\n                                routesBlocked\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/common/services/global.service.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        routesBlocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {\n\n        routes: [{\n            path: '*',\n            method: 'get'\n        },\n        {\n            path: '/api',\n            method: 'get'\n        },\n        {\n            path: '/api/router',\n            method: 'post'\n        },\n        {\n            path: '/api/router',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'patch'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'delete'\n        },\n        {\n            path: '/api/error',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger-json',\n            method: 'get'\n        },\n        ]\n\n    }\n                    \n                \n                    \n                        \n                                Defined in src/common/services/global.service.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GlobalService {\n    static routes: any;\n    static routesBlocked: any = {\n\n        routes: [{\n            path: '*',\n            method: 'get'\n        },\n        {\n            path: '/api',\n            method: 'get'\n        },\n        {\n            path: '/api/router',\n            method: 'post'\n        },\n        {\n            path: '/api/router',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'patch'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'delete'\n        },\n        {\n            path: '/api/error',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger-json',\n            method: 'get'\n        },\n        ]\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GuestGuard.html":{"url":"guards/GuestGuard.html","title":"guard - GuestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GuestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/guest.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/guest.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class GuestGuard implements CanActivate{\n    canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        return !request.isAuthenticated();\n     }\n    }\n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HashHelper.html":{"url":"classes/HashHelper.html","title":"class - HashHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HashHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/hash.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                salt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                compareHashRefreshToken\n                            \n                            \n                                    Static\n                                    Async\n                                decryptToken\n                            \n                            \n                                    Static\n                                    Async\n                                encrypt\n                            \n                            \n                                    Static\n                                hashRefreshToken\n                            \n                            \n                                    Static\n                                    Async\n                                tokenGenerator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/hash.helper.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(str: string, encrypted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:23\n                \n            \n\n\n            \n                \n                    Compara texto encriptado y texto ingresado\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise, Retorna un boolean, True si el texto encriptado y el ingresado son iguales.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        compareHashRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    compareHashRefreshToken(str: string, encripted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:62\n                \n            \n\n\n            \n                \n                    Compara token encriptado y token ingresado\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        token\n\n                                    \n                                \n                                \n                                    encripted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        hasRefeshToken\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise, Retorna un booleano, True si el token encriptado y el ingresado son iguales.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        decryptToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decryptToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:41\n                \n            \n\n\n            \n                \n                    Decripta token de branch\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        , token encriptado\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise, Retorna el token decriptado\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:13\n                \n            \n\n\n            \n                \n                    Encripta texto plano\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise Retorna texto encriptado\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        hashRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashRefreshToken(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:52\n                \n            \n\n\n            \n                \n                    Refresca tokens de autentificación\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        , Token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise, Retorna nuevo token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        tokenGenerator\n                        \n                    \n                \n            \n            \n                \n                    \n                    tokenGenerator(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:32\n                \n            \n\n\n            \n                \n                    Genera un token para branch\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        , mongoId\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise, Retorna el token\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcryptjs';\nimport * as argon2 from 'argon2';\nvar CryptoJS = require(\"crypto-js\");\n \nexport class HashHelper {\n  private static salt = 10;\n \n  /**\n   * Encripta texto plano\n   * @param str {string}\n   * @returns Promise Retorna texto encriptado\n   */\n  public static async encrypt(str: string): Promise {\n    return await bcrypt.hash(str, this.salt);\n  }\n\n  /**\n   * Compara texto encriptado y texto ingresado\n   * @param str {string}\n   * @param encrypted {string}\n   * @returns Promise, Retorna un boolean, True si el texto encriptado y el ingresado son iguales.\n   */\n  public static async compare(str: string, encrypted: string): Promise {\n    return await bcrypt.compare(str, encrypted);\n  }\n\n  /**\n   * Genera un token para branch\n   * @param str {string}, mongoId\n   * @returns Promise, Retorna el token\n   */\n  public static async tokenGenerator(str:string): Promise {\n    return  CryptoJS.AES.encrypt(str, process.env.TOKEN_BRANCH).toString(); \n   }\n\n   /**\n    * Decripta token de branch\n    * @param token, token encriptado\n   * @returns Promise, Retorna el token decriptado\n    */\n   public static async decryptToken(token:string): Promise{\n    var bytes = await CryptoJS.AES.decrypt(token.toString(), process.env.TOKEN_BRANCH);\n    \n    return bytes.toString(CryptoJS.enc.Utf8);\n   }\n\n   /**\n    * Refresca tokens de autentificación\n    * @param str, Token\n    * @returns Promise, Retorna nuevo token\n    */\n  public static hashRefreshToken(str: string):Promise{\n    return argon2.hash(str);\n  }\n\n  /**\n   * Compara token encriptado y token ingresado\n   * @param str token\n   * @param encripted hasRefeshToken\n   * @returns Promise, Retorna un booleano, True si el token encriptado y el ingresado son iguales.\n   */\n  public static async compareHashRefreshToken(str:string, encripted: string):Promise{\n    return argon2.verify(str, encripted);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBranch.html":{"url":"interfaces/IBranch.html","title":"interface - IBranch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBranch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/interface/branch.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IUser } from 'src/users/interface/user.interface';\n\nexport interface IBranch extends Document {\n    readonly name:string;\n    readonly user:IUser;\n     token: string;\n    readonly createdAt: Date;\n    readonly status: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHash.html":{"url":"interfaces/IHash.html","title":"interface - IHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/hash.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hashRefreshToken\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hashRefreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hashRefreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IUser } from './user.interface';\n\nexport interface IHash extends Document {\n    readonly user:IUser;\n    readonly updatedAt:Date;\n    readonly hashRefreshToken: string;\n\n\n   // readonly device:string;\n   // readonly browser:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPermisssion.html":{"url":"interfaces/IPermisssion.html","title":"interface - IPermisssion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPermisssion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/interface/permission.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\n\n\nexport interface IPermisssion extends Document {\n    readonly router:string;\n    readonly method:string;\n    readonly name:string;\n    readonly enable:boolean;\n    readonly branch:IBranch;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IProfile.html":{"url":"interfaces/IProfile.html","title":"interface - IProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/profile.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            career\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            lastLogin\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            picture\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            rolesBranch\n                                        \n                                \n                                \n                                        \n                                            rut\n                                        \n                                \n                                \n                                        \n                                            semesterProgress\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            themesInterest\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        career\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        career:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastLogin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastLogin:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        picture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        picture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rolesBranch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rolesBranch:         IRoles\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRoles\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rut\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rut:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterProgress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        themesInterest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        themesInterest:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\nimport { IRoles } from 'src/roles/interface/roles.interface';\n\nexport interface IProfile extends Document {\n    readonly name:string;\n    readonly lastName:string;\n    readonly roles:[string];\n    readonly branch:IBranch;\n    readonly rolesBranch:IRoles;\n    readonly rut:string;\n    readonly status: string;\n    readonly picture:string;\n    readonly email:string;\n    readonly phone:string;\n    readonly career:string;\n    readonly themesInterest:[string];\n    readonly semesterProgress:number;\n    readonly lastLogin:Date;\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRefreshHash.html":{"url":"interfaces/IRefreshHash.html","title":"interface - IRefreshHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRefreshHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/refresh.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRefreshHash{\n    \n    readonly sub: string;\n    readonly iat: number;\n    readonly exp: number;\n    readonly refreshToken: string;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRoles.html":{"url":"interfaces/IRoles.html","title":"interface - IRoles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/interface/roles.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            permission\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permission\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permission:         IPermisssion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPermisssion\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\nimport { IPermisssion } from 'src/permission/interface/permission.schema';\n\n\nexport interface IRoles extends Document {\n    readonly name:string;\n    readonly status:string;\n    readonly branch: IBranch;\n    readonly permission: IPermisssion;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRouter.html":{"url":"interfaces/IRouter.html","title":"interface - IRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/interface/router.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\n\nexport interface IRouter extends Document {\n    readonly name:   string;\n    readonly router: string;\n    readonly method: string;\n    readonly status: boolean; \n    readonly branch: IBranch;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            hash\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            profile\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                                \n                                        \n                                            verified\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hash:         IHash\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IHash\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profile:         IProfile\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IProfile\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import mongoose, { Document } from 'mongoose';\nimport { IRoles } from 'src/roles/interface/roles.interface';\nimport { IHash } from './hash.interface';\nimport { IProfile } from './profile.interface';\n\nexport interface IUser extends Document {\n    readonly username:string;\n    readonly profile:IProfile;\n    readonly hash: IHash;\n             password:string;\n    readonly createdAt:Date;\n    readonly verified:boolean;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserHash.html":{"url":"interfaces/IUserHash.html","title":"interface - IUserHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/refresh.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUserHash {\n    readonly token:string;\n    readonly sub:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n\n    handleRequest(err: any, user: any, info: any){\n        if(err || !user){\n            throw err || new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtLocalAuthGuard.html":{"url":"injectables/JwtLocalAuthGuard.html","title":"injectable - JwtLocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtLocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtLocalAuthGuard extends AuthGuard('local'){\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtNoAuthGuard.html":{"url":"injectables/JwtNoAuthGuard.html","title":"injectable - JwtNoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtNoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-no-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-no-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class JwtNoAuthGuard extends AuthGuard('jwt'){\n\n\n    handleRequest(err: any, user: any, info: any){\n        if(user){\n            throw new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-refresh.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh'){\n    handleRequest(err: any, user: any, info: any){\n        if(err || !user){\n            throw err || new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, req: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy,'jwt') {\n  constructor(private userService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n  async validate(payload: any,req: Request) {\n     const { sub: _id } = payload;\n\n     const user = await this.userService.getUserById(_id);\n     //console.log(user)\n     //extraer permisos aca...\n      return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/local-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local'){\n    async canActivate(context: ExecutionContext){\n        const result = (await super.canActivate(context)) as boolean;\n        const request = context.switchToHttp().getRequest();\n        await super.logIn(request);\n        return result;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionController.html":{"url":"controllers/PermissionController.html","title":"controller - PermissionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permission\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createPermissionDto: CreatePermissionDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Post()\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPermissionDto\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updatePermissionDto: UpdatePermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionDto\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { PermissionService } from './permission.service';\nimport { CreatePermissionDto } from './dto/create-permission.dto';\nimport { UpdatePermissionDto } from './dto/update-permission.dto';\nimport { Branch } from 'src/common/decorators/branch.decorator';\nimport { JWTSession } from 'src/common/decorators';\n\n@Controller('permission')\nexport class PermissionController {\n  constructor(private readonly permissionService: PermissionService) {}\n\n  @JWTSession()\n  @Post()\n  create(@Body() createPermissionDto: CreatePermissionDto, @Branch() id:string) {\n    return this.permissionService.create(createPermissionDto,id);\n  }\n\n  @Get()\n  findAll() {\n    return this.permissionService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.permissionService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePermissionDto: UpdatePermissionDto) {\n    return this.permissionService.update(+id, updatePermissionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.permissionService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PermissionModule.html":{"url":"modules/PermissionModule.html","title":"module - PermissionModule","body":"\n                   \n\n\n\n\n    Modules\n    PermissionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_providers\n\n\n\n\nPermissionService\n\nPermissionService\n\n\n\nPermissionModule\n\nPermissionModule\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/permission/permission.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PermissionService } from './permission.service';\nimport { PermissionController } from './permission.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PermissionSchema } from './schemas/permission.schema';\n\n@Module({\n  imports:[\n    MongooseModule.forFeature([\n      {name:'Permission', schema: PermissionSchema},\n\n  ])],\n  controllers: [PermissionController],\n  providers: [PermissionService]\n})\nexport class PermissionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionService.html":{"url":"injectables/PermissionService.html","title":"injectable - PermissionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(permissionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/permission/permission.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        permissionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPermissionDto: CreatePermissionDto, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPermissionDto\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updatePermissionDto: UpdatePermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionDto\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePermissionDto } from './dto/create-permission.dto';\nimport { UpdatePermissionDto } from './dto/update-permission.dto';\nimport { IPermisssion } from './interface/permission.schema';\n\n@Injectable()\nexport class PermissionService {\n  constructor(@InjectModel('Permission') private permissionModel: Model){}\n\n  async create(createPermissionDto: CreatePermissionDto, code:string) {\n    const permission = new this.permissionModel({ ...createPermissionDto, branch:code });\n    await permission.save();\n    return 'Se ha creado el permiso.';\n  }\n\n  findAll() {\n    return `This action returns all permission`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} permission`;\n  }\n\n  update(id: number, updatePermissionDto: UpdatePermissionDto) {\n    return `This action updates a #${id} permission`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} permission`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createRoleDto: CreateRoleDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string, branch: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { Branch } from 'src/common/decorators/branch.decorator';\nimport { JWTSession } from 'src/common/decorators';\n\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Post()\n  create(@Body() createRoleDto: CreateRoleDto, @Branch() id:string) {\n    return this.rolesService.create(createRoleDto,id);\n  }\n  \n  @JWTSession()\n  @Get()\n  findAll(@Branch() id:string) {\n    return this.rolesService.findAll(id);\n  }  \n\n  @JWTSession()\n  @Get(':id')\n  findOne(@Param('id') id: string, @Branch() branch:string) {\n    return this.rolesService.findOne(id, branch);\n  }\n\n  @JWTSession()\n  @Patch(':id') \n  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {\n    return this.rolesService.update(+id, updateRoleDto);\n  }\n\n  @JWTSession()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.rolesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService\n\nRolesService\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RolesSchema } from './schemas/roles.schema';\n\n@Module({  \n  imports:[\n  MongooseModule.forFeature([\n    {name:'Roles', schema: RolesSchema},\n\n])],\n  controllers: [RolesController],\n  providers: [RolesService]\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto, branch: string)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string, branch: string)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { IRoles } from './interface/roles.interface';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectModel('Roles') private roleModel: Model\n  ) { }\n\n  async create(createRoleDto: CreateRoleDto,branch:string) {\n    const roles = new this.roleModel({...createRoleDto,branch});\n    await roles.save();\n    return 'Se ha creado un rol con exito';\n  }\n\n  async findAll(id:string){\n    const roles = await this.roleModel.find({branch:id}).populate('permission');\n    return roles;\n  }\n\n  async findOne(id: string, branch:string) {\n    const rol = await this.roleModel.findOne({id,branch});\n    return rol;\n  }\n\n  update(id: number, updateRoleDto: UpdateRoleDto) {\n    return `This action updates a #${id} role`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} role`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RouterController.html":{"url":"controllers/RouterController.html","title":"controller - RouterController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RouterController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/router.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                router\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateRouterDto: UpdateRouterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRouterDto\n                                    \n                                                UpdateRouterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { RouterService } from './router.service';\nimport { CreateRouterDto } from './dto/create-router.dto';\nimport { UpdateRouterDto } from './dto/update-router.dto';\nimport { JWTSession } from 'src/common/decorators';\n\n@Controller('router')\nexport class RouterController {\n  constructor(private readonly routerService: RouterService) {}\n\n  @JWTSession()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.routerService.findOne(id);\n  }\n\n  @JWTSession()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRouterDto: UpdateRouterDto) {\n    return this.routerService.update(id, updateRouterDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RouterGuard.html":{"url":"guards/RouterGuard.html","title":"guard - RouterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RouterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/router.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(routerService: RouterService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/router.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerService\n                                                  \n                                                        \n                                                                        RouterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/router.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { RouterService } from \"src/router/router.service\";\n\n\n@Injectable()\nexport class RouterGuard implements CanActivate{ \n    constructor(private readonly routerService:RouterService) {}\n    \n    async canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        const header = request.headers.code;\n        const roles = context.switchToHttp().getRequest().user?.profile.rolesBranch;\n        var routesEnables = [];\n        \n        if(roles.length != 0){\n            const permission = roles.map((roles)=> roles.permission).filter((permission) => permission.length > 0)\n            .map((permission) => {\n                return permission.map((permission)=>{\n                    return [permission.router.toLowerCase(), permission.method.toLowerCase()]\n               })\n            })\n\n            routesEnables = routesEnables.concat(...permission)\n        }\n\n        if(!header) return false;\n\n        //TODO: QUITARLO\n        return true;\n\n        const access = await (await this.routerService.access(request.method.toLowerCase(), request.route.path, header));\n        let permissionEnable = routesEnables.some((permission)=> JSON.stringify(permission) === JSON.stringify([access.router, access.method]));\n        if(header == process.env.CENTRAL_TOKEN && permissionEnable) return true;\n     \n        if(!access || !permissionEnable) return false;\n        if(access?.status == false) return false;\n\n        return true;\n\n     }\n    }\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RouterModule.html":{"url":"modules/RouterModule.html","title":"module - RouterModule","body":"\n                   \n\n\n\n\n    Modules\n    RouterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_providers\n\n\n\ncluster_RouterModule_exports\n\n\n\n\nRouterService \n\nRouterService \n\n\n\nRouterModule\n\nRouterModule\n\nRouterService  -->\n\nRouterModule->RouterService \n\n\n\n\n\nRouterService\n\nRouterService\n\nRouterModule -->\n\nRouterService->RouterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/router/router.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RouterService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RouterController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RouterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { RouterService } from './router.service';\nimport { RouterController } from './router.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RouterSchema } from './schemas/router.schema';\nimport { BranchSchema } from 'src/branch/schemas/branch.schema';\n\n@Global()\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'Router', schema:RouterSchema},\n      {name:'Branch', schema: BranchSchema}\n\n    ])\n  ],\n  controllers: [RouterController],\n  providers: [RouterService],\n  exports:[RouterService]\n\n\n})\nexport class RouterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RouterService.html":{"url":"injectables/RouterService.html","title":"injectable - RouterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RouterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/router.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                access\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                loadRoutes\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(routerModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/router/router.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        access\n                        \n                    \n                \n            \n            \n                \n                    \n                    access(method: string, path: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(branch: any)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    branch\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        loadRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                    loadRoutes()\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRouterDto: UpdateRouterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRouterDto\n                                    \n                                                UpdateRouterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { HashHelper } from 'src/common/helper';\nimport { GlobalService } from 'src/common/services/global.service';\nimport { UpdateRouterDto } from './dto/update-router.dto';\nimport { IRouter } from './interface/router.interface';\n\n@Injectable()\nexport class RouterService implements OnModuleInit {\n  constructor(@InjectModel('Router') private routerModel: Model,\n  ){}\n\n  async create(branch:any) {\n    var router = [];\n    for (let i = 0; i  v.path == element.path && v.method == element.method)){\n        router.push({method:element.method,router:element.path,branch:branch,status:true});\n      }\n    }\n    const bulk = await this.routerModel.insertMany(router);\n    return bulk;\n  }\n\n  async findOne(id: string) {\n    const result = await this.routerModel.find({branch:id});\n    return result;\n  }\n\n  async access(method: string, path:string, token:string) {\n    const branch = await HashHelper.decryptToken(token);\n    const result = await this.routerModel.findOne({router:path,method:method,branch:branch}); \n    return result;\n  }\n\n  async update(id: string, updateRouterDto: UpdateRouterDto) {\n    var {status} = updateRouterDto;\n    const result = await this.routerModel.findByIdAndUpdate(id,{status},{new:true});\n    return result;\n  }\n\n  /**\n   * @deprecated\n   */\n  private async loadRoutes(){\n       /*\n    const branch = await this.branchModel.find();\n    var data = {};\n\n     branch.map(async (r)=> {\n        data[r._id.toString()] = [];\n\n      await this.cacheManager.set(r._id.toString(), '');\n    });\n    \n    const routes = await this.routerModel.find({branch});\n\n \n    console.log(data)\n    routes.map(async (r)=>{\n      data[r.branch._id.toString()].push([]);\n    });\n    */\n\n  }\n\n  async onModuleInit() {\n    await this.loadRoutes();\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/rt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy,'jwt-refresh') {\n  constructor(private userService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request:Request)=>{\n        let data = request?.signedCookies.Authorization;\n        if(!data){\n          return null;\n        }\n        return data;\n      }]),\n      secretOrKey: process.env.JWT_REFRESH_TOKEN_SECRET,\n      passReqToCallback:true,\n      \n    });\n  }\n  async validate(req: Request, payload: any) {\n    if(!payload){\n        throw new BadRequestException('No se encuentra autorizado');\n    }\n    \n    let data = req?.signedCookies.Authorization;\n\n    if(!data){\n      throw new BadRequestException('No se encuentra autorizado');\n    }\n    // const refreshToken = req.get('authorization').replace('Bearer','').trim();\n    return {token:data, sub:payload.sub};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionSerializer.html":{"url":"injectables/SessionSerializer.html","title":"injectable - SessionSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/serializer/session.serializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(user: any, done: (err: Error,payloader: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/serializer/session.serializer.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/serializer/session.serializer.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportSerializer} from \"@nestjs/passport\";\n\n@Injectable()\nexport class SessionSerializer extends PassportSerializer {\n\n    serializeUser(user: any, done: (err:Error, user:any) => void):any {\n        done(null, user);\n    }\n    async deserializeUser(user: any, done: (err:Error, payloader:string) => void) {\n        done(null, user);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBranchDto.html":{"url":"classes/UpdateBranchDto.html","title":"class - UpdateBranchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBranchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/dto/update-branch.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateBranchDto } from './create-branch.dto';\n\nexport class UpdateBranchDto extends PartialType(CreateBranchDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionDto.html":{"url":"classes/UpdatePermissionDto.html","title":"class - UpdatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/dto/update-permission.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePermissionDto } from './create-permission.dto';\n\nexport class UpdatePermissionDto extends PartialType(CreatePermissionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRouterDto.html":{"url":"classes/UpdateRouterDto.html","title":"class - UpdateRouterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRouterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/dto/update-router.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/router/dto/update-router.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRouterDto } from './create-router.dto';\n\nexport class UpdateRouterDto extends PartialType(CreateRouterDto) {\n    status:boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                filterUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(res, createUserDto: CreateUserDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtNoAuthGuard, RouterGuard)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        filterUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterUser(res, filterUserDto: FilterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('filter/user')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterUserDto\n                                    \n                                                FilterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res, branch: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(res, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Res, BadRequestException, HttpStatus, UseGuards, Req } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JWTSession, User } from 'src/common/decorators';\nimport { IUser } from './interface/user.interface';\nimport { JwtNoAuthGuard } from 'src/auth/guards/jwt-no-auth.guard';\nimport { FilterUserDto } from './dto/filter-user.dto';\nimport { RouterGuard } from 'src/auth/guards/router.guard';\nimport { Branch } from 'src/common/decorators/branch.decorator';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) { }\n\n  @UseGuards(JwtNoAuthGuard, RouterGuard)\n  @Post('create')\n  async create(@Res() res, @Body() createUserDto: CreateUserDto, @Branch() id: string) {\n    const mail = await this.usersService.getUserByEmail(createUserDto.email);\n    if (mail) throw new BadRequestException('Correo no disponible')\n\n    const username = await this.usersService.getUserByEmail(createUserDto.username);\n    if (username) throw new BadRequestException('Nombre de usuario no disponible')\n\n    await this.usersService.create(createUserDto, id);\n\n    return res.status(HttpStatus.OK).json({\n      message: 'Usuario Creado, se enviara un correo cuando se habilite su cuenta'\n    })\n  }\n\n  @JWTSession()\n  @Get()\n  async findAll(@Res() res, @Branch() branch: string) {\n    const users = await this.usersService.findAll(branch);\n    return res.status(HttpStatus.OK).json(users);\n  }\n\n  @JWTSession()\n  @Get('profile')\n  async profile(@Res() res, @User() user: IUser) {\n    return res.status(HttpStatus.OK).json(user.profile)\n  }\n\n  @Post('filter/user')\n  async filterUser(@Res() res, @Body() filterUserDto: FilterUserDto) {\n    const available = await this.usersService.getUserbyUsernameFilter(filterUserDto.filter);\n    return res.status(HttpStatus.OK).json(available);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from './schemas/user.schema';\nimport { ProfileSchema } from './schemas/profile.schema';\nimport { HashSchema } from './schemas/hash.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'User', schema: UserSchema},\n      {name:'Profile', schema: ProfileSchema},\n      {name:'Hash', schema: HashSchema}\n    ])\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports:[UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteHashToken\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getfreshToken\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                getUserbyUsernameFilter\n                            \n                            \n                                    Async\n                                getUserProfileByUsername\n                            \n                            \n                                    Async\n                                updateOrCreateHashToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, profileModel: Model, hashModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHashToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHashToken(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getfreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getfreshToken(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string, UserInterface?: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    UserInterface\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserbyUsernameFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserbyUsernameFilter(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfileByUsername(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOrCreateHashToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOrCreateHashToken(_id: string, hashRefreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashRefreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { IHash } from './interface/hash.interface';\nimport { IProfile } from './interface/profile.interface';\nimport { IUser } from './interface/user.interface';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel('User') private userModel: Model,\n    @InjectModel('Profile') private profileModel: Model,\n    @InjectModel('Hash') private hashModel: Model\n  ) { }\n\n  async create(createUserDto: CreateUserDto, code:string) {\n    const profile = new this.profileModel({ ...createUserDto,branch:code });\n    await profile.save();\n\n    const profileId = profile._id.toString();\n\n    const user = new this.userModel({ ...createUserDto, profile: profileId });\n    await user.save();\n\n    return user;\n  }\n\n  async findAll(id:string) {\n    const users = await this.profileModel.find({branch:id});\n    return users;\n  }\n\n  async getUserbyUsernameFilter(username:string):Promise{\n\n    const user = await this.userModel.findOne({username});\n    if(user) return false;\n\n    return true;\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const user = await this.profileModel.findOne({ email }).select('+password');\n    return user;\n  }\n  async getUserByUsername(username: string): Promise {\n    const user = await this.userModel.findOne({ username }).select('+password');\n    return user;\n  }\n\n  async getUserProfileByUsername(id: string): Promise{\n    const profile = await this.profileModel.findOne({id});\n    return profile;\n  }\n\n  async getUserById(id: string, UserInterface?: IUser): Promise {\n    const user = await this.userModel.findOne({ _id: id })\n    .populate('profile')\n    .populate({path:'profile', populate:{path:'rolesBranch',model:'Roles',populate:{path:'permission', model:'Permission'}}})\n    .then(u => !UserInterface ? u : !!u && UserInterface.id === u.id ? u : null);\n\n    return user;\n  }\n\n  async updateOrCreateHashToken(_id: string, hashRefreshToken: string) {\n    try {\n      var hash = await this.hashModel.findOneAndUpdate({ user: _id }, {user:_id,hashRefreshToken, updatedAt:Date.now() }, { new: true });\n\n      if (!hash) {\n        hash = new this.hashModel({ user: _id, hashRefreshToken: hashRefreshToken });\n        await hash.save();\n      }\n\n      return hash;\n    } catch (e) {\n\n      const hash = new this.hashModel({ user: _id, hashRefreshToken: hashRefreshToken });\n      await hash.save();\n      return hash;\n    }\n  }\n\n  async getfreshToken(_id:string){\n    const token = await this.hashModel.findOne({user:_id});\n    return token;\n  }\n\n  async deleteHashToken(_id: string) {\n    const hash = await this.hashModel.findOneAndDelete({ user:  _id  });\n    return hash;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.roles.ts\n            \n            variable\n            roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/authenticated.guard.ts\n            \n            guard\n            AuthenticatedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/guest.guard.ts\n            \n            guard\n            GuestGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-local-auth.guard.ts\n            \n            injectable\n            JwtLocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-no-auth.guard.ts\n            \n            injectable\n            JwtNoAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/router.guard.ts\n            \n            guard\n            RouterGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/serializer/session.serializer.ts\n            \n            injectable\n            SessionSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            localStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/branch/branch.controller.ts\n            \n            controller\n            BranchController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/branch/branch.service.ts\n            \n            injectable\n            BranchService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/branch/dto/create-branch.dto.ts\n            \n            class\n            CreateBranchDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/branch/dto/update-branch.dto.ts\n            \n            class\n            UpdateBranchDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/branch/interface/branch.interface.ts\n            \n            interface\n            IBranch\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/branch/schemas/branch.schema.ts\n            \n            variable\n            BranchSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/branch.decorator.ts\n            \n            variable\n            Branch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/jwtSession.decorator.ts\n            \n            function\n            JWTSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/session.decorator.ts\n            \n            function\n            Session\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/hash.helper.ts\n            \n            class\n            HashHelper\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/common/helper/hash.helper.ts\n            \n            variable\n            CryptoJS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/regex.helper.ts\n            \n            class\n            regexHelper\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/helper/satinize.helper.ts\n            \n            class\n            sanitizeHelper\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/common/services/global.service.ts\n            \n            class\n            GlobalService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/refresh.type.ts\n            \n            interface\n            IUserHash\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permission/dto/create-permission.dto.ts\n            \n            class\n            CreatePermissionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/permission/dto/update-permission.dto.ts\n            \n            class\n            UpdatePermissionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permission/interface/permission.schema.ts\n            \n            interface\n            IPermisssion\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/permission/permission.controller.ts\n            \n            controller\n            PermissionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/permission/permission.service.ts\n            \n            injectable\n            PermissionService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/permission/schemas/permission.schema.ts\n            \n            variable\n            PermissionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/interface/roles.interface.ts\n            \n            interface\n            IRoles\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/schemas/roles.schema.ts\n            \n            variable\n            RolesSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/router/dto/create-router.dto.ts\n            \n            class\n            CreateRouterDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/router/dto/update-router.dto.ts\n            \n            class\n            UpdateRouterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/router/interface/router.interface.ts\n            \n            interface\n            IRouter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/router/router.controller.ts\n            \n            controller\n            RouterController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/router/router.service.ts\n            \n            injectable\n            RouterService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/router/schemas/router.schema.ts\n            \n            variable\n            RouterSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/dto/filter-user.dto.ts\n            \n            class\n            FilterUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interface/hash.interface.ts\n            \n            interface\n            IHash\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/interface/profile.interface.ts\n            \n            interface\n            IProfile\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/users/interface/refresh.interface.ts\n            \n            interface\n            IRefreshHash\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/interface/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/schemas/hash.schema.ts\n            \n            variable\n            HashSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/profile.schema.ts\n            \n            variable\n            ProfileSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/throttler : ^3.0.0\n        \n            argon2 : ^0.28.7\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.6\n        \n            crypto-js : ^4.1.1\n        \n            express-session : ^1.17.3\n        \n            helmet : ^5.1.1\n        \n            mongoose : ^6.5.3\n        \n            nest-access-control : ^2.2.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sanitize-html : ^2.7.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppResources   (src/.../app.roles.ts)\n                        \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                        \n                            ECrud   (src/.../crud.enum.ts)\n                        \n                        \n                            EMethod   (src/.../method.enum.ts)\n                        \n                        \n                            ERoles   (src/.../roles-status.enum.ts)\n                        \n                        \n                            EstatusBranch   (src/.../branch-status.enum.ts)\n                        \n                        \n                            EUserBlackList   (src/.../username-blacklist.enum.ts)\n                        \n                        \n                            statusUser   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppResources\n                    \n                \n                    \n                        \n                            Lista de rutas disponibles.\nLa ruta 'POST' esta de ejemplo\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                    \n                        \n                            Lista de roles dentro del sistema.\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/common/enum/crud.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ECrud\n                    \n                \n                        \n                            \n                                 YES\n                            \n                        \n                        \n                            \n                                Value : YES\n                            \n                        \n                        \n                            \n                                 NO\n                            \n                        \n                        \n                            \n                                Value : NO\n                            \n                        \n                        \n                            \n                                 OWNED\n                            \n                        \n                        \n                            \n                                Value : OWNED\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : ALL\n                            \n                        \n            \n        \n\n    src/common/enum/method.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EMethod\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n\n    src/common/enum/roles-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ERoles\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n            \n        \n\n    src/common/enum/branch-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EstatusBranch\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n                        \n                            \n                                 MAINTENANCE\n                            \n                        \n                        \n                            \n                                Value : MAINTENANCE\n                            \n                        \n            \n        \n\n    src/common/enum/username-blacklist.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EUserBlackList\n                    \n                \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/common/enum/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        statusUser\n                    \n                \n                        \n                            \n                                 WAITING\n                            \n                        \n                        \n                            \n                                Value : WAITING\n                            \n                        \n                        \n                            \n                                 NORMAL\n                            \n                        \n                        \n                            \n                                Value : NORMAL\n                            \n                        \n                        \n                            \n                                 BANNED\n                            \n                        \n                        \n                            \n                                Value : BANNED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            JWTSession   (src/.../jwtSession.decorator.ts)\n                        \n                        \n                            Session   (src/.../session.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n            \n                \nAuth(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorators/jwtSession.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWTSession\n                        \n                    \n                \n            \n            \n                \nJWTSession(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Session\n                        \n                    \n                \n            \n            \n                \nSession(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/localStrategy.html":{"url":"injectables/localStrategy.html","title":"injectable - localStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  localStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: any, username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class localStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: any, username: string, password: string) {\n    const user = await this.authService.validateUsername(username, password);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BranchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RouterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BranchModule\n\n\n\ncluster_BranchModule_providers\n\n\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_exports\n\n\n\ncluster_RouterModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBranchModule\n\nBranchModule\n\nAppModule -->\n\nBranchModule->AppModule\n\n\n\n\n\nPermissionModule\n\nPermissionModule\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRouterModule\n\nRouterModule\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\nRouterService \n\nRouterService \n\nRouterService  -->\n\nRouterModule->RouterService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nlocalStrategy\n\nlocalStrategy\n\nAuthModule -->\n\nlocalStrategy->AuthModule\n\n\n\n\n\nBranchService\n\nBranchService\n\nBranchModule -->\n\nBranchService->BranchModule\n\n\n\n\n\nPermissionService\n\nPermissionService\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nRouterService\n\nRouterService\n\nRouterModule -->\n\nRouterService->RouterModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/regexHelper.html":{"url":"classes/regexHelper.html","title":"class - regexHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  regexHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/regex.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                onlyNumbers\n                            \n                            \n                                    Static\n                                onlyNumbersPlusSpace\n                            \n                            \n                                    Static\n                                onlyText\n                            \n                            \n                                    Static\n                                onlyTextfirst3\n                            \n                            \n                                    Static\n                                phoneNumberValidator\n                            \n                            \n                                    Static\n                                rutValidar\n                            \n                            \n                                    Static\n                                specialCharacters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyNumbers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?!^\\d+$)^.+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyNumbersPlusSpace\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[+][0-9 ]+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyTextfirst3\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\d*(?:[a-zA-Z]){3,}\\d*/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        phoneNumberValidator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /((00)?(\\+)?\\d{1,3})[-\\s]+(\\d{1,3})[-\\s]+(\\d{4,10})/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        rutValidar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(\\d{1,3}(?:\\.\\d{1,3}){2}-[\\dkK])$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        specialCharacters\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z ,.'-/0-9]*$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class regexHelper {\n   public static onlyNumbers = /(?!^\\d+$)^.+$/;\n   public static specialCharacters = /^[a-z ,.'-/0-9]*$/;\n   public static onlyTextfirst3 = /\\d*(?:[a-zA-Z]){3,}\\d*/;\n   public static onlyText = /^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$/;\n   public static phoneNumberValidator = /((00)?(\\+)?\\d{1,3})[-\\s]+(\\d{1,3})[-\\s]+(\\d{4,10})/;\n   public static onlyNumbersPlusSpace = /^[+][0-9 ]+$/;\n   public static rutValidar = /^(\\d{1,3}(?:\\.\\d{1,3}){2}-[\\dkK])$/;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/sanitizeHelper.html":{"url":"classes/sanitizeHelper.html","title":"class - sanitizeHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  sanitizeHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/satinize.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                satinizeOnlyScripts\n                            \n                            \n                                    Static\n                                satonizeALL\n                            \n                            \n                                    Static\n                                satonizeALLArray\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satinizeOnlyScripts\n                        \n                    \n                \n            \n            \n                \n                    \n                    satinizeOnlyScripts(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:20\n                \n            \n\n\n            \n                \n                    Satinizador de texto, solo scripts\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string, Retorna texto sin scripts y sin su contenido\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satonizeALL\n                        \n                    \n                \n            \n            \n                \n                    \n                    satonizeALL(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:10\n                \n            \n\n\n            \n                \n                    Satinizador de texto total\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Promise Retorna texto Satinizado\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satonizeALLArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    satonizeALLArray(str: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:29\n                \n            \n\n\n            \n                \n                    Satinizador de array de textos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Promise Retorna texto Satinizado\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as sanitizeHtml from 'sanitize-html';\n\nexport class sanitizeHelper {\n\n      /**\n   * Satinizador de texto total\n   * @param str {string}\n   * @returns Promise Retorna texto Satinizado\n   */\n  public static satonizeALL(str: string):string {\n    return  sanitizeHtml(str,{ allowedTags: [],  allowedAttributes: {}, disallowedTagsMode: 'discard'});\n  }\n\n\n  /**\n   * Satinizador de texto, solo scripts\n   * @param str \n   * @returns string, Retorna texto sin scripts y sin su contenido\n   */\n  public static satinizeOnlyScripts(str:string):string{\n    return sanitizeHtml(str);\n  }\n\n      /**\n   * Satinizador de array de textos\n   * @param str {string[]}\n   * @returns Promise Retorna texto Satinizado\n   */\n  public static satonizeALLArray(str: string[]):string[] {\n    let value = [];\n    str.forEach((i)=>{\n      value.push(sanitizeHtml(i,{ allowedTags: [],  allowedAttributes: {}, disallowedTagsMode: 'discard'}));\n    });\n    \n      return value;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Branch   (src/.../branch.decorator.ts)\n                        \n                        \n                            BranchSchema   (src/.../branch.schema.ts)\n                        \n                        \n                            CryptoJS   (src/.../hash.helper.ts)\n                        \n                        \n                            HashSchema   (src/.../hash.schema.ts)\n                        \n                        \n                            MongoStore   (src/.../main.ts)\n                        \n                        \n                            PermissionSchema   (src/.../permission.schema.ts)\n                        \n                        \n                            ProfileSchema   (src/.../profile.schema.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            RolesSchema   (src/.../roles.schema.ts)\n                        \n                        \n                            RouterSchema   (src/.../router.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/branch.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Branch\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    async (data:string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        const branch = request.headers.code;    \n        if(!branch) throw new BadRequestException();\n        const id =  await HashHelper.decryptToken(branch);\n\n        if(!id) throw new UnauthorizedException('No se encuentra autorizado');\n        if(!mongoose.Types.ObjectId.isValid(id)) throw new UnauthorizedException('No se encuentra autorizado');\n        return id;\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/branch/schemas/branch.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BranchSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    name:{type:String, require},\n    user:{ type: mongoose.Types.ObjectId, ref:'User' },\n    token:{type:String },\n    createdAt: { type: Date, default: Date.now },\n    status: {type:String, enum:EstatusBranch, required: true, default: EstatusBranch.ACTIVE}\n})\n                    \n                \n\n\n        \n    \n\n    src/common/helper/hash.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CryptoJS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"crypto-js\")\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/hash.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HashSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    user:{ type: mongoose.Types.ObjectId, ref:'User' },\n    updatedAt: { type: Date, default: Date.now },\n    hashRefreshToken: {type:String, required: true}\n})\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('connect-mongo')\n                    \n                \n\n\n        \n    \n\n    src/permission/schemas/permission.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    router:{ type:String}, //TODO: ENUM ROUTER LIST\n    method:{ type:String, enum:EMethod, required:true},\n    name:{ type:String, required:true },\n    enable:{ type:Boolean, required:true},\n    branch: { type:mongoose.Types.ObjectId, ref:'Branch', required:true}\n})\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/profile.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProfileSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n   // user: { type: mongoose.Types.ObjectId, ref:'User', required:true },\n    name: { type: String, required: true },\n    lastName: { type: String, required: true },\n    roles: { type: [String], required: true, enum: AppRoles, default: AppRoles.USER },\n    branch:    {type:mongoose.Types.ObjectId, ref:'Branch', required:true},\n    //revisar\n    rolesBranch:   [{type:mongoose.Types.ObjectId, ref:'Roles', required:true}],\n    rut:{type:String, required:true},\n    status: { type: String, enum: statusUser, default: statusUser.WAITING },\n    picture:{ type:String},\n    email: { type: String, required: true },\n    phone:{ type:String, required: true},\n    career:{ type:String, required:true},\n    themesInterest: {type:[String], required:true},\n    semesterProgress:{type:Number, min:1, max:8, required:true},\n    lastLogin: {type: Date, default:Date.now, required:true}\n\n})\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic',true)\n                    \n                \n\n\n        \n    \n\n    src/app.roles.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RolesBuilder\n\n                    \n                \n                \n                    \n                        Default value : new RolesBuilder()\n                    \n                \n\n\n        \n    \n\n    src/roles/schemas/roles.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RolesSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    name:{ type:String, required:true},\n    status:{ type:String, enum:ERoles, default: ERoles.ACTIVE},\n    branch: { type:mongoose.Types.ObjectId, ref:'Branch', required:true},\n    permission:[{type:mongoose.Types.ObjectId, ref:'Permission'}]\n})\n                    \n                \n\n\n        \n    \n\n    src/router/schemas/router.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RouterSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    name:   {type:String},\n    router: { type:String, required:true},\n    method: { type:String, required:true},\n    status:{ type:Boolean, required:true, default:true},\n    branch:{ type:mongoose.Types.ObjectId, ref:'Branch'},\n\n    \n})\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data:string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        const user = request.user;\n\n        return data ? user && user[data] : user;\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    username: { type: String, required: true },\n    profile:{type: mongoose.Types.ObjectId, ref:'Profile'},\n    hash:{type: mongoose.Types.ObjectId, ref:'Hash'},\n    password: { type: String, required: true, select: false },\n    createdAt: { type: Date, default: Date.now },\n    verified: { type: Boolean, default: false },\n}).pre(\"save\", async function (next) {\n\n    if (!this.isModified('password')) return next();\n    this.password = await HashHelper.encrypt(this.password);\n\n    return next();\n\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
