var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.616,1,2.735]],["body/controllers/AppController.html",[0,1.637,1,2.77,2,1.069,3,0.105,4,0.093,5,0.093,6,2.205,7,0.222,8,0.941,9,2.769,10,4.956,11,3.903,12,4.103,13,3.903,14,3.903,15,2.645,16,0.016,17,2.549,18,0.982,19,2.549,20,1.381,21,2.403,22,2.549,23,3.222,24,6.058,25,6.289,26,2.205,27,2.549,28,2.549,29,1.282,30,0.911,31,0.523,32,1.282,33,2.408,34,2.549,35,2.549,36,2.549,37,3.681,38,2.549,39,2.549,40,2.549,41,2.549,42,3.772,43,2.549,44,2.549,45,0.465,46,1.381,47,2.205,48,1.465,49,2.549,50,2.205,51,1.561,52,1.561,53,0.457,54,2.905,55,2.205,56,1.809,57,1.809,58,1.809,59,2.549,60,2.563,61,2.563,62,1.978,63,2.549,64,1.809,65,4.743,66,1.674,67,3.376,68,2.726,69,2.549,70,1.561,71,1.121,72,1.809,73,2.549,74,1.809,75,2.549,76,1.978,77,2.549,78,1.674,79,0.105,80,0.015,81,1.238,82,2.243,83,1.022,84,2.549,85,2.549,86,2.549,87,1.381,88,2.549,89,2.549,90,2.229,91,2.549,92,1.674,93,2.549,94,1.674,95,2.549,96,2.549,97,2.549,98,2.549,99,1.43,100,4.125,101,2.549,102,3.903,103,3.903,104,3.903,105,3.903,106,3.903,107,2.114,108,3.903,109,2.549,110,3.903,111,2.549,112,2.549,113,1.978,114,2.549,115,2.549,116,2.549,117,1.561,118,2.205,119,2.549,120,2.205,121,2.549,122,2.549,123,2.549,124,2.549,125,2.549,126,1.306,127,2.549,128,0.008,129,0.008]],["title/modules/AppModule.html",[130,1.543,131,2.735]],["body/modules/AppModule.html",[1,3.897,2,1.968,3,0.134,4,0.119,5,0.119,16,0.016,45,0.5,53,0.585,54,4.053,55,2.826,79,0.134,80,0.02,126,1.673,128,0.009,129,0.009,130,1.879,131,5.44,132,1.587,133,2.28,134,2.826,135,2.826,136,2.826,137,4.345,138,4.345,139,4.345,140,4.345,141,4.345,142,4.053,143,2.542,144,1.769,145,1.769,146,3.267,147,2.697,148,2.697,149,2.826,150,2.536,151,2.001,152,1.509,153,3.267,154,2.536,155,2.319,156,2.826,157,3.267,158,3.267,159,3.267,160,1.587,161,3.267,162,3.267,163,2.826,164,2.001,165,2.826,166,2.536,167,3.267,168,3.267,169,3.267,170,4.693,171,3.267,172,2.826,173,4.693,174,2.319,175,3.267,176,3.267,177,2.826,178,3.267,179,3.267,180,3.267,181,3.267,182,3.267,183,3.267,184,3.267,185,3.267,186,3.267,187,3.267,188,3.267,189,3.267,190,3.267,191,3.267]],["title/injectables/AppService.html",[54,2.36,192,0.603]],["body/injectables/AppService.html",[3,0.221,4,0.196,5,0.196,7,0.468,8,1.576,16,0.016,18,0.922,20,1.297,45,0.353,53,0.964,54,4.004,79,0.221,80,0.033,87,1.297,128,0.013,129,0.013,192,1.023,193,1.887,194,4.654,195,7.323,196,5.381,197,1.278,198,5.381,199,5.381]],["title/modules/AuthModule.html",[130,1.543,137,2.531]],["body/modules/AuthModule.html",[3,0.149,4,0.132,5,0.132,16,0.016,45,0.483,53,0.648,61,2.376,68,4.316,71,1.591,79,0.149,80,0.022,94,3.312,126,1.853,128,0.01,129,0.01,130,2.02,132,1.758,133,2.45,137,5.078,142,4.191,143,2.732,144,1.96,145,1.96,147,2.899,148,2.899,149,3.13,150,2.808,177,3.13,200,3.13,201,3.13,202,3.618,203,3.13,204,4.493,205,4.493,206,4.493,207,4.493,208,3.618,209,3.915,210,3.618,211,2.808,212,5.044,213,3.618,214,3.13,215,3.618,216,3.618,217,3.618,218,3.618,219,5.044,220,3.618,221,3.618,222,3.13,223,2.808,224,3.618,225,3.13,226,3.618]],["title/injectables/AuthService.html",[68,2.215,192,0.603]],["body/injectables/AuthService.html",[3,0.095,4,0.085,5,0.085,7,0.202,8,0.876,9,2.787,10,3.141,12,3.141,16,0.016,18,1.042,20,1.403,21,1.875,23,3.114,29,1.466,30,1.042,31,0.67,32,1.466,33,2.328,45,0.36,52,1.422,53,0.416,68,2.087,79,0.095,80,0.014,81,1.764,82,2.087,83,0.608,87,1.323,90,2.912,99,2.423,117,1.422,128,0.007,129,0.007,160,2.172,192,0.568,193,0.815,197,1.469,211,1.802,222,3.141,223,1.802,225,3.141,227,2.008,228,3.631,229,5.019,230,3.631,231,3.631,232,1.802,233,2.59,234,6.08,235,2.322,236,2.818,237,3.631,238,2.322,239,4.515,240,1.802,241,3.631,242,2.322,243,3.631,244,2.322,245,3.631,246,2.322,247,3.631,248,2.322,249,3.631,250,2.739,251,2.322,252,1.334,253,2.577,254,2.322,255,1.525,256,1.422,257,2.008,258,1.802,259,2.322,260,3.361,261,2.413,262,2.322,263,1.525,264,1.525,265,2.008,266,2.008,267,2.322,268,2.322,269,3.631,270,2.818,271,2.322,272,1.648,273,2.739,274,3.097,275,3.321,276,5.057,277,3.631,278,3.631,279,3.631,280,5.057,281,2.322,282,4.472,283,3.47,284,2.322,285,2.322,286,3.631,287,2.322,288,3.631,289,2.322,290,3.631,291,2.577,292,2.322,293,2.008,294,2.322,295,2.322,296,2.322,297,2.322,298,2.322]],["title/guards/AuthenticatedGuard.html",[299,2.735,300,2.991]],["body/guards/AuthenticatedGuard.html",[3,0.207,4,0.184,5,0.184,7,0.439,8,1.515,16,0.016,18,0.865,20,1.217,29,1.217,30,0.865,31,0.556,32,1.217,45,0.412,48,2.9,53,0.904,79,0.207,80,0.031,87,1.217,99,1.849,128,0.013,129,0.013,192,0.984,300,4.877,301,3.581,302,4.365,303,5.083,304,4.459,305,3.879,306,5.046,307,3.581,308,3.581,309,3.314,310,3.916,311,3.581,312,4.365]],["title/controllers/BranchController.html",[0,1.616,313,2.735]],["body/controllers/BranchController.html",[0,1.562,2,1.562,3,0.153,4,0.136,5,0.136,7,0.324,8,1.241,15,2.937,16,0.016,18,1.091,20,1.534,29,1.422,30,1.011,31,0.65,32,1.422,45,0.417,46,3.194,51,3.153,53,0.668,79,0.153,80,0.023,83,0.976,87,1.534,107,2.018,128,0.01,129,0.01,197,1.35,313,3.653,314,3.223,315,2.446,316,1.81,317,1.971,318,3.09,319,2.501,320,2.501,321,3.223,322,4.229,323,3.725,324,3.725,325,1.81,326,3.38,327,3.725,328,3.09,329,1.81,330,4.736,331,3.38,332,3.725,333,2.141,334,2.141,335,3.612,336,3.223,337,1.81,338,3.995,339,1.81,340,3.725,341,1.908,342,2.644,343,3.725,344,3.725,345,2.446,346,3.725,347,2.446,348,3.725]],["title/modules/BranchModule.html",[130,1.543,138,2.531]],["body/modules/BranchModule.html",[2,2.537,3,0.195,4,0.173,5,0.173,16,0.016,45,0.474,53,0.851,79,0.195,80,0.029,128,0.012,129,0.012,130,2.423,132,2.308,133,2.939,138,4.858,143,3.277,144,2.573,145,2.573,147,3.477,148,2.73,151,2.91,152,2.194,313,4.724,335,4.531,336,4.11,349,4.11,350,4.11,351,4.751,352,4.751,353,4.695,354,4.751,355,3.12,356,4.751,357,3.12]],["title/injectables/BranchService.html",[192,0.603,335,2.36]],["body/injectables/BranchService.html",[3,0.132,4,0.117,5,0.117,7,0.28,8,1.12,9,2.816,16,0.016,18,1.084,20,1.438,21,2.501,29,1.438,30,1.022,31,0.657,32,1.438,45,0.456,53,0.577,79,0.132,80,0.02,81,2.257,82,2.67,83,0.844,87,1.438,90,2.651,99,2.316,128,0.009,129,0.009,152,1.487,192,0.727,193,1.13,197,1.287,255,2.115,256,1.973,261,1.416,316,3.199,317,1.778,318,2.897,319,2.257,320,2.257,321,4.018,322,3.872,325,2.257,328,2.257,329,2.257,330,4.458,335,2.845,337,1.565,338,3.605,339,1.565,358,2.786,359,3.221,360,4.232,361,3.424,362,3.221,363,4.645,364,3.221,365,3.221,366,3.221,367,3.221,368,2.286,369,1.351,370,2.786,371,1.745,372,3.221,373,3.221,374,2.786,375,2.286,376,3.221,377,3.221,378,3.221,379,3.221,380,4.645,381,3.221,382,3.221,383,3.221]],["title/classes/CreateBranchDto.html",[80,0.023,322,2.36]],["body/classes/CreateBranchDto.html",[3,0.119,4,0.106,5,0.106,7,0.253,15,2.372,16,0.016,18,0.881,30,0.739,31,0.566,33,1.651,45,0.398,79,0.119,80,0.031,83,1.806,92,4.609,117,4.299,128,0.009,129,0.009,197,1.11,256,1.782,263,3.373,264,2.831,322,2.641,384,1.066,385,4.914,386,2.258,387,1.332,388,2.495,389,2.064,390,6.234,391,5.168,392,3.06,393,4.137,394,2.064,395,4.032,396,2.064,397,4.793,398,4.032,399,3.06,400,2.064,401,3.06,402,2.478,403,2.064,404,3.346,405,4.409,406,3.346,407,2.258,408,3.346,409,2.909,410,2.909,411,2.909,412,2.831,413,4.312,414,2.516,415,2.909,416,2.909,417,4.312,418,2.909,419,3.73,420,2.909,421,2.909,422,3.346,423,1.49,424,4.032,425,1.91,426,2.258,427,2.258,428,3.73,429,2.831,430,2.258,431,2.064,432,2.064,433,1.782,434,2.516,435,2.909,436,1.782,437,1.672,438,1.782,439,3.06,440,2.064,441,3.06,442,2.064,443,2.495,444,3.646,445,4.312,446,2.258,447,2.258,448,2.258,449,1.782,450,2.909,451,2.516,452,2.909,453,2.909]],["title/classes/CreatePermissionDto.html",[80,0.023,454,2.36]],["body/classes/CreatePermissionDto.html",[3,0.244,4,0.216,5,0.216,16,0.015,79,0.244,80,0.036,128,0.014,129,0.014,384,2.175,454,4.245,455,5.135,456,4.607]],["title/classes/CreateRoleDto.html",[80,0.023,457,2.36]],["body/classes/CreateRoleDto.html",[3,0.135,4,0.12,5,0.12,7,0.286,15,2.546,16,0.016,18,0.945,30,0.809,31,0.607,45,0.418,79,0.135,80,0.033,83,1.863,92,4.356,128,0.009,129,0.009,197,1.078,256,2.015,264,3.097,369,1.978,384,1.205,387,1.457,388,2.291,389,2.335,391,4.96,392,3.347,393,3.688,394,2.335,395,3.347,396,2.335,397,4.273,398,4.273,399,3.347,400,2.335,401,3.347,402,2.711,403,2.335,412,4.672,424,4.273,425,2.161,426,2.554,427,2.554,428,3.62,429,3.097,431,2.335,432,2.335,433,2.015,437,1.891,438,2.015,439,2.335,440,2.335,441,3.347,442,2.335,443,2.678,444,3.913,449,2.015,451,2.846,457,2.889,458,5.209,459,2.554,460,3.913,461,6.045,462,3.29,463,3.29,464,4.717,465,4.717,466,3.29,467,3.29,468,4.08,469,3.29,470,3.29,471,3.29,472,4.08,473,2.846,474,3.29,475,3.29,476,3.29,477,3.29]],["title/classes/CreateRouterDto.html",[80,0.023,478,2.36]],["body/classes/CreateRouterDto.html",[3,0.216,4,0.192,5,0.192,7,0.457,15,2.428,16,0.016,18,0.901,31,0.579,45,0.345,79,0.216,80,0.039,83,1.825,128,0.013,129,0.013,197,1.26,316,3.386,384,1.926,387,1.991,427,5.002,428,4.232,429,3.453,433,3.22,478,3.948,479,5.575,480,4.08,481,5.258,482,5.258]],["title/classes/CreateUserDto.html",[80,0.023,483,2.36]],["body/classes/CreateUserDto.html",[3,0.054,4,0.048,5,0.048,7,0.114,15,2.501,16,0.016,18,0.928,30,0.511,31,0.597,45,0.263,79,0.054,80,0.018,83,1.883,92,4.56,117,1.384,126,0.669,128,0.005,129,0.005,160,0.635,197,1.218,250,1.827,252,1.715,256,1.384,263,3.776,264,1.483,265,3.074,266,3.074,273,2.379,274,1.827,384,0.479,387,0.698,388,0.635,389,2.522,390,1.13,391,5.177,392,3.117,393,4.02,394,2.117,395,3.117,396,0.927,397,4.657,398,3.535,399,1.603,400,0.927,401,3.117,402,3.846,403,0.927,404,1.753,405,2.758,406,3.115,407,1.014,408,3.866,412,4.872,414,1.954,419,3.8,422,2.758,423,0.669,424,3.844,425,0.858,428,3.424,429,3.271,430,1.014,431,0.927,432,0.927,433,0.8,436,0.8,437,0.751,438,2.458,439,2.117,440,0.927,441,3.97,442,0.927,443,2.533,444,3.343,446,1.014,447,1.014,448,3.115,461,3.8,472,1.13,483,1.384,484,4.839,485,0.927,486,1.753,487,2.117,488,2.315,489,1.753,490,3.8,491,1.954,492,1.753,493,2.259,494,1.307,495,1.307,496,1.307,497,1.307,498,4.393,499,3.553,500,2.259,501,1.307,502,1.307,503,2.983,504,1.307,505,5.416,506,4.393,507,4.393,508,4.393,509,1.307,510,1.307,511,2.259,512,5.416,513,4.981,514,5.416,515,5.416,516,4.393,517,4.393,518,5.416,519,1.307,520,2.259,521,2.259,522,1.753,523,2.758,524,1.307,525,3.553,526,3.074,527,1.307,528,1.307,529,2.259,530,3.553,531,3.553,532,1.307,533,2.983,534,1.307,535,0.708,536,1.307,537,1.954,538,3.553,539,3.553,540,1.307,541,2.259,542,2.259,543,1.307,544,1.307,545,1.307,546,2.259,547,1.307,548,1.307,549,1.13,550,1.954,551,1.753,552,1.954,553,1.954,554,1.13,555,1.307,556,1.307,557,2.983,558,2.259,559,1.307,560,1.307,561,3.8,562,1.13,563,1.13,564,1.307,565,1.307,566,1.307,567,1.307,568,1.307,569,1.307,570,1.307,571,1.13,572,1.307,573,1.13,574,1.307,575,1.307,576,1.307,577,1.307,578,1.13,579,1.307,580,1.307,581,1.13,582,1.307,583,1.307,584,1.13,585,1.954,586,1.307,587,1.954,588,1.307,589,1.307,590,0.927,591,0.8,592,1.014,593,0.708]],["title/classes/FilterUserDto.html",[80,0.023,594,2.735]],["body/classes/FilterUserDto.html",[3,0.136,4,0.121,5,0.121,7,0.289,15,1.534,16,0.016,18,0.569,31,0.366,45,0.419,79,0.136,80,0.034,83,1.451,92,4.683,128,0.01,129,0.01,197,0.649,256,2.909,263,4.857,264,3.118,273,2.572,384,1.217,387,1.467,389,2.358,391,4.972,392,3.37,393,3.704,394,2.358,395,3.37,396,2.358,397,4.972,398,4.292,399,3.37,400,2.358,401,3.37,402,3.476,403,2.358,404,3.686,405,4.694,406,3.686,407,2.578,408,3.686,412,4.751,422,3.686,423,1.702,424,3.37,425,2.181,426,2.578,428,3.118,429,3.118,430,2.578,431,2.358,432,2.358,433,2.035,436,2.035,437,1.909,438,2.035,439,2.358,440,2.358,441,3.934,442,2.358,443,1.614,444,2.358,446,2.578,447,2.578,448,4.302,485,2.358,523,3.686,549,2.874,550,4.108,551,3.686,552,4.108,553,4.108,554,2.874,561,4.108,562,2.874,563,2.874,594,3.37,595,4.108,596,4.749,597,3.322,598,3.322,599,3.322]],["title/classes/GlobalService.html",[80,0.023,600,2.735]],["body/classes/GlobalService.html",[3,0.151,4,0.134,5,0.134,7,0.32,16,0.016,18,0.874,31,0.562,46,2.762,79,0.151,80,0.022,107,2.762,128,0.01,129,0.01,164,4.211,166,6.077,333,2.931,384,1.347,387,1.576,443,1.786,600,3.619,601,3.18,602,6.644,603,5.856,604,3.676,605,2.609,606,5.142,607,5.1,608,6.325,609,6.876,610,5.1,611,6.325,612,5.1,613,3.676]],["title/guards/GuestGuard.html",[56,2.735,299,2.735]],["body/guards/GuestGuard.html",[3,0.21,4,0.187,5,0.187,7,0.445,8,1.529,16,0.016,18,0.878,20,1.235,29,1.235,30,0.878,31,0.564,32,1.235,45,0.336,48,2.943,53,0.918,56,4.5,79,0.21,80,0.031,87,1.235,99,1.876,128,0.013,129,0.013,192,0.993,301,3.634,303,5.109,304,4.5,305,3.899,307,3.634,310,3.975,311,3.634,312,4.43,593,2.774,614,4.43,615,5.121]],["title/classes/HashHelper.html",[80,0.023,255,2.531]],["body/classes/HashHelper.html",[3,0.114,4,0.101,5,0.101,7,0.242,8,1.007,9,2.734,16,0.016,18,1.072,20,1.563,21,1.168,29,1.341,30,0.953,31,0.656,32,1.341,45,0.274,79,0.114,80,0.017,82,2.877,87,1.436,90,2.1,99,1.021,126,2.138,128,0.008,129,0.008,164,4.592,197,1.48,253,4.928,255,2.741,334,2.877,384,1.021,387,1.29,393,2.557,412,3.652,438,4.253,443,1.353,522,3.24,535,1.509,593,2.261,605,1.977,616,2.162,617,5.007,618,4.175,619,4.175,620,4.175,621,2.963,622,5.561,623,4.175,624,2.786,625,4.175,626,5.956,627,2.786,628,4.175,629,6.253,630,3.611,631,5.561,632,5.409,633,4.81,634,4.175,635,4.175,636,4.175,637,2.786,638,5.561,639,2.786,640,4.175,641,2.786,642,4.175,643,4.175,644,4.175,645,2.786,646,2.786,647,2.786,648,2.41,649,3.611,650,2.162,651,2.41,652,3.911,653,2.786,654,2.786,655,2.786,656,2.786,657,2.786,658,2.786,659,2.786]],["title/interfaces/IBranch.html",[371,2.087,660,1.242]],["body/interfaces/IBranch.html",[3,0.191,4,0.169,5,0.169,7,0.403,16,0.016,23,3.372,30,1.128,31,0.791,33,2.52,45,0.391,79,0.191,83,1.881,128,0.012,129,0.012,197,1.48,257,4.013,369,1.946,371,3.227,375,4.929,387,1.841,388,3.374,449,2.842,590,4.929,591,4.032,660,1.495,661,2.254,662,4.013,663,1.766,664,3.783,665,3.601]],["title/interfaces/IHash.html",[660,1.242,666,2.531]],["body/interfaces/IHash.html",[3,0.2,4,0.177,5,0.177,7,0.423,16,0.016,23,3.448,31,0.742,33,2.577,45,0.403,79,0.2,83,1.909,128,0.012,129,0.012,197,1.316,369,2.042,387,1.898,591,3.763,621,5.018,660,1.569,661,2.365,663,1.821,664,3.869,665,3.778,666,4.034,667,4.211,668,5.823,669,4.868,670,4.868,671,4.868,672,4.868]],["title/interfaces/IPermisssion.html",[660,1.242,673,2.735]],["body/interfaces/IPermisssion.html",[3,0.176,4,0.156,5,0.156,7,0.373,16,0.016,30,1.087,31,0.821,45,0.371,79,0.176,83,1.951,128,0.011,129,0.011,197,1.525,316,3.08,369,1.8,371,3.434,387,1.75,449,2.63,606,4.163,660,1.383,661,2.085,663,1.679,664,3.644,673,4.02,674,3.714,675,5.484,676,5.484,677,5.484,678,5.484,679,4.163,680,3.047,681,4.293,682,4.293,683,4.293,684,4.293,685,4.293,686,4.293,687,3.714]],["title/interfaces/IProfile.html",[660,1.242,688,2.531]],["body/interfaces/IProfile.html",[3,0.149,4,0.132,5,0.132,7,0.314,16,0.016,30,0.995,31,0.839,45,0.381,79,0.149,83,1.995,128,0.01,129,0.01,160,2.821,197,1.532,316,2.821,369,1.517,371,3.145,387,1.558,388,3.052,449,2.216,486,4.507,487,4.121,488,4.507,489,4.507,490,5.023,491,5.023,492,4.507,535,2.732,571,3.13,573,3.13,578,3.13,581,3.13,584,3.13,591,3.09,660,1.166,661,1.758,663,1.495,664,3.337,680,2.568,687,3.13,688,3.312,689,3.13,690,5.023,691,5.023,692,5.023,693,3.557,694,3.13,695,3.618,696,3.618,697,3.618,698,3.618,699,3.618,700,3.618]],["title/interfaces/IRefreshHash.html",[72,2.735,660,1.242]],["body/interfaces/IRefreshHash.html",[3,0.206,4,0.183,5,0.183,7,0.437,16,0.015,31,0.788,72,4.449,79,0.206,83,1.873,128,0.013,129,0.013,197,1.467,229,5.551,291,5.076,387,1.937,535,4.065,660,1.62,661,2.442,701,4.349,702,7.153,703,7.153]],["title/interfaces/IRoles.html",[660,1.242,693,2.36]],["body/interfaces/IRoles.html",[3,0.194,4,0.172,5,0.172,7,0.41,16,0.016,30,1.137,31,0.77,45,0.435,79,0.194,83,1.83,128,0.012,129,0.012,197,1.366,316,3.395,369,1.979,371,3.786,387,1.861,388,3.223,449,2.89,460,4.96,660,1.52,661,2.292,663,1.785,664,3.813,673,4.96,680,3.349,693,3.689,704,4.082,705,4.719,706,4.719]],["title/interfaces/IRouter.html",[660,1.242,707,2.735]],["body/interfaces/IRouter.html",[3,0.196,4,0.174,5,0.174,7,0.414,16,0.016,31,0.773,45,0.397,79,0.196,83,1.837,128,0.012,129,0.012,197,1.447,316,3.408,369,1.999,371,3.8,387,1.873,388,3.408,593,3.611,606,4.607,660,1.536,661,2.316,663,1.797,664,3.831,679,4.607,680,3.383,707,4.303,708,4.124]],["title/interfaces/IUser.html",[23,1.974,660,1.242]],["body/interfaces/IUser.html",[3,0.18,4,0.16,5,0.16,7,0.381,16,0.016,23,2.944,31,0.798,45,0.446,79,0.18,83,1.849,128,0.012,129,0.012,197,1.329,250,3.926,252,3.683,283,5.278,369,2.41,387,1.776,590,4.548,591,3.52,592,4.974,593,3.113,660,1.414,661,2.132,663,1.704,664,3.683,666,4.465,688,4.208,693,2.688,694,3.796,709,3.796,710,4.974,711,4.389,712,4.389,713,4.389,714,4.389,715,4.389,716,4.389,717,4.389]],["title/interfaces/IUserHash.html",[42,2.735,660,1.242]],["body/interfaces/IUserHash.html",[3,0.224,4,0.198,5,0.198,7,0.473,16,0.015,31,0.725,42,4.672,79,0.224,83,1.724,128,0.013,129,0.013,197,1.437,291,5.022,375,5.022,387,2.034,660,1.754,661,2.645,718,4.709,719,5.444,720,5.444]],["title/injectables/JwtAuthGuard.html",[57,2.735,192,0.603]],["body/injectables/JwtAuthGuard.html",[3,0.286,4,0.17,5,0.17,7,0.405,8,1.44,16,0.016,18,0.798,20,1.122,29,1.122,30,0.798,31,0.513,32,1.122,33,2.753,45,0.456,52,2.851,53,0.834,57,4.238,70,2.851,71,2.047,79,0.191,80,0.028,87,1.122,128,0.012,129,0.012,174,3.304,192,0.935,193,1.633,260,2.851,261,2.047,272,3.304,273,2.521,274,2.851,275,3.057,305,2.521,308,3.304,309,3.057,663,1.38,721,3.657,722,3.057,723,4.634,724,4.634,725,4.655,726,4.238,727,4.027,728,3.613,729,4.027]],["title/injectables/JwtLocalAuthGuard.html",[64,2.735,192,0.603]],["body/injectables/JwtLocalAuthGuard.html",[3,0.229,4,0.203,5,0.203,16,0.016,45,0.438,53,0.999,64,4.74,66,3.662,70,3.416,71,2.452,79,0.229,80,0.034,128,0.013,129,0.013,192,1.045,193,1.956,305,3.02,663,1.653,721,3.416,722,3.662,730,4.824]],["title/injectables/JwtNoAuthGuard.html",[78,2.531,192,0.603]],["body/injectables/JwtNoAuthGuard.html",[3,0.287,4,0.172,5,0.172,7,0.41,8,1.452,16,0.016,18,0.809,20,1.138,29,1.138,30,0.809,31,0.52,32,1.138,33,2.676,45,0.458,52,2.89,53,0.846,70,2.89,71,2.075,78,3.955,79,0.194,80,0.029,87,1.138,128,0.012,129,0.012,174,3.349,192,0.943,193,1.655,260,2.89,261,2.075,272,3.349,273,2.556,274,2.89,275,3.099,305,2.556,308,3.349,309,3.099,663,1.399,721,3.689,722,3.099,723,4.675,724,4.675,726,3.349,727,4.082,728,3.662,731,4.719,732,4.082]],["title/injectables/JwtRefreshGuard.html",[74,2.735,192,0.603]],["body/injectables/JwtRefreshGuard.html",[3,0.289,4,0.176,5,0.176,7,0.419,8,1.472,16,0.016,18,0.826,20,1.162,29,1.162,30,0.826,31,0.531,32,1.162,33,2.782,45,0.4,52,2.951,53,0.863,70,2.951,71,2.118,74,4.331,79,0.198,80,0.029,87,1.162,128,0.012,129,0.012,192,0.955,193,1.69,260,2.951,261,2.118,272,3.419,273,2.609,274,2.951,275,3.163,663,1.428,721,3.738,723,4.737,724,4.737,726,4.331,728,3.739,729,4.167,733,4.167,734,4.817,735,4.167]],["title/injectables/JwtStrategy.html",[192,0.603,204,2.531]],["body/injectables/JwtStrategy.html",[3,0.181,4,0.16,5,0.16,7,0.383,8,1.389,9,2.458,16,0.016,18,0.987,20,1.062,21,1.846,29,1.389,30,0.987,31,0.635,32,1.389,45,0.446,53,0.789,71,1.936,79,0.181,80,0.027,81,2.139,87,1.062,90,1.846,94,2.891,99,1.613,128,0.012,129,0.012,192,0.902,193,1.544,204,3.782,223,3.417,232,3.417,233,3.488,236,4.47,239,3.417,258,3.417,291,3.124,341,2.255,663,1.305,736,3.808,737,4.47,738,4.403,739,5.759,740,4.403,741,4.982,742,3.417,743,3.808,744,3.417,745,3.124,746,3.808,747,3.417,748,3.808,749,4.403,750,3.808,751,4.403]],["title/injectables/LocalAuthGuard.html",[58,2.735,192,0.603]],["body/injectables/LocalAuthGuard.html",[3,0.198,4,0.176,5,0.176,7,0.419,8,1.472,9,2.565,16,0.016,18,0.826,20,1.162,21,2.02,29,1.162,30,0.826,31,0.531,32,1.162,45,0.4,48,2.769,53,0.863,58,4.331,70,2.951,71,2.118,79,0.198,80,0.029,87,1.162,90,2.559,99,2.236,128,0.012,129,0.012,192,0.955,193,1.69,303,4.331,304,4.331,305,3.815,307,3.419,311,3.419,593,2.609,663,1.428,722,3.163,730,4.167,752,5.279,753,4.817,754,5.279,755,4.817,756,4.817]],["title/controllers/PermissionController.html",[0,1.616,757,2.735]],["body/controllers/PermissionController.html",[0,1.46,2,1.46,3,0.143,4,0.127,5,0.127,7,0.303,8,1.184,15,3.007,16,0.016,18,1.116,20,1.57,29,1.489,30,1.059,31,0.68,32,1.489,45,0.405,46,3.08,51,3.007,53,0.624,79,0.143,80,0.021,83,0.912,87,1.57,107,1.885,128,0.01,129,0.01,197,1.409,315,2.286,317,1.88,318,3,319,2.385,320,2.385,325,1.691,326,3.224,328,3.283,329,1.691,331,3.224,333,2.001,334,2.001,337,1.691,339,1.691,341,1.783,342,2.471,345,2.286,347,2.286,454,4.139,460,2.471,757,3.484,758,3.011,759,2.659,760,3.011,761,3.481,762,3.481,763,3.481,764,1.885,765,3.484,766,3.481,767,4.657,768,3.481,769,3.484,770,3.011,771,3.81,772,3.481,773,3.481,774,3.481,775,3.481,776,3.481,777,2.471,778,3.481]],["title/modules/PermissionModule.html",[130,1.543,139,2.531]],["body/modules/PermissionModule.html",[2,2.548,3,0.196,4,0.174,5,0.174,16,0.016,45,0.475,53,0.857,79,0.196,80,0.029,128,0.012,129,0.012,130,2.433,132,2.324,133,2.952,139,4.866,143,3.291,144,2.591,145,2.591,147,3.492,148,2.749,151,2.93,152,2.209,355,3.141,357,3.141,757,4.739,769,4.539,770,4.138,779,4.138,780,4.138,781,4.784,782,4.784,783,4.716,784,4.784,785,4.784]],["title/injectables/PermissionService.html",[192,0.603,769,2.36]],["body/injectables/PermissionService.html",[3,0.151,4,0.134,5,0.134,7,0.32,8,1.232,16,0.016,18,1.14,20,1.702,29,1.527,30,1.086,31,0.698,32,1.527,45,0.384,53,0.66,79,0.151,80,0.022,87,1.604,128,0.01,129,0.01,192,0.8,193,1.293,197,1.3,261,1.621,317,1.956,318,3.076,319,2.482,320,2.482,325,2.482,328,3.343,329,2.482,337,1.79,339,1.79,454,4.074,460,4.72,535,3.956,759,2.767,760,4.42,764,2.767,767,4.634,769,3.13,771,3.965,786,3.188,787,3.686,788,3.686,789,3.686,790,3.686,791,3.686,792,4.72,793,3.188,794,2.86,795,2.616]],["title/controllers/RolesController.html",[0,1.616,796,2.735]],["body/controllers/RolesController.html",[0,1.46,2,1.46,3,0.143,4,0.127,5,0.127,7,0.303,8,1.184,15,3.007,16,0.016,18,1.116,20,1.57,29,1.489,30,1.059,31,0.68,32,1.489,45,0.405,46,3.08,51,3.007,53,0.624,79,0.143,80,0.021,83,0.912,87,1.57,107,1.885,128,0.01,129,0.01,160,1.691,197,1.409,315,2.286,317,1.88,318,3,319,2.385,320,2.385,325,1.691,326,3.224,328,3.283,329,1.691,331,3.224,333,2.001,334,2.001,337,1.691,339,1.691,341,1.783,342,2.471,345,2.286,347,2.286,457,4.139,759,2.659,764,1.885,765,3.484,777,2.471,796,3.484,797,3.011,798,3.011,799,3.481,800,3.481,801,3.481,802,3.481,803,4.657,804,3.481,805,3.484,806,3.011,807,3.81,808,3.481,809,3.481,810,3.481,811,3.481,812,3.481,813,3.481]],["title/modules/RolesModule.html",[130,1.543,140,2.531]],["body/modules/RolesModule.html",[2,2.548,3,0.196,4,0.174,5,0.174,16,0.016,45,0.475,53,0.857,79,0.196,80,0.029,128,0.012,129,0.012,130,2.433,132,2.324,133,2.952,140,4.866,143,3.291,144,2.591,145,2.591,147,3.492,148,2.749,151,2.93,152,2.209,355,3.141,357,3.141,796,4.739,805,4.539,806,4.138,814,4.138,815,4.138,816,4.784,817,4.784,818,4.716,819,4.784,820,4.784]],["title/injectables/RolesService.html",[192,0.603,805,2.36]],["body/injectables/RolesService.html",[3,0.135,4,0.12,5,0.12,7,0.286,8,1.137,9,2.111,16,0.016,18,1.137,20,1.647,21,1.38,29,1.537,30,1.093,31,0.702,32,1.537,45,0.435,53,0.59,79,0.135,80,0.02,81,2.291,82,1.891,87,1.537,90,1.38,99,1.205,128,0.009,129,0.009,152,1.519,160,2.291,192,0.738,193,1.154,197,1.177,261,2.074,317,1.806,318,2.925,319,2.291,320,2.291,325,2.291,328,3.222,329,2.291,337,1.598,339,1.598,360,4.273,368,2.335,369,1.38,457,3.904,535,3.854,693,2.015,759,2.555,764,2.555,792,4.524,793,2.846,794,2.554,795,2.335,798,4.08,803,4.486,805,2.889,807,3.661,821,2.846,822,3.29,823,3.29,824,4.717,825,3.29,826,3.29,827,3.29,828,3.29,829,3.29,830,3.29,831,3.29,832,3.29,833,3.29,834,6.022]],["title/controllers/RouterController.html",[0,1.616,835,2.735]],["body/controllers/RouterController.html",[0,1.424,2,1.424,3,0.139,4,0.124,5,0.124,7,0.295,8,1.163,15,2.979,16,0.016,18,1.106,20,1.556,29,1.473,30,1.047,31,0.673,32,1.473,45,0.423,46,2.613,51,2.955,53,0.608,60,4.402,62,2.635,79,0.139,80,0.021,83,0.889,87,1.556,107,1.839,128,0.01,129,0.01,197,1.401,315,2.23,317,1.847,318,2.967,319,2.343,320,2.343,325,1.649,326,2.23,328,3.256,329,1.649,331,2.23,333,1.951,334,1.951,337,1.649,339,1.649,341,1.739,342,2.41,345,2.23,347,2.23,361,3.039,478,3.741,679,2.23,759,2.613,764,1.839,765,2.41,777,2.41,835,3.423,836,2.937,837,3.396,838,3.396,839,3.396,840,2.937,841,3.396,842,3.396,843,3.396,844,3.396,845,3.396,846,4.627,847,3.396,848,3.396,849,2.937,850,3.744,851,3.396,852,3.396,853,3.396,854,3.396,855,3.396,856,3.396,857,3.396]],["title/guards/RouterGuard.html",[299,2.735,858,2.991]],["body/guards/RouterGuard.html",[3,0.175,4,0.155,5,0.155,7,0.37,8,1.358,9,2.416,16,0.016,18,0.965,20,1.026,21,1.784,29,1.358,30,0.965,31,0.62,32,1.358,45,0.414,48,2.444,53,0.762,79,0.175,80,0.026,81,2.066,83,1.114,87,1.685,90,2.361,99,2.312,126,2.884,128,0.011,129,0.011,155,3.019,192,0.881,301,3.019,303,4.767,304,3.996,305,3.638,307,3.019,308,3.019,309,2.793,310,3.301,311,3.019,341,2.179,361,3.638,370,3.679,374,3.679,858,4.37,859,3.679,860,4.253,861,4.253,862,4.253,863,4.253,864,5.63,865,3.679,866,4.253,867,4.37,868,4.253,869,4.253,870,4.253,871,4.253,872,4.253,873,4.253]],["title/modules/RouterModule.html",[130,1.543,141,2.531]],["body/modules/RouterModule.html",[2,2.477,3,0.188,4,0.167,5,0.167,16,0.016,45,0.469,53,0.82,79,0.188,80,0.028,128,0.012,129,0.012,130,2.366,132,2.224,133,2.87,141,4.894,143,3.2,144,2.479,145,2.479,147,3.395,148,2.631,151,2.804,152,2.114,209,3.553,355,3.006,361,4.197,835,4.642,849,3.96,874,3.96,875,3.96,876,3.96,877,4.578,878,5.907,879,4.578,880,3.553,881,4.578,882,4.578,883,4.578,884,4.578]],["title/injectables/RouterService.html",[192,0.603,361,2.087]],["body/injectables/RouterService.html",[3,0.117,4,0.104,5,0.104,7,0.249,8,1.027,9,2.75,16,0.016,18,1.121,20,1.577,21,2.363,29,1.523,30,1.083,31,0.696,32,1.523,45,0.429,53,0.513,79,0.117,80,0.017,81,1.39,82,1.644,87,1.523,90,2.363,99,2.064,128,0.009,129,0.009,152,1.321,155,3.022,166,3.305,192,0.667,193,1.004,197,1.443,316,2.471,317,1.63,318,2.737,319,2.069,320,2.069,325,2.069,328,2.737,329,2.069,337,1.39,339,1.39,360,3.999,361,2.306,368,2.03,369,1.2,388,1.39,478,1.752,535,2.755,600,2.03,606,1.879,679,3.34,707,2.03,754,5.462,759,2.306,764,2.306,792,3.022,795,2.03,846,4.413,850,3.305,885,2.475,886,2.861,887,2.861,888,4.258,889,4.258,890,2.861,891,2.861,892,2.861,893,2.861,894,2.861,895,2.861,896,2.861,897,2.861,898,2.861,899,2.861,900,2.861,901,3.683,902,2.22,903,2.861,904,2.861,905,2.861,906,2.861,907,2.861,908,4.258,909,2.861,910,2.861,911,2.861,912,2.861,913,2.861,914,2.861]],["title/injectables/RtStrategy.html",[192,0.603,205,2.531]],["body/injectables/RtStrategy.html",[3,0.16,4,0.142,5,0.142,7,0.338,8,1.279,9,2.311,16,0.016,18,0.91,20,0.939,21,1.633,29,1.279,30,0.91,31,0.585,32,1.279,37,3.022,45,0.445,48,3.725,53,0.698,71,1.712,76,3.022,79,0.16,80,0.024,81,1.891,87,1.455,94,2.557,99,1.426,100,4.684,128,0.011,129,0.011,192,0.831,193,1.366,205,3.484,229,3.022,232,3.022,233,3.32,236,4.118,258,3.022,260,3.25,261,2.333,270,3.022,273,2.874,274,3.25,275,3.484,293,3.368,341,1.994,663,1.154,735,3.368,737,4.118,741,5.221,742,3.022,743,3.368,744,3.022,745,2.763,746,3.368,747,3.022,748,3.368,750,3.368,915,3.368,916,3.894,917,4.589,918,3.894,919,3.368,920,3.894,921,3.894,922,5.306,923,3.894,924,3.894,925,5.306,926,3.894,927,3.894,928,3.894,929,3.894]],["title/injectables/SessionSerializer.html",[192,0.603,206,2.531]],["body/injectables/SessionSerializer.html",[3,0.181,4,0.16,5,0.16,7,0.383,8,1.389,9,2.458,16,0.016,18,0.987,20,1.389,29,1.389,30,0.987,31,0.635,32,1.389,33,2.607,45,0.378,53,0.789,71,1.936,79,0.181,80,0.027,128,0.012,129,0.012,192,0.902,193,1.544,197,0.861,206,3.782,663,1.707,726,4.087,930,3.808,931,6.419,932,5.759,933,5.759,934,5.759,935,7.249,936,4.403,937,6.419,938,4.403,939,4.47,940,5.759,941,4.403,942,4.403,943,5.759,944,4.403,945,4.403,946,5.759,947,4.403]],["title/classes/UpdateBranchDto.html",[80,0.023,330,2.531]],["body/classes/UpdateBranchDto.html",[3,0.231,4,0.205,5,0.205,16,0.016,45,0.44,79,0.231,80,0.034,128,0.013,129,0.013,317,2.152,322,3.443,330,4.407,338,4.363,384,2.059,386,4.363,423,2.88,663,1.666,948,4.863,949,3.692,950,5.622]],["title/classes/UpdatePermissionDto.html",[80,0.023,767,2.531]],["body/classes/UpdatePermissionDto.html",[3,0.231,4,0.205,5,0.205,16,0.016,45,0.44,79,0.231,80,0.034,128,0.013,129,0.013,317,2.152,384,2.059,423,2.88,454,3.443,456,4.363,663,1.666,767,4.407,771,4.363,949,3.692,951,4.863,952,5.622]],["title/classes/UpdateRoleDto.html",[80,0.023,803,2.531]],["body/classes/UpdateRoleDto.html",[3,0.231,4,0.205,5,0.205,16,0.016,45,0.44,79,0.231,80,0.034,128,0.013,129,0.013,317,2.152,384,2.059,423,2.88,457,3.443,459,4.363,663,1.666,803,4.407,807,4.363,949,3.692,953,4.863,954,5.622]],["title/classes/UpdateRouterDto.html",[80,0.023,846,2.531]],["body/classes/UpdateRouterDto.html",[3,0.219,4,0.195,5,0.195,7,0.464,16,0.016,18,0.915,31,0.588,45,0.426,79,0.219,80,0.032,128,0.013,129,0.013,317,2.044,384,1.956,387,2.01,388,3.16,423,2.735,478,3.27,480,4.144,593,2.892,663,1.582,846,4.272,850,4.144,949,3.506,955,5.628,956,5.339,957,5.339,958,5.339]],["title/classes/UpdateUserDto.html",[80,0.023,959,2.531]],["body/classes/UpdateUserDto.html",[3,0.231,4,0.205,5,0.205,16,0.016,45,0.44,79,0.231,80,0.034,128,0.013,129,0.013,317,2.152,384,2.059,423,2.88,483,3.443,485,3.99,663,1.666,949,3.692,959,4.407,960,4.863,961,4.363,962,5.622]],["title/controllers/UsersController.html",[0,1.616,963,2.735]],["body/controllers/UsersController.html",[0,1.011,2,1.011,3,0.099,4,0.088,5,0.088,7,0.21,8,0.902,9,2.646,15,2.847,16,0.016,18,1.057,20,1.487,21,2.164,23,2.346,24,5.512,26,2.086,29,1.487,30,1.057,31,0.651,32,1.487,33,1.976,45,0.418,46,1.306,47,2.086,50,2.086,51,2.805,53,0.432,60,3.008,62,1.871,67,2.086,78,1.583,79,0.099,80,0.015,83,0.631,87,1.536,90,2.478,99,2.046,107,1.306,113,1.871,117,1.477,120,3.235,128,0.008,129,0.008,197,1.279,233,2.346,250,1.477,252,1.386,260,2.29,261,1.644,263,1.583,273,2.025,315,1.583,317,1.432,318,1.816,319,1.816,320,1.816,325,1.171,326,2.455,328,2.871,329,1.171,331,2.455,333,1.386,334,1.386,337,1.171,339,1.171,341,1.235,345,1.583,347,1.583,393,1.477,402,1.386,483,3.776,522,1.871,594,4.375,665,1.871,710,2.902,721,1.477,759,2.025,764,1.306,765,2.654,777,1.711,840,2.086,919,2.086,959,4.184,961,3.555,963,2.654,964,2.086,965,3.962,966,3.739,967,2.411,968,2.411,969,2.411,970,2.411,971,3.739,972,2.411,973,2.411,974,2.411,975,2.411,976,2.411,977,2.411,978,2.411,979,2.411,980,2.411,981,2.086,982,2.086,983,2.411,984,2.411,985,2.411,986,2.411,987,2.411,988,2.411,989,2.411,990,2.411,991,2.411,992,3.739,993,2.411,994,2.411,995,2.411,996,2.411,997,2.411,998,2.411,999,2.411,1000,2.411,1001,2.411,1002,2.411,1003,2.411,1004,2.411,1005,2.411,1006,3.739,1007,2.411,1008,2.411,1009,2.411,1010,2.411,1011,2.411,1012,2.411,1013,2.411,1014,2.411,1015,2.411,1016,2.411,1017,2.411,1018,2.411,1019,2.411,1020,2.411,1021,2.411]],["title/modules/UsersModule.html",[130,1.543,142,2.36]],["body/modules/UsersModule.html",[2,2.4,3,0.179,4,0.159,5,0.159,16,0.016,45,0.483,53,0.781,79,0.179,80,0.026,128,0.012,129,0.012,130,2.292,132,2.118,133,2.78,142,4.513,143,3.1,144,2.362,145,2.362,147,3.289,148,2.506,151,2.671,152,2.014,209,3.384,233,3.939,355,2.864,357,4.195,963,4.534,981,3.772,1022,3.772,1023,3.772,1024,3.772,1025,4.361,1026,4.361,1027,4.442,1028,4.361,1029,4.442,1030,4.361,1031,4.442,1032,4.361,1033,4.361,1034,4.361,1035,4.361,1036,4.361]],["title/injectables/UsersService.html",[192,0.603,233,1.974]],["body/injectables/UsersService.html",[3,0.075,4,0.067,5,0.067,7,0.159,8,0.723,9,2.777,16,0.016,18,1.121,20,1.601,21,1.85,23,2.259,29,1.549,30,1.101,31,0.708,32,1.549,33,2.609,45,0.378,53,0.328,79,0.075,80,0.011,81,1.457,82,2.191,87,1.601,90,2.639,99,2.251,126,1.537,128,0.006,129,0.006,152,0.845,192,0.47,193,0.642,197,1.432,233,1.537,239,4.475,240,1.42,252,2.191,253,3.92,261,2.141,270,1.42,283,4.475,317,1.149,318,2.143,319,1.457,320,1.457,325,1.457,328,2.801,329,1.457,337,0.889,339,0.889,360,4.36,368,1.298,369,0.767,375,2.129,483,3.383,487,2.129,535,3.234,621,3.92,630,1.583,666,1.201,688,1.201,710,2.328,732,1.583,759,1.625,764,1.625,792,3.13,794,1.42,795,1.298,867,1.42,901,1.583,959,3.627,961,2.328,965,1.583,982,1.583,1037,1.583,1038,3,1039,3,1040,3,1041,3,1042,3,1043,3,1044,3,1045,1.83,1046,3.813,1047,3.813,1048,1.83,1049,3,1050,3,1051,1.83,1052,3,1053,1.83,1054,1.83,1055,1.83,1056,1.83,1057,1.83,1058,3,1059,1.83,1060,3,1061,4.411,1062,1.83,1063,3,1064,1.83,1065,1.83,1066,1.83,1067,1.83,1068,1.83,1069,3,1070,1.83,1071,1.83,1072,1.83,1073,1.83,1074,1.83,1075,1.83,1076,1.83,1077,1.83,1078,3,1079,1.83,1080,1.83,1081,1.83,1082,1.83,1083,1.83,1084,1.83,1085,3,1086,3,1087,1.83,1088,1.83,1089,3.813,1090,1.83,1091,1.83,1092,1.83,1093,1.83,1094,1.83,1095,1.83,1096,3,1097,3,1098,1.83,1099,1.83,1100,1.83,1101,1.83]],["title/coverage.html",[1102,4.089]],["body/coverage.html",[0,2.359,1,1.522,5,0.078,6,1.856,16,0.016,23,1.099,31,0.236,33,0.821,42,1.522,54,1.314,56,1.522,57,1.522,58,1.522,60,1.409,61,1.409,64,1.522,66,1.409,68,1.233,72,1.522,74,1.522,78,1.409,80,0.042,128,0.007,129,0.007,160,1.042,192,1.104,194,1.856,204,1.409,205,1.409,206,1.409,207,1.409,227,1.856,233,1.099,255,1.409,261,0.943,299,3.014,300,1.665,302,1.856,313,1.522,314,1.856,316,1.042,322,1.314,330,1.409,335,1.314,353,1.665,358,1.856,361,1.162,371,1.162,385,1.856,386,2.647,436,1.314,437,1.233,454,1.314,455,1.856,456,2.647,457,1.314,458,1.856,459,2.647,478,1.314,479,1.856,480,2.647,483,1.314,484,1.856,485,3.014,594,1.522,595,1.856,600,1.522,601,1.856,614,1.856,616,2.647,650,1.665,652,1.409,660,2.032,662,1.856,666,1.409,667,1.856,673,1.522,674,1.856,688,1.409,689,1.856,693,1.314,701,1.856,704,1.856,707,1.522,708,1.856,709,1.856,718,1.856,721,2.964,722,3.178,733,1.856,736,1.856,752,1.856,757,1.522,758,1.856,767,1.409,769,1.314,783,1.665,786,1.856,796,1.522,797,1.856,803,1.409,805,1.314,818,1.665,821,1.856,835,1.522,836,1.856,846,1.409,858,1.665,859,1.856,880,1.665,885,1.856,902,6.183,915,1.856,930,1.856,939,3.756,948,1.856,951,1.856,953,1.856,955,1.856,959,1.409,960,1.856,963,1.522,964,1.856,1027,1.665,1029,1.665,1031,1.665,1037,1.856,1102,1.665,1103,2.145,1104,2.145,1105,2.145,1106,5.898,1107,1.665,1108,6.815,1109,7.398,1110,6.463,1111,4.84,1112,5.898,1113,1.856,1114,4.84,1115,4.247,1116,1.856,1117,1.856,1118,1.856,1119,1.856,1120,1.856,1121,1.856,1122,1.856,1123,1.856,1124,2.145,1125,2.145,1126,1.856,1127,1.856,1128,2.145,1129,2.145,1130,2.647,1131,1.856,1132,1.856,1133,2.145,1134,1.856,1135,3.411,1136,1.856,1137,1.856,1138,2.145,1139,2.145,1140,1.856,1141,1.856,1142,1.856,1143,2.145,1144,2.145,1145,2.145]],["title/dependencies.html",[133,2.253,1146,2.78]],["body/dependencies.html",[16,0.016,53,0.781,61,2.864,66,2.864,71,1.918,76,4.442,80,0.035,94,2.864,118,3.772,128,0.012,129,0.012,133,2.118,150,3.384,152,2.014,154,3.384,155,3.095,156,3.772,163,3.772,164,2.671,172,3.772,174,3.095,211,3.384,309,2.864,369,1.829,423,2.234,425,2.864,433,2.671,648,3.772,649,3.772,745,4.534,1147,7.044,1148,5.724,1149,4.361,1150,4.361,1151,5.724,1152,4.361,1153,4.361,1154,4.361,1155,4.361,1156,4.361,1157,4.361,1158,3.772,1159,4.361,1160,4.361,1161,4.361,1162,4.361,1163,4.361,1164,4.361,1165,4.361,1166,4.361,1167,4.361,1168,4.361,1169,4.361,1170,4.361,1171,4.361,1172,4.361,1173,4.361,1174,4.361,1175,3.772,1176,3.772,1177,4.361]],["title/miscellaneous/enumerations.html",[1178,1.968,1179,4.011]],["body/miscellaneous/enumerations.html",[7,0.339,16,0.016,33,2.484,46,3.274,107,2.879,117,2.392,128,0.011,129,0.011,160,1.897,240,4.126,333,3.055,402,3.474,434,4.598,443,3.828,468,4.598,473,3.377,537,3.377,551,3.03,1107,3.03,1178,2.392,1179,3.377,1180,5.316,1181,4.598,1182,4.598,1183,5.316,1184,3.905,1185,5.316,1186,3.905,1187,3.905,1188,7.004,1189,3.905,1190,5.316,1191,3.905,1192,5.316,1193,4.598,1194,3.905,1195,5.316,1196,3.905,1197,3.905,1198,3.905,1199,3.905,1200,3.905,1201,3.905,1202,6.489,1203,3.905,1204,5.316,1205,3.905,1206,6.489,1207,6.489,1208,3.905,1209,5.316,1210,3.905,1211,3.905,1212,5.316,1213,5.316,1214,5.316]],["title/miscellaneous/functions.html",[1178,1.968,1215,4.011]],["body/miscellaneous/functions.html",[7,0.457,16,0.015,29,1.681,30,1.195,32,1.681,60,4.232,61,4.232,128,0.013,129,0.013,160,3.386,1117,4.548,1118,5.575,1120,4.548,1122,4.548,1130,4.08,1131,6.029,1178,3.22,1215,4.548,1216,5.258,1217,4.548,1218,5.258,1219,5.258,1220,5.258,1221,6.97,1222,5.258,1223,5.258]],["title/index.html",[7,0.279,1224,3.214,1225,3.214]],["body/index.html",[4,0.16,16,0.016,128,0.012,129,0.012,154,4.982,165,3.808,1102,3.417,1226,4.403,1227,4.403,1228,5.759,1229,4.403,1230,4.403,1231,4.403,1232,4.403,1233,4.403,1234,4.403,1235,3.808,1236,4.403,1237,4.403,1238,4.403,1239,4.403,1240,7.385,1241,4.403,1242,4.403,1243,4.403,1244,7.249,1245,4.403,1246,4.403,1247,5.759,1248,4.403,1249,4.403,1250,4.403,1251,4.403,1252,5.759,1253,5.759,1254,4.403,1255,4.403,1256,4.403,1257,5.759,1258,5.759,1259,4.403,1260,4.403,1261,4.403,1262,4.403,1263,4.403,1264,3.808,1265,4.403,1266,4.403,1267,4.403,1268,4.403,1269,4.403,1270,4.403,1271,4.403,1272,4.403,1273,4.403,1274,3.808,1275,4.403,1276,4.403,1277,4.403,1278,4.403,1279,4.403,1280,4.403,1281,3.808]],["title/injectables/localStrategy.html",[192,0.603,207,2.531]],["body/injectables/localStrategy.html",[3,0.174,4,0.154,5,0.154,7,0.367,8,1.352,9,2.409,16,0.016,18,0.961,20,1.019,21,1.773,29,1.352,30,0.961,31,0.618,32,1.352,33,2.147,37,3.281,45,0.439,52,2.589,53,0.758,66,2.776,68,4.119,71,1.859,79,0.174,80,0.026,81,2.054,83,1.107,87,1.019,90,1.773,99,1.549,126,2.165,128,0.011,129,0.011,192,0.878,193,1.483,197,1.401,207,3.682,214,3.657,250,4.271,252,3.851,341,2.165,663,1.253,737,4.352,742,3.281,744,3.281,745,3,747,3.281,917,4.85,1113,3.657,1282,4.227,1283,4.227,1284,4.227,1285,4.227,1286,4.227,1287,4.227,1288,4.227,1289,4.227]],["title/modules.html",[132,2.559]],["body/modules.html",[16,0.013,128,0.013,129,0.013,131,3.804,132,2.604,137,3.52,138,3.52,139,3.52,140,3.52,141,3.52,142,3.283,1264,6.674,1290,7.715,1291,7.715,1292,7.715]],["title/overview.html",[1293,4.557]],["body/overview.html",[2,1.505,16,0.016,54,3.542,68,4.026,128,0.01,129,0.01,131,5.458,132,1.744,133,2.437,134,3.105,135,3.105,136,3.105,137,5.05,138,4.326,139,4.326,140,4.326,141,4.482,142,4.291,143,2.717,144,1.944,145,1.944,193,1.259,200,3.105,201,3.105,203,3.105,204,3.797,205,3.797,206,3.797,207,3.797,233,3.588,301,2.548,335,3.542,349,3.105,350,3.105,361,3.794,384,1.315,523,2.786,526,3.105,661,1.744,769,3.542,779,3.105,780,3.105,805,3.542,814,3.105,815,3.105,874,3.105,875,3.105,876,3.105,1022,3.105,1023,3.105,1024,3.105,1293,3.105,1294,3.59,1295,3.59,1296,3.59,1297,3.105]],["title/properties.html",[387,1.433,1146,2.78]],["body/properties.html",[16,0.016,128,0.014,129,0.014,387,1.834,1235,5.135,1274,5.135,1281,5.135,1298,5.936,1299,5.936,1300,5.936]],["title/classes/regexHelper.html",[80,0.023,436,2.36]],["body/classes/regexHelper.html",[3,0.151,4,0.134,5,0.134,7,0.319,16,0.016,18,1.208,79,0.151,80,0.022,128,0.01,129,0.01,164,4.808,384,1.343,387,1.573,436,3.118,443,3.423,605,5,652,4.627,902,4.903,1126,3.171,1297,5.465,1301,5.848,1302,5.848,1303,5.848,1304,5.848,1305,5.848,1306,5.848,1307,5.848,1308,5.091,1309,3.666,1310,3.666,1311,7.184,1312,7.184,1313,5.091,1314,5.091,1315,5.091,1316,3.666,1317,5.091,1318,5.091,1319,3.666,1320,5.091,1321,5.091,1322,5.091,1323,3.666,1324,5.091,1325,5.091,1326,3.666,1327,3.666]],["title/classes/sanitizeHelper.html",[80,0.023,437,2.215]],["body/classes/sanitizeHelper.html",[3,0.147,4,0.131,5,0.131,7,0.312,8,1.21,16,0.016,18,0.991,20,1.588,29,1.394,30,0.991,31,0.637,32,1.394,45,0.235,79,0.147,80,0.022,87,1.394,128,0.01,129,0.01,164,4.447,197,1.453,253,4.443,334,2.883,384,1.315,402,3.922,437,2.883,438,4.18,443,2.437,632,5.698,633,5.415,652,3.797,1127,3.105,1175,3.105,1176,3.105,1328,5.017,1329,5.017,1330,5.017,1331,3.59,1332,3.59,1333,5.017,1334,3.59,1335,6.261,1336,6.261,1337,5.017,1338,3.59,1339,5.017,1340,5.017,1341,3.59,1342,3.59,1343,5.017,1344,5.017,1345,5.017,1346,5.017,1347,5.017,1348,3.59,1349,3.59,1350,3.59,1351,3.59]],["title/miscellaneous/variables.html",[1178,1.968,1352,4.011]],["body/miscellaneous/variables.html",[7,0.189,9,0.834,16,0.016,30,0.736,31,0.78,33,2.357,48,1.985,87,1.283,90,0.914,99,1.789,100,1.691,113,1.691,126,3.247,128,0.007,129,0.007,160,2.084,197,1.16,250,1.335,252,1.252,261,2.706,305,1.871,316,3.079,353,2.681,357,3.897,388,2.372,443,3.323,486,1.691,487,1.546,488,1.691,489,1.691,492,1.691,585,4.604,587,6.177,590,2.451,591,2.99,592,1.691,593,1.18,605,5.209,606,2.268,616,1.691,621,1.546,650,2.681,651,1.885,652,2.268,668,1.885,675,1.885,676,1.885,677,1.885,678,1.885,679,2.818,690,1.885,691,1.885,692,1.885,783,2.681,818,2.681,865,1.885,867,2.681,880,2.681,939,1.691,1027,2.681,1029,2.681,1031,2.681,1107,1.691,1116,1.885,1119,1.885,1121,1.885,1123,1.885,1130,1.691,1132,2.988,1134,1.885,1136,1.885,1137,1.885,1140,1.885,1141,1.885,1142,1.885,1158,1.885,1178,1.335,1181,1.885,1182,1.885,1193,1.885,1217,1.885,1352,1.885,1353,2.179,1354,2.179,1355,2.179,1356,2.179,1357,2.179,1358,2.179,1359,2.179,1360,2.179,1361,2.179,1362,2.179,1363,2.179,1364,3.454,1365,3.454,1366,3.454,1367,3.454,1368,2.179,1369,2.179,1370,2.179,1371,5.323,1372,4.291,1373,2.179,1374,4.291,1375,7.078,1376,2.179,1377,6.339,1378,2.179,1379,2.179,1380,4.291,1381,2.179,1382,2.179,1383,4.882,1384,4.882,1385,4.882,1386,2.179,1387,2.179,1388,2.179,1389,2.179,1390,2.179,1391,2.179,1392,2.179,1393,2.179,1394,2.179,1395,2.179,1396,2.179,1397,3.454,1398,2.179,1399,2.179,1400,2.179,1401,2.179,1402,2.179,1403,2.179,1404,2.179,1405,2.179,1406,2.179,1407,2.179,1408,2.179,1409,2.179,1410,2.179,1411,2.179,1412,4.291,1413,2.179,1414,2.179,1415,2.179]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":902,"title":{},"body":{"injectables/RouterService.html":{},"coverage.html":{},"classes/regexHelper.html":{}}}],["0.0.1",{"_index":1299,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["0.28.7",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["00)?(\\+)?\\d{1,3",{"_index":1320,"title":{},"body":{"classes/regexHelper.html":{}}}],["1.0.0",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":623,"title":{},"body":{"classes/HashHelper.html":{}}}],["100",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["12",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["16",{"_index":1296,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["2.7.1",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["21.234.567",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["28",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"overview.html":{}}}],["3.0.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["553f99a23dd58e17e115915b4d98af2dc44f",{"_index":869,"title":{},"body":{"guards/RouterGuard.html":{}}}],["56",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["6",{"_index":1295,"title":{},"body":{"overview.html":{}}}],["6.0.5",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["6.5.1",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["60m",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["62a90153efa940f40780e438",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1294,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.'})@maxlength(12",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":1297,"title":{},"body":{"overview.html":{},"classes/regexHelper.html":{}}}],["9.0.0",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["access",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"dependencies.html":{}}}],["access(method",{"_index":889,"title":{},"body":{"injectables/RouterService.html":{}}}],["access.status",{"_index":873,"title":{},"body":{"guards/RouterGuard.html":{}}}],["access_token",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontrolmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["action",{"_index":792,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["active",{"_index":1206,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actualmente",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adds",{"_index":793,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{}}}],["admin",{"_index":1202,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allowedattributes",{"_index":1345,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["allowedtags",{"_index":1344,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["amazing",{"_index":1265,"title":{},"body":{"index.html":{}}}],["apellido",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["api",{"_index":607,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/error",{"_index":610,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/router",{"_index":608,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/router/:id",{"_index":609,"title":{},"body":{"classes/GlobalService.html":{}}}],["api/v1/swagger",{"_index":611,"title":{},"body":{"classes/GlobalService.html":{}}}],["apiproperty",{"_index":422,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["app",{"_index":1242,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["app.roles",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1234,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":131,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appresources",{"_index":1180,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["approles",{"_index":1182,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["approles.user",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appservice",{"_index":54,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":649,"title":{},"body":{"classes/HashHelper.html":{},"dependencies.html":{}}}],["argon2.hash(str",{"_index":657,"title":{},"body":{"classes/HashHelper.html":{}}}],["argon2.verify(str",{"_index":659,"title":{},"body":{"classes/HashHelper.html":{}}}],["array",{"_index":1339,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["arraynotempty",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["arraynotempty({message:'debe",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":1118,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth(...roles",{"_index":1220,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth.guard",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":722,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":731,"title":{},"body":{"injectables/JwtNoAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":753,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":725,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"injectables/localStrategy.html":{}}}],["auth/auth.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["authenticatedguard",{"_index":300,"title":{"guards/AuthenticatedGuard.html":{}},"body":{"guards/AuthenticatedGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":728,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":730,"title":{},"body":{"injectables/JwtLocalAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":137,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1274,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":68,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["autorizado",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{}}}],["available",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1266,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":919,"title":{},"body":{"injectables/RtStrategy.html":{},"controllers/UsersController.html":{}}}],["badrequestexception('correo",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception('no",{"_index":925,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["badrequestexception('nombre",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["banned",{"_index":1214,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":647,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcrypt.compare(str",{"_index":655,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcrypt.hash(str",{"_index":653,"title":{},"body":{"classes/HashHelper.html":{}}}],["bcryptjs",{"_index":648,"title":{},"body":{"classes/HashHelper.html":{},"dependencies.html":{}}}],["blacklist",{"_index":598,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["blacklist.enum.ts",{"_index":1192,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/LocalAuthGuard.html":{},"classes/UpdateRouterDto.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":1131,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":316,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateRouterDto.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["branch.controller",{"_index":352,"title":{},"body":{"modules/BranchModule.html":{}}}],["branch.dto",{"_index":338,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/UpdateBranchDto.html":{}}}],["branch.dto.ts",{"_index":386,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["branch.dto.ts:16",{"_index":410,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.dto.ts:22",{"_index":421,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.dto.ts:27",{"_index":415,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["branch.save",{"_index":379,"title":{},"body":{"injectables/BranchService.html":{}}}],["branch.service",{"_index":336,"title":{},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{}}}],["branch/branch.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["branch:ibranch",{"_index":687,"title":{},"body":{"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{}}}],["branch:string",{"_index":912,"title":{},"body":{"injectables/RouterService.html":{}}}],["branchcontroller",{"_index":313,"title":{"controllers/BranchController.html":{}},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{},"coverage.html":{}}}],["branches",{"_index":380,"title":{},"body":{"injectables/BranchService.html":{}}}],["branchmodel",{"_index":363,"title":{},"body":{"injectables/BranchService.html":{}}}],["branchmodule",{"_index":138,"title":{"modules/BranchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"modules.html":{},"overview.html":{}}}],["branchschema",{"_index":353,"title":{},"body":{"modules/BranchModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["branchservice",{"_index":335,"title":{"injectables/BranchService.html":{}},"body":{"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"coverage.html":{},"overview.html":{}}}],["browse",{"_index":1292,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1290,"title":{},"body":{"modules.html":{}}}],["browser:string",{"_index":672,"title":{},"body":{"interfaces/IHash.html":{}}}],["building",{"_index":1229,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":908,"title":{},"body":{"injectables/RouterService.html":{}}}],["canactivate",{"_index":303,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["canactivate(context",{"_index":304,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["caracteres",{"_index":406,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["caracteres'})@maxlength(16",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["career",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["career:string",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["carrera",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["carrera'})@isnotempty()@transform",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["catch",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":80,"title":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["classes",{"_index":384,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["client",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_branchmodule",{"_index":349,"title":{},"body":{"modules/BranchModule.html":{},"overview.html":{}}}],["cluster_branchmodule_providers",{"_index":350,"title":{},"body":{"modules/BranchModule.html":{},"overview.html":{}}}],["cluster_permissionmodule",{"_index":779,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_permissionmodule_providers",{"_index":780,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":814,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":815,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_routermodule",{"_index":874,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_routermodule_exports",{"_index":876,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_routermodule_providers",{"_index":875,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1022,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1023,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1024,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["common/types/refresh.type",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["como",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["compara",{"_index":628,"title":{},"body":{"classes/HashHelper.html":{}}}],["compare",{"_index":618,"title":{},"body":{"classes/HashHelper.html":{}}}],["compare(str",{"_index":625,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken",{"_index":619,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken(str",{"_index":637,"title":{},"body":{"classes/HashHelper.html":{}}}],["comparehashrefreshtoken(str:string",{"_index":658,"title":{},"body":{"classes/HashHelper.html":{}}}],["con",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["configmodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["connect",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["console.log(user",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["constraint1",{"_index":398,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["constructor",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}}}],["constructor(@injectmodel('router",{"_index":899,"title":{},"body":{"injectables/RouterService.html":{}}}],["constructor(authservice",{"_index":1282,"title":{},"body":{"injectables/localStrategy.html":{}}}],["constructor(branchmodel",{"_index":359,"title":{},"body":{"injectables/BranchService.html":{}}}],["constructor(private",{"_index":341,"title":{},"body":{"controllers/BranchController.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{}}}],["constructor(rolemodel",{"_index":822,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(routermodel",{"_index":886,"title":{},"body":{"injectables/RouterService.html":{}}}],["constructor(routerservice",{"_index":860,"title":{},"body":{"guards/RouterGuard.html":{}}}],["constructor(usermodel",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["contener",{"_index":397,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["context",{"_index":307,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":311,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["contraseña",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["control",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('branch",{"_index":340,"title":{},"body":{"controllers/BranchController.html":{}}}],["controller('permission",{"_index":772,"title":{},"body":{"controllers/PermissionController.html":{}}}],["controller('roles",{"_index":808,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('router",{"_index":851,"title":{},"body":{"controllers/RouterController.html":{}}}],["controller('users",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/RouterController.html":{},"modules/RouterModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["correo",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{}}}],["coverage",{"_index":1102,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creado",{"_index":998,"title":{},"body":{"controllers/UsersController.html":{}}}],["create",{"_index":317,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":342,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{}}}],["create(@res",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(branch",{"_index":891,"title":{},"body":{"injectables/RouterService.html":{}}}],["create(branch:any",{"_index":900,"title":{},"body":{"injectables/RouterService.html":{}}}],["create(createbranchdto",{"_index":321,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{}}}],["create(createpermissiondto",{"_index":760,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["create(createroledto",{"_index":798,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createrouterdto",{"_index":837,"title":{},"body":{"controllers/RouterController.html":{}}}],["create(createuserdto",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(res",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{}}}],["createbranchdto",{"_index":322,"title":{"classes/CreateBranchDto.html":{}},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["createdat",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["createdat:date",{"_index":716,"title":{},"body":{"interfaces/IUser.html":{}}}],["createparamdecorator",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpermissiondto",{"_index":454,"title":{"classes/CreatePermissionDto.html":{}},"body":{"classes/CreatePermissionDto.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["createroledto",{"_index":457,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createrouterdto",{"_index":478,"title":{"classes/CreateRouterDto.html":{}},"body":{"classes/CreateRouterDto.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["createrouterdto:createrouterdto",{"_index":852,"title":{},"body":{"controllers/RouterController.html":{}}}],["createuserdto",{"_index":483,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crypto",{"_index":650,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto.randombytes(18).tostring('hex').touppercase",{"_index":656,"title":{},"body":{"classes/HashHelper.html":{}}}],["ctx",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuando",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{}}}],["cuenta",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["d",{"_index":1308,"title":{},"body":{"classes/regexHelper.html":{}}}],["d*(?:[a",{"_index":1317,"title":{},"body":{"classes/regexHelper.html":{}}}],["data",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["data.refresh_token",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["data.refresh_token,{httponly",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["data:string",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IProfile.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["date.now",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":402,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"classes/sanitizeHelper.html":{}}}],["debe",{"_index":391,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["deben",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":605,"title":{},"body":{"classes/GlobalService.html":{},"classes/HashHelper.html":{},"classes/regexHelper.html":{},"miscellaneous/variables.html":{}}}],["default:date.now",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default:ecrud.no",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default:true",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["del",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":765,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["deletehashtoken",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletehashtoken(_id",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["dentro",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":133,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1235,"title":{},"body":{"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":932,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["deserializeuser(user",{"_index":934,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["development",{"_index":1243,"title":{},"body":{"index.html":{}}}],["device:string",{"_index":671,"title":{},"body":{"interfaces/IHash.html":{}}}],["disabled",{"_index":1207,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disallowedtagsmode",{"_index":1346,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["discard",{"_index":1347,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["disponible",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["disponibles",{"_index":1197,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dkk",{"_index":1325,"title":{},"body":{"classes/regexHelper.html":{}}}],["document",{"_index":664,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{}}}],["documentation",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":935,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["done(null",{"_index":946,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["dto/create",{"_index":337,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/filter",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/update",{"_index":339,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["d{1,3}(?:\\.\\d{1,3}){2",{"_index":1324,"title":{},"body":{"classes/regexHelper.html":{}}}],["e",{"_index":630,"title":{},"body":{"classes/HashHelper.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1254,"title":{},"body":{"index.html":{}}}],["each",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ecrud",{"_index":1183,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1230,"title":{},"body":{"index.html":{}}}],["ejemplo",{"_index":1200,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["el",{"_index":412,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{}}}],["element.method",{"_index":906,"title":{},"body":{"injectables/RouterService.html":{}}}],["element.path",{"_index":904,"title":{},"body":{"injectables/RouterService.html":{}}}],["email",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email:string",{"_index":699,"title":{},"body":{"interfaces/IProfile.html":{}}}],["emethod",{"_index":1185,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["en",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["encripta",{"_index":642,"title":{},"body":{"classes/HashHelper.html":{}}}],["encriptado",{"_index":629,"title":{},"body":{"classes/HashHelper.html":{}}}],["encripted",{"_index":638,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypt",{"_index":620,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypt(str",{"_index":640,"title":{},"body":{"classes/HashHelper.html":{}}}],["encrypted",{"_index":626,"title":{},"body":{"classes/HashHelper.html":{}}}],["encuentra",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{}}}],["encuentra.'})@isnotempty({message",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enum",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:ecrud",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:emethod",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:eroles",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum:estatusbranch",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":1179,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath:'.env",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["enviara",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{}}}],["eroles",{"_index":468,"title":{},"body":{"classes/CreateRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["eroles.active",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":726,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/SessionSerializer.html":{}}}],["err:error",{"_index":943,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,payloader",{"_index":936,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["error,user",{"_index":941,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["es",{"_index":465,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["espacios",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["espacios.'})@minlength(15",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["especiales",{"_index":446,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["especiales.'})@matches(regexhelper.onlynumbers",{"_index":407,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["esta",{"_index":1199,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["estado",{"_index":413,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["estar",{"_index":395,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["estatusbranch",{"_index":434,"title":{},"body":{"classes/CreateBranchDto.html":{},"miscellaneous/enumerations.html":{}}}],["estatusbranch.active",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["euserblacklist",{"_index":1190,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["executioncontext",{"_index":305,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{},"miscellaneous/variables.html":{}}}],["exp",{"_index":702,"title":{},"body":{"interfaces/IRefreshHash.html":{}}}],["expiresin",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["exports",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["exports:[routerservice",{"_index":884,"title":{},"body":{"modules/RouterModule.html":{}}}],["exports:[usersservice",{"_index":1036,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":663,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"injectables/localStrategy.html":{}}}],["extractjwt",{"_index":743,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors([(request:request",{"_index":920,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["false",{"_index":867,"title":{},"body":{"guards/RouterGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["filter",{"_index":596,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["filter:string",{"_index":599,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["filteruser",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruser(@res",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruser(res",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["filteruserdto",{"_index":594,"title":{"classes/FilterUserDto.html":{}},"body":{"classes/FilterUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["findall",{"_index":318,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@res",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(res",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":319,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":345,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":325,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('no",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["formato",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["framework",{"_index":1228,"title":{},"body":{"index.html":{}}}],["function",{"_index":939,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1215,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":326,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["get('auth/logout",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfreshtoken",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfreshtoken(_id",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfreshtoken(_id:string",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":1224,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettoken(_id",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1058,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(id",{"_index":1060,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername(username",{"_index":1063,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter(username",{"_index":1065,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusernamefilter(username:string):promise",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":878,"title":{},"body":{"modules/RouterModule.html":{}}}],["globalservice",{"_index":600,"title":{"classes/GlobalService.html":{}},"body":{"classes/GlobalService.html":{},"injectables/RouterService.html":{},"coverage.html":{}}}],["grow",{"_index":1261,"title":{},"body":{"index.html":{}}}],["guard",{"_index":299,"title":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":301,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{},"overview.html":{}}}],["guestguard",{"_index":56,"title":{"guards/GuestGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/GuestGuard.html":{},"coverage.html":{}}}],["habilite",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlerequest",{"_index":723,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(err",{"_index":724,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["hash",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{}}}],["hash.interface",{"_index":711,"title":{},"body":{"interfaces/IUser.html":{}}}],["hash.save",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{}}}],["hash:{type",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasheada",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["hashhelper",{"_index":255,"title":{"classes/HashHelper.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"coverage.html":{}}}],["hashhelper.compare(password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.comparehashrefreshtoken(usertoken.hashrefreshtoken",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.encrypt(this.password",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashhelper.hashrefreshtoken(refreshtoken",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashhelper.tokengenerator",{"_index":376,"title":{},"body":{"injectables/BranchService.html":{}}}],["hashmodel",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashrefreshtoken",{"_index":621,"title":{},"body":{"classes/HashHelper.html":{},"interfaces/IHash.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["hashrefreshtoken(str",{"_index":644,"title":{},"body":{"classes/HashHelper.html":{}}}],["hashschema",{"_index":1031,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["header",{"_index":864,"title":{},"body":{"guards/RouterGuard.html":{}}}],["hello",{"_index":198,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1271,"title":{},"body":{"index.html":{}}}],["html",{"_index":1176,"title":{},"body":{"dependencies.html":{},"classes/sanitizeHelper.html":{}}}],["httpcode",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(httpstatus.ok",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["https://nestjs.com",{"_index":1278,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["iat",{"_index":703,"title":{},"body":{"interfaces/IRefreshHash.html":{}}}],["ibranch",{"_index":371,"title":{"interfaces/IBranch.html":{}},"body":{"injectables/BranchService.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"coverage.html":{}}}],["id",{"_index":328,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["if(!_id",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!access",{"_index":872,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(!data",{"_index":922,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["if(!header",{"_index":866,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(!payload",{"_index":924,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["if(err",{"_index":729,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["if(header",{"_index":868,"title":{},"body":{"guards/RouterGuard.html":{}}}],["if(mail",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(user",{"_index":732,"title":{},"body":{"injectables/JwtNoAuthGuard.html":{},"injectables/UsersService.html":{}}}],["if(username",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["iguales",{"_index":636,"title":{},"body":{"classes/HashHelper.html":{}}}],["ihash",{"_index":666,"title":{"interfaces/IHash.html":{}},"body":{"interfaces/IHash.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["implements",{"_index":310,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"guards/RouterGuard.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["ingresado",{"_index":631,"title":{},"body":{"classes/HashHelper.html":{}}}],["ingresar",{"_index":419,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{}}}],["inject",{"_index":863,"title":{},"body":{"guards/RouterGuard.html":{}}}],["injectable",{"_index":192,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["injectmodel",{"_index":368,"title":{},"body":{"injectables/BranchService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('branch",{"_index":373,"title":{},"body":{"injectables/BranchService.html":{}}}],["injectmodel('hash",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel('profile",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel('roles",{"_index":831,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectmodel('user",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1239,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1241,"title":{},"body":{"index.html":{}}}],["interes",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["interes.'})@transform",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["interface",{"_index":660,"title":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{}},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"coverage.html":{}}}],["interface/branch.interface",{"_index":372,"title":{},"body":{"injectables/BranchService.html":{}}}],["interface/hash.interface",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{}}}],["interface/profile.interface",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["interface/roles.interface",{"_index":830,"title":{},"body":{"injectables/RolesService.html":{}}}],["interface/router.interface",{"_index":898,"title":{},"body":{"injectables/RouterService.html":{}}}],["interface/user.interface",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["interfaces",{"_index":661,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"overview.html":{}}}],["invalidos",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["ipermisssion",{"_index":673,"title":{"interfaces/IPermisssion.html":{}},"body":{"interfaces/IPermisssion.html":{},"interfaces/IRoles.html":{},"coverage.html":{}}}],["iprofile",{"_index":688,"title":{"interfaces/IProfile.html":{}},"body":{"interfaces/IProfile.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["irefreshhash",{"_index":72,"title":{"interfaces/IRefreshHash.html":{}},"body":{"controllers/AppController.html":{},"interfaces/IRefreshHash.html":{},"coverage.html":{}}}],["iroles",{"_index":693,"title":{"interfaces/IRoles.html":{}},"body":{"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["irouter",{"_index":707,"title":{"interfaces/IRouter.html":{}},"body":{"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"coverage.html":{}}}],["isarray",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isarray()@isstring({each",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@transform",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isempty",{"_index":471,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum",{"_index":426,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/FilterUserDto.html":{}}}],["isenum(eroles",{"_index":475,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum(eroles)@isnotempty()@transform",{"_index":469,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isenum(estatusbranch",{"_index":453,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isenum(estatusbranch)@isnotempty({message",{"_index":411,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isglobal:true",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":427,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{}}}],["ismongoid()@isnotempty",{"_index":481,"title":{},"body":{"classes/CreateRouterDto.html":{}}}],["ismongoid({message",{"_index":463,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["ismongoid({message:'debe",{"_index":450,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["ismongoid({message:'el",{"_index":477,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["isnotempty",{"_index":428,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isnotempty({message",{"_index":416,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["isnotempty({message:'debe",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring({message",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumberstring({message:'debe",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":472,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring",{"_index":429,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isstring()@isnotempty()@transform",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({message",{"_index":389,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["isstring({message:'debe",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["iuser",{"_index":23,"title":{"interfaces/IUser.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iuserhash",{"_index":42,"title":{"interfaces/IUserHash.html":{}},"body":{"controllers/AppController.html":{},"interfaces/IUserHash.html":{},"coverage.html":{}}}],["join",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["json",{"_index":612,"title":{},"body":{"classes/GlobalService.html":{}}}],["jwt",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":57,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtlocalauthguard",{"_index":64,"title":{"injectables/JwtLocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtLocalAuthGuard.html":{},"coverage.html":{}}}],["jwtlocalauthguard)@post('auth/v2/login",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtmodule",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnoauthguard",{"_index":78,"title":{"injectables/JwtNoAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtNoAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtrefreshguard",{"_index":74,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsession",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["jwtsession()@delete(':id",{"_index":844,"title":{},"body":{"controllers/RouterController.html":{}}}],["jwtsession()@get",{"_index":840,"title":{},"body":{"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["jwtsession()@get(':id",{"_index":842,"title":{},"body":{"controllers/RouterController.html":{}}}],["jwtsession()@get('profile",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["jwtsession()@patch(':id",{"_index":847,"title":{},"body":{"controllers/RouterController.html":{}}}],["jwtsession()@post",{"_index":838,"title":{},"body":{"controllers/RouterController.html":{}}}],["jwtsession()@post('auth/v2/logout')@httpcode(httpstatus.ok",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtsession(...roles",{"_index":1222,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jwtstrategy",{"_index":204,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1275,"title":{},"body":{"index.html":{}}}],["la",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["las",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["lastlogin",{"_index":690,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["lastlogin:date",{"_index":700,"title":{},"body":{"interfaces/IProfile.html":{}}}],["lastname",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["lastname:string",{"_index":695,"title":{},"body":{"interfaces/IProfile.html":{}}}],["letras",{"_index":441,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@apiproperty",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@maxlength(16",{"_index":400,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["letras.'})@transform",{"_index":403,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["license",{"_index":1281,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1258,"title":{},"body":{"index.html":{}}}],["limit",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["limpiar",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["list",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lista",{"_index":1195,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lo",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["local",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtLocalAuthGuard.html":{},"coverage.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["localauthguard",{"_index":58,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":207,"title":{"injectables/localStrategy.html":{}},"body":{"modules/AuthModule.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"overview.html":{}}}],["login",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["login(user",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginjwt",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["loginjwt(@user",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["loginjwt(user",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["logout",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["logout(@request",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["logout(req",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["logout(user",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutjwt",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["logoutjwt(@user",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["logoutjwt(user",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["mail",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["maintenance",{"_index":1209,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mas",{"_index":399,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["match",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":430,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.onlynumbers",{"_index":447,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.onlynumbersplusspace",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.onlytext",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.onlytextfirst3",{"_index":562,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matches(regexhelper.phonenumbervalidator",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(regexhelper.specialcharacters",{"_index":404,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["matching",{"_index":129,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["max:8",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximo",{"_index":401,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength",{"_index":431,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength(12",{"_index":572,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(15",{"_index":570,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(16",{"_index":442,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["maxlength(16,{message:'la",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["menos",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["message:'desconectado",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["message:'el",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["message:'la",{"_index":445,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["message:'no",{"_index":563,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["message:'usuario",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["metadata",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":606,"title":{},"body":{"classes/GlobalService.html":{},"interfaces/IPermisssion.html":{},"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"miscellaneous/variables.html":{}}}],["method:string",{"_index":682,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["min:1",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimo",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":432,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["minlength(12",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(15",{"_index":569,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":440,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["minlength(5",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5,{message:'la",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1178,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1257,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1247,"title":{},"body":{"index.html":{}}}],["model",{"_index":360,"title":{},"body":{"injectables/BranchService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":130,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":132,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":1158,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":369,"title":{},"body":{"injectables/BranchService.html":{},"classes/CreateRoleDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.types.objectid",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":355,"title":{},"body":{"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.database_host,{usenewurlparser",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["mongostore",{"_index":1132,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1270,"title":{},"body":{"index.html":{}}}],["mostrar",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["myśliwiec",{"_index":1276,"title":{},"body":{"index.html":{}}}],["name",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["name:'branch",{"_index":356,"title":{},"body":{"modules/BranchModule.html":{}}}],["name:'hash",{"_index":1035,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:'permission",{"_index":785,"title":{},"body":{"modules/PermissionModule.html":{}}}],["name:'profile",{"_index":1034,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:'roles",{"_index":820,"title":{},"body":{"modules/RolesModule.html":{}}}],["name:'router",{"_index":882,"title":{},"body":{"modules/RouterModule.html":{}}}],["name:'user",{"_index":1033,"title":{},"body":{"modules/UsersModule.html":{}}}],["name:string",{"_index":449,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"interfaces/IBranch.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{}}}],["name:{type:string",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestframework",{"_index":1280,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["nestjs/config",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["nestjs/platform",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":423,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.js",{"_index":1227,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":461,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{}}}],["normal",{"_index":1213,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1240,"title":{},"body":{"index.html":{}}}],["null",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["numero",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["numeros",{"_index":448,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["numeros.'})@apiproperty",{"_index":409,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["numeros.'})@matches(regexhelper.onlytextfirst3",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["o",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["observable",{"_index":308,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"guards/RouterGuard.html":{}}}],["onlynumbers",{"_index":1301,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlynumbersplusspace",{"_index":1302,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlytext",{"_index":1303,"title":{},"body":{"classes/regexHelper.html":{}}}],["onlytextfirst3",{"_index":1304,"title":{},"body":{"classes/regexHelper.html":{}}}],["open",{"_index":1259,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["out",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1293,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1204,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":1146,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":334,"title":{},"body":{"controllers/BranchController.html":{},"classes/HashHelper.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"classes/sanitizeHelper.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["parser",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":949,"title":{},"body":{"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createbranchdto",{"_index":950,"title":{},"body":{"classes/UpdateBranchDto.html":{}}}],["partialtype(createpermissiondto",{"_index":952,"title":{},"body":{"classes/UpdatePermissionDto.html":{}}}],["partialtype(createroledto",{"_index":954,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createrouterdto",{"_index":957,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["partialtype(createuserdto",{"_index":962,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":745,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"injectables/localStrategy.html":{}}}],["passportmodule",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportserializer",{"_index":931,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["passportstrategy",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1285,"title":{},"body":{"injectables/localStrategy.html":{}}}],["passportstrategy(strategy,'jwt",{"_index":746,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1288,"title":{},"body":{"injectables/localStrategy.html":{}}}],["passreqtocallback:true",{"_index":923,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["passthrough",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["password",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["password:string",{"_index":715,"title":{},"body":{"interfaces/IUser.html":{}}}],["passwordfield",{"_index":1287,"title":{},"body":{"injectables/localStrategy.html":{}}}],["patch",{"_index":333,"title":{},"body":{"controllers/BranchController.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch(':id",{"_index":331,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalService.html":{},"injectables/RouterService.html":{}}}],["path:string",{"_index":911,"title":{},"body":{"injectables/RouterService.html":{}}}],["payload",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payloader:string",{"_index":947,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["pcreate",{"_index":675,"title":{},"body":{"interfaces/IPermisssion.html":{},"miscellaneous/variables.html":{}}}],["pcreate:string",{"_index":683,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["pdelete",{"_index":676,"title":{},"body":{"interfaces/IPermisssion.html":{},"miscellaneous/variables.html":{}}}],["pdelete:string",{"_index":686,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["perfil",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["permiso",{"_index":464,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["permission",{"_index":460,"title":{},"body":{"classes/CreateRoleDto.html":{},"interfaces/IRoles.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["permission.controller",{"_index":782,"title":{},"body":{"modules/PermissionModule.html":{}}}],["permission.dto",{"_index":771,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{}}}],["permission.dto.ts",{"_index":456,"title":{},"body":{"classes/CreatePermissionDto.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["permission.service",{"_index":770,"title":{},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{}}}],["permission/permission.module",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["permission:[{type:mongoose.types.objectid",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissioncontroller",{"_index":757,"title":{"controllers/PermissionController.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"coverage.html":{}}}],["permissionmodule",{"_index":139,"title":{"modules/PermissionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"modules.html":{},"overview.html":{}}}],["permissionschema",{"_index":783,"title":{},"body":{"modules/PermissionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionservice",{"_index":769,"title":{"injectables/PermissionService.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"coverage.html":{},"overview.html":{}}}],["permiten",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["phone",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["phone:string",{"_index":571,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["phonenumbervalidator",{"_index":1305,"title":{},"body":{"classes/regexHelper.html":{}}}],["picture",{"_index":691,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["picture:string",{"_index":698,"title":{},"body":{"interfaces/IProfile.html":{}}}],["plano",{"_index":643,"title":{},"body":{"classes/HashHelper.html":{}}}],["please",{"_index":1268,"title":{},"body":{"index.html":{}}}],["populate('profile",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{}}}],["por",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["post",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/BranchController.html":{},"classes/GlobalService.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('auth/login",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/v2/login",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/v2/logout",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/v2/refresh",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["post('create",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('filter/user",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["pre(\"save",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pread",{"_index":677,"title":{},"body":{"interfaces/IPermisssion.html":{},"miscellaneous/variables.html":{}}}],["pread:string",{"_index":684,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["prefix",{"_index":315,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["primeras",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["private",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_access_token_expiration_time",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_refresh_expiration_time",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_refresh_token_secret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["process.env.jwt_secret",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":1249,"title":{},"body":{"index.html":{}}}],["profile",{"_index":710,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile(@res",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(res",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile._id.tostring",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["profile.interface",{"_index":712,"title":{},"body":{"interfaces/IUser.html":{}}}],["profile.save",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["profile:iprofile",{"_index":714,"title":{},"body":{"interfaces/IUser.html":{}}}],["profile:{type",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profileid",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["profilemodel",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["profileschema",{"_index":1029,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1226,"title":{},"body":{"index.html":{}}}],["project",{"_index":1260,"title":{},"body":{"index.html":{}}}],["promise",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"classes/HashHelper.html":{},"injectables/UsersService.html":{},"classes/sanitizeHelper.html":{}}}],["promise.all",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":387,"title":{"properties.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"classes/UpdateRouterDto.html":{},"properties.html":{},"classes/regexHelper.html":{}}}],["provide",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":652,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["puede",{"_index":405,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["pupdate",{"_index":678,"title":{},"body":{"interfaces/IPermisssion.html":{},"miscellaneous/variables.html":{}}}],["pupdate:string",{"_index":685,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["que",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["read",{"_index":1269,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"controllers/UsersController.html":{},"injectables/localStrategy.html":{}}}],["ref:'branch",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'hash",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'permission",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'profile",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'rol",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ref:'roles",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref:'sede",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ref:'user",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":727,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{}}}],["refresh",{"_index":735,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{}}}],["refresh.guard",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["refresh.guard.ts",{"_index":733,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.guard.ts:6",{"_index":734,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh_token",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRefreshHash.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(_id",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtokens(@user",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtokens(user",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["regexhelper",{"_index":436,"title":{"classes/regexHelper.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"coverage.html":{},"classes/regexHelper.html":{}}}],["remove",{"_index":759,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":777,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":764,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":795,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":1238,"title":{},"body":{"index.html":{}}}],["req",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["req.get('authorization').replace('bearer','').trim",{"_index":927,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req.logout",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["req?.signedcookies.authorization",{"_index":926,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["request",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/RouterGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.headers.code",{"_index":865,"title":{},"body":{"guards/RouterGuard.html":{},"miscellaneous/variables.html":{}}}],["request.isauthenticated",{"_index":312,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"guards/GuestGuard.html":{}}}],["request.route.path",{"_index":871,"title":{},"body":{"guards/RouterGuard.html":{}}}],["request.user",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request?.signedcookies.authorization",{"_index":921,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["require",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('connect",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('crypto",{"_index":651,"title":{},"body":{"classes/HashHelper.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required:true",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["res({passthrough:true",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["res,@body",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.clearcookie('authorization",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["res.cookie('authorization",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(available",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(users",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["result",{"_index":754,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/RouterService.html":{}}}],["results",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/localStrategy.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":633,"title":{},"body":{"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["return",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{}}}],["revisar",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rimraf",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":834,"title":{},"body":{"injectables/RolesService.html":{}}}],["role.dto",{"_index":807,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":459,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:14",{"_index":462,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:19",{"_index":470,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:24",{"_index":467,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["rolemodel",{"_index":824,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles.controller",{"_index":817,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.save",{"_index":833,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles.service",{"_index":806,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/roles.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["roles:[string",{"_index":696,"title":{},"body":{"interfaces/IProfile.html":{}}}],["rolesbranch",{"_index":692,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["rolesbranch:iroles",{"_index":697,"title":{},"body":{"interfaces/IProfile.html":{}}}],["rolesbuilder",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":796,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":140,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesschema",{"_index":818,"title":{},"body":{"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolessede",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["rolesservice",{"_index":805,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["rootpath",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":679,"title":{},"body":{"interfaces/IPermisssion.html":{},"interfaces/IRouter.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"miscellaneous/variables.html":{}}}],["router.controller",{"_index":879,"title":{},"body":{"modules/RouterModule.html":{}}}],["router.dto",{"_index":850,"title":{},"body":{"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{}}}],["router.dto.ts",{"_index":480,"title":{},"body":{"classes/CreateRouterDto.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["router.dto.ts:5",{"_index":956,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["router.dto.ts:6",{"_index":482,"title":{},"body":{"classes/CreateRouterDto.html":{}}}],["router.push({method:element.method,router:element.path,branch:branch,status:true",{"_index":907,"title":{},"body":{"injectables/RouterService.html":{}}}],["router.service",{"_index":849,"title":{},"body":{"controllers/RouterController.html":{},"modules/RouterModule.html":{}}}],["router/router.module",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["router:string",{"_index":681,"title":{},"body":{"interfaces/IPermisssion.html":{}}}],["routercontroller",{"_index":835,"title":{"controllers/RouterController.html":{}},"body":{"controllers/RouterController.html":{},"modules/RouterModule.html":{},"coverage.html":{}}}],["routerguard",{"_index":858,"title":{"guards/RouterGuard.html":{}},"body":{"guards/RouterGuard.html":{},"coverage.html":{}}}],["routermodel",{"_index":888,"title":{},"body":{"injectables/RouterService.html":{}}}],["routermodule",{"_index":141,"title":{"modules/RouterModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RouterModule.html":{},"modules.html":{},"overview.html":{}}}],["routerschema",{"_index":880,"title":{},"body":{"modules/RouterModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routerservice",{"_index":361,"title":{"injectables/RouterService.html":{}},"body":{"injectables/BranchService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"coverage.html":{},"overview.html":{}}}],["routerservice:routerservice",{"_index":374,"title":{},"body":{"injectables/BranchService.html":{},"guards/RouterGuard.html":{}}}],["routes",{"_index":602,"title":{},"body":{"classes/GlobalService.html":{}}}],["routesblocked",{"_index":603,"title":{},"body":{"classes/GlobalService.html":{}}}],["rt",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtstrategy",{"_index":205,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1244,"title":{},"body":{"index.html":{}}}],["rut",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["rut:string",{"_index":573,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["rut:{type:string",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ruta",{"_index":1198,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rutas",{"_index":1196,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rutvalidar",{"_index":1306,"title":{},"body":{"classes/regexHelper.html":{}}}],["rxjs",{"_index":309,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"guards/RouterGuard.html":{},"dependencies.html":{}}}],["s]+(\\d{1,3",{"_index":1321,"title":{},"body":{"classes/regexHelper.html":{}}}],["s]+(\\d{4,10",{"_index":1322,"title":{},"body":{"classes/regexHelper.html":{}}}],["salt",{"_index":617,"title":{},"body":{"classes/HashHelper.html":{}}}],["samesite:true",{"_index":105,"title":{},"body":{"controllers/AppController.html":{}}}],["sanitize",{"_index":1175,"title":{},"body":{"dependencies.html":{},"classes/sanitizeHelper.html":{}}}],["sanitizehelper",{"_index":437,"title":{"classes/sanitizeHelper.html":{}},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"coverage.html":{},"classes/sanitizeHelper.html":{}}}],["sanitizehelper.satinizeonlyscripts(value",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sanitizehelper.satonizeall(value",{"_index":444,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["sanitizehelper.satonizeallarray(value",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sanitizehtml",{"_index":1341,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["sanitizehtml(str",{"_index":1343,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizado",{"_index":1336,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizador",{"_index":1335,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts",{"_index":1328,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts(str",{"_index":1331,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satinizeonlyscripts(str:string):string",{"_index":1348,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeall",{"_index":1329,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeall(str",{"_index":1333,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeallarray",{"_index":1330,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["satonizeallarray(str",{"_index":1337,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["scalable",{"_index":1231,"title":{},"body":{"index.html":{}}}],["schema",{"_index":357,"title":{},"body":{"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema:routerschema",{"_index":883,"title":{},"body":{"modules/RouterModule.html":{}}}],["schemas/branch.schema",{"_index":354,"title":{},"body":{"modules/BranchModule.html":{}}}],["schemas/hash.schema",{"_index":1032,"title":{},"body":{"modules/UsersModule.html":{}}}],["schemas/permission.schema",{"_index":784,"title":{},"body":{"modules/PermissionModule.html":{}}}],["schemas/profile.schema",{"_index":1030,"title":{},"body":{"modules/UsersModule.html":{}}}],["schemas/roles.schema",{"_index":819,"title":{},"body":{"modules/RolesModule.html":{}}}],["schemas/router.schema",{"_index":881,"title":{},"body":{"modules/RouterModule.html":{}}}],["schemas/user.schema",{"_index":1028,"title":{},"body":{"modules/UsersModule.html":{}}}],["se",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{}}}],["secret",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure:true",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["sede",{"_index":390,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{}}}],["selecionar",{"_index":417,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["select",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select('+password",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{}}}],["semesterprogress",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["semesterprogress:number",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["semesterprogress:{type:number",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestre",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ser",{"_index":392,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["serializer/session.serializer",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["serializeuser",{"_index":933,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser(user",{"_index":940,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["server",{"_index":1232,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["session()@get('auth/logout",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["session(...roles",{"_index":1223,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sessions",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["sessionserializer",{"_index":206,"title":{"injectables/SessionSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["setmetadata('ispublic',true",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":634,"title":{},"body":{"classes/HashHelper.html":{}}}],["side",{"_index":1233,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["siguiente",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["simbolo",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sistema",{"_index":1201,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["solo",{"_index":408,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["son",{"_index":635,"title":{},"body":{"classes/HashHelper.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"modules/BranchModule.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreatePermissionDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"modules/RouterModule.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateBranchDto.html":{},"classes/UpdatePermissionDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateRouterDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"injectables/localStrategy.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["specialcharacters",{"_index":1307,"title":{},"body":{"classes/regexHelper.html":{}}}],["sponsors",{"_index":1263,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":1181,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1216,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../branch",{"_index":1189,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../branch.decorator.ts",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../branch.schema.ts",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crud.enum.ts",{"_index":1184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../hash.helper.ts",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.schema.ts",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwtsession.decorator.ts",{"_index":1218,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1217,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../method.enum.ts",{"_index":1186,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../permission.schema.ts",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.schema.ts",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1187,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.schema.ts",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../router.schema.ts",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":1219,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":1194,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username",{"_index":1191,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:31",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:41",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:54",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:69",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.roles.ts",{"_index":1107,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guards/authenticated.guard.ts",{"_index":302,"title":{},"body":{"guards/AuthenticatedGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authenticated.guard.ts:6",{"_index":306,"title":{},"body":{"guards/AuthenticatedGuard.html":{}}}],["src/auth/guards/guest.guard.ts",{"_index":614,"title":{},"body":{"guards/GuestGuard.html":{},"coverage.html":{}}}],["src/auth/guards/guest.guard.ts:5",{"_index":615,"title":{},"body":{"guards/GuestGuard.html":{}}}],["src/auth/guards/jwt",{"_index":721,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtLocalAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":752,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/router.guard.ts",{"_index":859,"title":{},"body":{"guards/RouterGuard.html":{},"coverage.html":{}}}],["src/auth/guards/router.guard.ts:10",{"_index":862,"title":{},"body":{"guards/RouterGuard.html":{}}}],["src/auth/guards/router.guard.ts:7",{"_index":861,"title":{},"body":{"guards/RouterGuard.html":{}}}],["src/auth/serializer/session.serializer.ts",{"_index":930,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["src/auth/serializer/session.serializer.ts:10",{"_index":938,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/serializer/session.serializer.ts:7",{"_index":942,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1113,"title":{},"body":{"coverage.html":{},"injectables/localStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:16",{"_index":1284,"title":{},"body":{"injectables/localStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":1283,"title":{},"body":{"injectables/localStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts",{"_index":915,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/rt.strategy.ts:23",{"_index":918,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts:8",{"_index":916,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/branch/branch.controller.ts",{"_index":314,"title":{},"body":{"controllers/BranchController.html":{},"coverage.html":{}}}],["src/branch/branch.controller.ts:11",{"_index":323,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:16",{"_index":324,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:21",{"_index":327,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.controller.ts:26",{"_index":332,"title":{},"body":{"controllers/BranchController.html":{}}}],["src/branch/branch.module.ts",{"_index":351,"title":{},"body":{"modules/BranchModule.html":{}}}],["src/branch/branch.service.ts",{"_index":358,"title":{},"body":{"injectables/BranchService.html":{},"coverage.html":{}}}],["src/branch/branch.service.ts:11",{"_index":362,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:16",{"_index":364,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:26",{"_index":365,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:31",{"_index":366,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/branch.service.ts:36",{"_index":367,"title":{},"body":{"injectables/BranchService.html":{}}}],["src/branch/dto/create",{"_index":385,"title":{},"body":{"classes/CreateBranchDto.html":{},"coverage.html":{}}}],["src/branch/dto/update",{"_index":948,"title":{},"body":{"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["src/branch/interface/branch.interface",{"_index":680,"title":{},"body":{"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{}}}],["src/branch/interface/branch.interface.ts",{"_index":662,"title":{},"body":{"interfaces/IBranch.html":{},"coverage.html":{}}}],["src/branch/schemas/branch.schema.ts",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/auth.decorator.ts",{"_index":1117,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/branch.decorator.ts",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/jwtsession.decorator.ts",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/session.decorator.ts",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1123,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/enum",{"_index":435,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["src/common/enum/branch",{"_index":1208,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/crud.enum.ts",{"_index":1203,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/method.enum.ts",{"_index":1205,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/roles",{"_index":473,"title":{},"body":{"classes/CreateRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/enum/user",{"_index":1211,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/username",{"_index":1210,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/helper",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["src/common/helper/hash.helper.ts",{"_index":616,"title":{},"body":{"classes/HashHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helper/hash.helper.ts:13",{"_index":641,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:23",{"_index":627,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:27",{"_index":646,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:31",{"_index":645,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:35",{"_index":639,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/hash.helper.ts:6",{"_index":624,"title":{},"body":{"classes/HashHelper.html":{}}}],["src/common/helper/regex.helper.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:3",{"_index":1309,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:4",{"_index":1327,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:5",{"_index":1319,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:6",{"_index":1316,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:7",{"_index":1323,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:8",{"_index":1310,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/regex.helper.ts:9",{"_index":1326,"title":{},"body":{"classes/regexHelper.html":{}}}],["src/common/helper/satinize.helper.ts",{"_index":1127,"title":{},"body":{"coverage.html":{},"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:10",{"_index":1334,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:15",{"_index":1332,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/helper/satinize.helper.ts:26",{"_index":1338,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["src/common/services/global.service",{"_index":897,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/common/services/global.service.ts",{"_index":601,"title":{},"body":{"classes/GlobalService.html":{},"coverage.html":{}}}],["src/common/services/global.service.ts:2",{"_index":604,"title":{},"body":{"classes/GlobalService.html":{}}}],["src/common/services/global.service.ts:3",{"_index":613,"title":{},"body":{"classes/GlobalService.html":{}}}],["src/common/types/refresh.type.ts",{"_index":718,"title":{},"body":{"interfaces/IUserHash.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/permission/dto/create",{"_index":455,"title":{},"body":{"classes/CreatePermissionDto.html":{},"coverage.html":{}}}],["src/permission/dto/update",{"_index":951,"title":{},"body":{"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["src/permission/interface/permission.schema",{"_index":705,"title":{},"body":{"interfaces/IRoles.html":{}}}],["src/permission/interface/permission.schema.ts",{"_index":674,"title":{},"body":{"interfaces/IPermisssion.html":{},"coverage.html":{}}}],["src/permission/permission.controller.ts",{"_index":758,"title":{},"body":{"controllers/PermissionController.html":{},"coverage.html":{}}}],["src/permission/permission.controller.ts:11",{"_index":761,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:16",{"_index":762,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:21",{"_index":763,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:26",{"_index":768,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:31",{"_index":766,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.module.ts",{"_index":781,"title":{},"body":{"modules/PermissionModule.html":{}}}],["src/permission/permission.service.ts",{"_index":786,"title":{},"body":{"injectables/PermissionService.html":{},"coverage.html":{}}}],["src/permission/permission.service.ts:11",{"_index":788,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:15",{"_index":789,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:19",{"_index":791,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:23",{"_index":790,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:7",{"_index":787,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/schemas/permission.schema.ts",{"_index":1134,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/dto/create",{"_index":458,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/update",{"_index":953,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/roles/interface/roles.interface",{"_index":694,"title":{},"body":{"interfaces/IProfile.html":{},"interfaces/IUser.html":{}}}],["src/roles/interface/roles.interface.ts",{"_index":704,"title":{},"body":{"interfaces/IRoles.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts",{"_index":797,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:11",{"_index":799,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:16",{"_index":800,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:21",{"_index":801,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":804,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:31",{"_index":802,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":816,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":821,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:14",{"_index":825,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:22",{"_index":826,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:26",{"_index":827,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:30",{"_index":829,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:34",{"_index":828,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:9",{"_index":823,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/schemas/roles.schema.ts",{"_index":1136,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/router/dto/create",{"_index":479,"title":{},"body":{"classes/CreateRouterDto.html":{},"coverage.html":{}}}],["src/router/dto/update",{"_index":955,"title":{},"body":{"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["src/router/interface/router.interface.ts",{"_index":708,"title":{},"body":{"interfaces/IRouter.html":{},"coverage.html":{}}}],["src/router/router.controller.ts",{"_index":836,"title":{},"body":{"controllers/RouterController.html":{},"coverage.html":{}}}],["src/router/router.controller.ts:13",{"_index":839,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.controller.ts:19",{"_index":841,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.controller.ts:25",{"_index":843,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.controller.ts:32",{"_index":848,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.controller.ts:38",{"_index":845,"title":{},"body":{"controllers/RouterController.html":{}}}],["src/router/router.module.ts",{"_index":877,"title":{},"body":{"modules/RouterModule.html":{}}}],["src/router/router.service",{"_index":370,"title":{},"body":{"injectables/BranchService.html":{},"guards/RouterGuard.html":{}}}],["src/router/router.service.ts",{"_index":885,"title":{},"body":{"injectables/RouterService.html":{},"coverage.html":{}}}],["src/router/router.service.ts:10",{"_index":887,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:13",{"_index":892,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:25",{"_index":893,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:28",{"_index":894,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:33",{"_index":890,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:39",{"_index":896,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/router.service.ts:45",{"_index":895,"title":{},"body":{"injectables/RouterService.html":{}}}],["src/router/schemas/router.schema.ts",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/filter",{"_index":595,"title":{},"body":{"classes/FilterUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":960,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/interface/hash.interface.ts",{"_index":667,"title":{},"body":{"interfaces/IHash.html":{},"coverage.html":{}}}],["src/users/interface/profile.interface.ts",{"_index":689,"title":{},"body":{"interfaces/IProfile.html":{},"coverage.html":{}}}],["src/users/interface/refresh.interface.ts",{"_index":701,"title":{},"body":{"interfaces/IRefreshHash.html":{},"coverage.html":{}}}],["src/users/interface/user.interface",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IBranch.html":{}}}],["src/users/interface/user.interface.ts",{"_index":709,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/schemas/hash.schema.ts",{"_index":1140,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/profile.schema.ts",{"_index":1141,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":1142,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:16",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:32",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:48",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:66",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":1025,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":1068,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":1067,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1066,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":1059,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":1064,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1062,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1245,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1248,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1250,"title":{},"body":{"index.html":{}}}],["started",{"_index":1225,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1237,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"dependencies.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{}}}],["status",{"_index":388,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IBranch.html":{},"interfaces/IProfile.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{},"miscellaneous/variables.html":{}}}],["status.enum",{"_index":474,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["status.enum.ts",{"_index":1188,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status:boolean",{"_index":958,"title":{},"body":{"classes/UpdateRouterDto.html":{}}}],["status:eroles",{"_index":476,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["status:string",{"_index":706,"title":{},"body":{"interfaces/IRoles.html":{}}}],["statususer",{"_index":1193,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["statususer.waiting",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stay",{"_index":1272,"title":{},"body":{"index.html":{}}}],["str",{"_index":632,"title":{},"body":{"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["str.foreach((i",{"_index":1350,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["strategies/jwt.strategy",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/rt.strategy",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":744,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["string",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["string):string",{"_index":1342,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["string[]):string",{"_index":1349,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["su",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["sub",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IUserHash.html":{},"injectables/JwtStrategy.html":{}}}],["sub:payload.sub",{"_index":929,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["sub:string",{"_index":720,"title":{},"body":{"interfaces/IUserHash.html":{}}}],["success",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["super",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["super.canactivate(context",{"_index":755,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["super.login(request",{"_index":756,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["support",{"_index":1264,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1291,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1145,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["telefono",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["tema",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["tener",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test",{"_index":1253,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1256,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1255,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1252,"title":{},"body":{"index.html":{}}}],["texto",{"_index":438,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"classes/sanitizeHelper.html":{}}}],["texto.'})@apiproperty",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["texto.'})@isnotempty({message",{"_index":394,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["textos",{"_index":1340,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["thanks",{"_index":1262,"title":{},"body":{"index.html":{}}}],["themesinterest",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["themesinterest:[string",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IProfile.html":{}}}],["then(u",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login(user",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(user",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(user.sub,user.token",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateusername(username",{"_index":1289,"title":{},"body":{"injectables/localStrategy.html":{}}}],["this.branchmodel({...createbranchdto,token",{"_index":377,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchmodel.find",{"_index":381,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchmodel.findbyid(id",{"_index":382,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchmodel.findoneandupdate({_id:id},{updatebranchdto},{new:true",{"_index":383,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.branchservice.create(createbranchdto",{"_index":343,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.findall",{"_index":344,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.findone(id",{"_index":346,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.branchservice.update(id",{"_index":348,"title":{},"body":{"controllers/BranchController.html":{}}}],["this.gettoken(_id",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashmodel",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findone({user:_id",{"_index":1100,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findoneanddelete",{"_index":1101,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashmodel.findoneandupdate",{"_index":1093,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.ismodified('password",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.permissionservice.create(createpermissiondto",{"_index":773,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findall",{"_index":774,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findone(+id",{"_index":775,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.remove(+id",{"_index":778,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.update(+id",{"_index":776,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.profilemodel",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profilemodel.findone",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.rolemodel({...createroledto",{"_index":832,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create(createroledto",{"_index":809,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findall",{"_index":810,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":811,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.remove(+id",{"_index":813,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.update(+id",{"_index":812,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.routermodel.find({branch:id",{"_index":910,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.findbyidandupdate(id,{status},{new:true",{"_index":914,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.findone({router:path,method:method,branch",{"_index":913,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routermodel.insertmany(router",{"_index":909,"title":{},"body":{"injectables/RouterService.html":{}}}],["this.routerservice.access(request.method.tolowercase",{"_index":870,"title":{},"body":{"guards/RouterGuard.html":{}}}],["this.routerservice.create(branch._id",{"_index":378,"title":{},"body":{"injectables/BranchService.html":{}}}],["this.routerservice.create(createrouterdto",{"_index":853,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.routerservice.findall",{"_index":854,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.routerservice.findone(id",{"_index":855,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.routerservice.remove(+id",{"_index":857,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.routerservice.update(id",{"_index":856,"title":{},"body":{"controllers/RouterController.html":{}}}],["this.salt",{"_index":654,"title":{},"body":{"classes/HashHelper.html":{}}}],["this.updaterefreshtoken(_id",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({username",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.deletehashtoken(user._id",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getfreshtoken(_id",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getfreshtoken(user._id",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(_id",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserbyusername(username",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateorcreatehashtoken(_id",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(createuserdto.email",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(createuserdto.username",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyusername(user.username",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyusernamefilter(filteruserdto.filter",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{}}}],["todo",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":375,"title":{},"body":{"injectables/BranchService.html":{},"interfaces/IBranch.html":{},"interfaces/IUserHash.html":{},"injectables/UsersService.html":{}}}],["token:data",{"_index":928,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["token:string",{"_index":719,"title":{},"body":{"interfaces/IUserHash.html":{}}}],["token:{type:string",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokengenerator",{"_index":622,"title":{},"body":{"classes/HashHelper.html":{}}}],["tokens",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refresh_token",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1273,"title":{},"body":{"index.html":{}}}],["transform",{"_index":424,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["transformer",{"_index":425,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"dependencies.html":{}}}],["true",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"guards/RouterGuard.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["true,signed:true",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["true})@arraynotempty({message",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["try",{"_index":1092,"title":{},"body":{"injectables/UsersService.html":{}}}],["ttl",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1279,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"guards/AuthenticatedGuard.html":{},"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"guards/GuestGuard.html":{},"classes/HashHelper.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"interfaces/IPermisssion.html":{},"interfaces/IProfile.html":{},"interfaces/IRefreshHash.html":{},"interfaces/IRoles.html":{},"interfaces/IRouter.html":{},"interfaces/IUser.html":{},"interfaces/IUserHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"injectables/SessionSerializer.html":{},"classes/UpdateRouterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"injectables/localStrategy.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["type:[string",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type:boolean",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type:mongoose.types.objectid",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":1236,"title":{},"body":{"index.html":{}}}],["u",{"_index":1089,"title":{},"body":{"injectables/UsersService.html":{}}}],["u.id",{"_index":1091,"title":{},"body":{"injectables/UsersService.html":{}}}],["u00f1\\u00d1",{"_index":1315,"title":{},"body":{"classes/regexHelper.html":{}}}],["u00f1\\u00d1]*)*[a",{"_index":1314,"title":{},"body":{"classes/regexHelper.html":{}}}],["u00f1\\u00d1]+(\\s*[a",{"_index":1313,"title":{},"body":{"classes/regexHelper.html":{}}}],["un",{"_index":393,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/HashHelper.html":{},"controllers/UsersController.html":{}}}],["una",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unauthorizedexception",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/localStrategy.html":{}}}],["unauthorizedexception('el",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["undefined",{"_index":1221,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unit",{"_index":1251,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BranchService.html":{},"classes/HashHelper.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RolesService.html":{},"guards/RouterGuard.html":{},"injectables/RouterService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{}}}],["unlicensed",{"_index":1300,"title":{},"body":{"properties.html":{}}}],["update",{"_index":320,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":347,"title":{},"body":{"controllers/BranchController.html":{},"controllers/PermissionController.html":{},"controllers/RolesController.html":{},"controllers/RouterController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":329,"title":{},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/RouterController.html":{},"injectables/RouterService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatebranchdto",{"_index":330,"title":{"classes/UpdateBranchDto.html":{}},"body":{"controllers/BranchController.html":{},"injectables/BranchService.html":{},"classes/UpdateBranchDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":668,"title":{},"body":{"interfaces/IHash.html":{},"miscellaneous/variables.html":{}}}],["updatedat:date",{"_index":670,"title":{},"body":{"interfaces/IHash.html":{}}}],["updatedat:date.now",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateorcreatehashtoken",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateorcreatehashtoken(_id",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepermissiondto",{"_index":767,"title":{"classes/UpdatePermissionDto.html":{}},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/UpdatePermissionDto.html":{},"coverage.html":{}}}],["updaterefreshtoken",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(_id",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateroledto",{"_index":803,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updaterouterdto",{"_index":846,"title":{"classes/UpdateRouterDto.html":{}},"body":{"controllers/RouterController.html":{},"injectables/RouterService.html":{},"classes/UpdateRouterDto.html":{},"coverage.html":{}}}],["updates",{"_index":794,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":959,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useclass",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtnoauthguard",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtnoauthguard)@post('create",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtnoauthguard,jwtlocalauthguard",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtrefreshguard",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtrefreshguard)@post('auth/v2/refresh')@httpcode(httpstatus.ok",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(localauthguard",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(localauthguard)@post('auth/login",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtNoAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/SessionSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":961,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":597,"title":{},"body":{"classes/FilterUserDto.html":{}}}],["user.dto.ts:24",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:71",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:77",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.interface",{"_index":669,"title":{},"body":{"interfaces/IHash.html":{}}}],["user.password",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{}}}],["user:_id,hashrefreshtoken",{"_index":1094,"title":{},"body":{"injectables/UsersService.html":{}}}],["user:any",{"_index":944,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["user:iuser",{"_index":665,"title":{},"body":{"interfaces/IBranch.html":{},"interfaces/IHash.html":{},"controllers/UsersController.html":{}}}],["user:string",{"_index":452,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["user[data",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userinterface",{"_index":1061,"title":{},"body":{"injectables/UsersService.html":{}}}],["userinterface.id",{"_index":1090,"title":{},"body":{"injectables/UsersService.html":{}}}],["usermodel",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/localStrategy.html":{},"miscellaneous/variables.html":{}}}],["username:string",{"_index":713,"title":{},"body":{"interfaces/IUser.html":{}}}],["usernamefield",{"_index":1286,"title":{},"body":{"injectables/localStrategy.html":{}}}],["users",{"_index":965,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1026,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/interface/refresh.interface",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["users/interface/user.interface",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":1027,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":963,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["usersmodule",{"_index":142,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":233,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertoken",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["usuario",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"controllers/UsersController.html":{}}}],["usuario.'})@ismongoid({message",{"_index":418,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["v.method",{"_index":905,"title":{},"body":{"injectables/RouterService.html":{}}}],["v.path",{"_index":903,"title":{},"body":{"injectables/RouterService.html":{}}}],["vacio",{"_index":439,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["vacio.'})@minlength(3",{"_index":396,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{}}}],["vacio.'})@transform",{"_index":414,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateUserDto.html":{}}}],["validate",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["validate(payload",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":917,"title":{},"body":{"injectables/RtStrategy.html":{},"injectables/localStrategy.html":{}}}],["validateusername",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateusername(username",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":433,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateRouterDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"dependencies.html":{}}}],["valido",{"_index":451,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{}}}],["valido'})@transform",{"_index":420,"title":{},"body":{"classes/CreateBranchDto.html":{}}}],["valido.'})@isoptional()@transform",{"_index":466,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["value",{"_index":443,"title":{},"body":{"classes/CreateBranchDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FilterUserDto.html":{},"classes/GlobalService.html":{},"classes/HashHelper.html":{},"miscellaneous/enumerations.html":{},"classes/regexHelper.html":{},"classes/sanitizeHelper.html":{},"miscellaneous/variables.html":{}}}],["value.push(sanitizehtml(i",{"_index":1351,"title":{},"body":{"classes/sanitizeHelper.html":{}}}],["var",{"_index":901,"title":{},"body":{"injectables/RouterService.html":{},"injectables/UsersService.html":{}}}],["variable",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1352,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["ver",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["verified",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["verified:boolean",{"_index":717,"title":{},"body":{"interfaces/IUser.html":{}}}],["version",{"_index":1298,"title":{},"body":{"properties.html":{}}}],["void",{"_index":937,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["void):any",{"_index":945,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["waiting",{"_index":1212,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["watch",{"_index":1246,"title":{},"body":{"index.html":{}}}],["website",{"_index":1277,"title":{},"body":{"index.html":{}}}],["world",{"_index":199,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx.'})@matches(regexhelper.onlynumbersplusspace",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["xxxx.'})@maxlength(15",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["y",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HashHelper.html":{},"controllers/UsersController.html":{}}}],["yes",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["you'd",{"_index":1267,"title":{},"body":{"index.html":{}}}],["z",{"_index":1312,"title":{},"body":{"classes/regexHelper.html":{}}}],["z]){3,}\\d",{"_index":1318,"title":{},"body":{"classes/regexHelper.html":{}}}],["za",{"_index":1311,"title":{},"body":{"classes/regexHelper.html":{}}}],["zoom",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BranchModule.html":{},"modules/PermissionModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginJWT\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                LogoutJWT\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginJWT\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginJWT(user: IUser, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtNoAuthGuard, JwtLocalAuthGuard)@Post('auth/v2/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Session()@Get('auth/logout')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LogoutJWT\n                        \n                    \n                \n            \n            \n                \n                    \n                    LogoutJWT(user: IUser, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Post('auth/v2/logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(user: IUserHash, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Post('auth/v2/refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUserHash\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, UseGuards, Request, HttpCode, HttpStatus, Req, Body, Res, UnauthorizedException  } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { GuestGuard, JwtAuthGuard, LocalAuthGuard } from './auth/guards';\nimport { JWTSession, Session, User } from 'src/common/decorators';\nimport { IUser } from './users/interface/user.interface';\nimport { JwtLocalAuthGuard } from './auth/guards/jwt-local-auth.guard';\nimport { AuthService } from './auth/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IRefreshHash } from './users/interface/refresh.interface';\nimport { JwtRefreshGuard } from './auth/guards/jwt-refresh.guard';\nimport { Response } from 'express';\nimport { IUserHash } from './common/types/refresh.type';\nimport { JwtNoAuthGuard } from './auth/guards/jwt-no-auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly authService: AuthService,\n  ) {}\n\n  //------------SESSIONS-------------------\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login() {\n    return 'login';\n  }\n\n  @Session()\n  @Get('auth/logout')\n  async logout(@Request() req) {\n    await req.logout();\n    return { message: 'logout success' };\n  }\n\n \n  //-------------JWT-------------------\n\n  @UseGuards(JwtNoAuthGuard,JwtLocalAuthGuard)\n  @Post('auth/v2/login')\n  async loginJWT(@User() user: IUser, @Res({passthrough:true}) res: Response) {\n\n    const data = await this.authService.login(user);\n\n    res.cookie('Authorization', data.refresh_token,{httpOnly: true,signed:true, sameSite:true, secure:true})\n   \n    delete data.refresh_token;\n    return data;\n  }\n\n  @JWTSession()\n  @Post('auth/v2/logout')\n  @HttpCode(HttpStatus.OK)\n  async LogoutJWT(@User() user: IUser, @Res() res) {\n    \n    await this.authService.logout(user);\n\n    //TODO: VER COMO LIMPIAR LA COOKIE\n   // res.clearCookie('Authorization');\n\n    return res.status(HttpStatus.OK).json({\n      message:'desconectado'\n    });\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Post('auth/v2/refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshTokens(@User() user: IUserHash,\n  @Res({ passthrough: true }) res: Response\n  ) {\n    const data = await this.authService.refreshToken(user.sub,user.token);\n    res.cookie('Authorization', data.refresh_token,{httpOnly: true,signed:true, sameSite:true, secure:true})\n   \n    delete data.refresh_token;\n    return data;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBranchModule\n\nBranchModule\n\nAppModule -->\n\nBranchModule->AppModule\n\n\n\n\n\nPermissionModule\n\nPermissionModule\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRouterModule\n\nRouterModule\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BranchModule\n                        \n                        \n                            PermissionModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            RouterModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AccessControlModule } from 'nest-access-control';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { roles } from './app.roles';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { BranchModule } from './branch/branch.module';\nimport { PermissionModule } from './permission/permission.module';\nimport { RolesModule } from './roles/roles.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RouterModule } from './router/router.module';\n\n@Module({\n  imports: [\n    AccessControlModule.forRoles(roles),\n\n    ConfigModule.forRoot({ \n      isGlobal:true,\n      envFilePath:'.env'\n     }), \n     ThrottlerModule.forRoot({\n      ttl: 60,\n      limit: 100,\n    }),\n    MongooseModule.forRoot(process.env.DATABASE_HOST,{useNewUrlParser: true}),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    AuthModule, \n    UsersModule, BranchModule, PermissionModule, RolesModule, RouterModule],\n  controllers: [AppController],\n  providers: [AppService,{ provide: APP_GUARD, useClass: ThrottlerGuard }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nlocalStrategy\n\nlocalStrategy\n\nAuthModule -->\n\nlocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RtStrategy\n                        \n                        \n                            SessionSerializer\n                        \n                        \n                            localStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './auth.service';\nimport { SessionSerializer } from './serializer/session.serializer';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { localStrategy } from './strategies/local.strategy';\nimport { RtStrategy } from './strategies/rt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    PassportModule.register({\n      defaultStrategy: 'jwt', //jwt\n    }),\n    UsersModule,\n    PassportModule,\n    PassportModule.register({ session: true }),\n    JwtModule.register({\n    // secret: process.env.JWT_SECRET,\n    //  signOptions: { expiresIn: '60m' },\n    }),\n  ],\n\n  providers: [AuthService, localStrategy, SessionSerializer, JwtStrategy, RtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                            \n                                    Async\n                                validateUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(_id: string, roles?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(_id: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(_id: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUsername(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { HashHelper } from 'src/common/helper';\nimport { IUser } from 'src/users/interface/user.interface';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly userService: UsersService,\n        private jwtService: JwtService) { }\n\n    async validateUsername(username: string, password: string): Promise {\n        const user = await this.userService.getUserByUsername(username);\n        if (!user) throw new UnauthorizedException('El usuario o la contraseña con invalidos.');\n        if (user && await HashHelper.compare(password, user.password)) {\n            user.password= null;\n            return user;\n        }\n        return null;\n    }\n\n    async login(user: IUser) {\n        \n        const { _id } = user;\n        if(!_id) throw new UnauthorizedException('No se encuentra autorizado');\n\n        const tokens = await this.getToken(_id);\n        await this.updateRefreshToken(_id, tokens.refresh_token);\n        return tokens;\n    }\n\n    async logout(user: IUser) {\n        const userToken = await this.userService.getfreshToken(user._id);\n        if (!userToken) throw new ForbiddenException('No se encuentra autorizado');\n\n        const hash = await this.userService.deleteHashToken(user._id);\n    }\n\n    async refreshToken(_id: string, refreshToken: string) {\n        const userToken = await this.userService.getfreshToken(_id);\n        if (!userToken) throw new ForbiddenException('No se encuentra autorizado');\n\n        const match = await HashHelper.compareHashRefreshToken(userToken.hashRefreshToken, refreshToken);\n\n        if (!match) throw new ForbiddenException('No se encuentra autorizado');\n\n        const tokens = await this.getToken(_id);\n        await this.updateRefreshToken(_id, tokens.refresh_token);\n        return tokens;\n    }\n\n    async getToken(_id: string, roles?: string[]) {\n\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync({\n                sub: _id,\n\n            }, {\n                secret: process.env.JWT_SECRET,\n                expiresIn: process.env.JWT_ACCESS_TOKEN_EXPIRATION_TIME\n            }),\n            this.jwtService.signAsync({\n                sub: _id,\n            }, {\n                secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                expiresIn: process.env.JWT_REFRESH_EXPIRATION_TIME\n            })\n        ]);\n\n        return {\n            access_token: at,\n            refresh_token: rt\n        }\n\n\n    }\n\n    async updateRefreshToken(_id: string, refreshToken: string) {\n        const hash = await HashHelper.hashRefreshToken(refreshToken);\n        await this.userService.updateOrCreateHashToken(_id, hash);\n\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticatedGuard.html":{"url":"guards/AuthenticatedGuard.html","title":"guard - AuthenticatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authenticated.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authenticated.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class AuthenticatedGuard implements CanActivate{\n    canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        return request.isAuthenticated();\n     }\n    }\n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BranchController.html":{"url":"controllers/BranchController.html","title":"controller - BranchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BranchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/branch.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                branch\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createBranchDto: CreateBranchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBranchDto\n                                    \n                                                CreateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateBranchDto: UpdateBranchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/branch/branch.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBranchDto\n                                    \n                                                UpdateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { BranchService } from './branch.service';\nimport { CreateBranchDto } from './dto/create-branch.dto';\nimport { UpdateBranchDto } from './dto/update-branch.dto';\n\n@Controller('branch')\nexport class BranchController {\n  constructor(private readonly branchService: BranchService) {}\n\n  @Post()\n  create(@Body() createBranchDto: CreateBranchDto) {\n    return this.branchService.create(createBranchDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.branchService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.branchService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateBranchDto: UpdateBranchDto) {\n    return this.branchService.update(id, updateBranchDto);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BranchModule.html":{"url":"modules/BranchModule.html","title":"module - BranchModule","body":"\n                   \n\n\n\n\n    Modules\n    BranchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BranchModule\n\n\n\ncluster_BranchModule_providers\n\n\n\n\nBranchService\n\nBranchService\n\n\n\nBranchModule\n\nBranchModule\n\nBranchModule -->\n\nBranchService->BranchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/branch/branch.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BranchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BranchController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BranchService } from './branch.service';\nimport { BranchController } from './branch.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BranchSchema } from './schemas/branch.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'Branch', schema: BranchSchema},\n    ])\n  ],\n  controllers: [BranchController],\n  providers: [BranchService]\n})\nexport class BranchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BranchService.html":{"url":"injectables/BranchService.html","title":"injectable - BranchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BranchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/branch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(branchModel: Model, routerService: RouterService)\n                    \n                \n                        \n                            \n                                Defined in src/branch/branch.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        branchModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routerService\n                                                  \n                                                        \n                                                                        RouterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createBranchDto: CreateBranchDto)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBranchDto\n                                    \n                                                CreateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateBranchDto: UpdateBranchDto)\n                \n            \n\n\n            \n                \n                    Defined in src/branch/branch.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBranchDto\n                                    \n                                                UpdateBranchDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { HashHelper } from 'src/common/helper';\nimport { RouterService } from 'src/router/router.service';\nimport { CreateBranchDto } from './dto/create-branch.dto';\nimport { UpdateBranchDto } from './dto/update-branch.dto';\nimport { IBranch } from './interface/branch.interface';\n\n@Injectable()\nexport class BranchService {\n  constructor(\n    @InjectModel('Branch') private branchModel: Model,\n    private readonly routerService:RouterService){}\n\n  async create(createBranchDto: CreateBranchDto) {\n    const token = await HashHelper.tokenGenerator();\n    const branch = new this.branchModel({...createBranchDto,token });\n\n    await this.routerService.create(branch._id);\n    branch.save();\n    \n    return branch;\n  }\n\n  async findAll() {\n    const branches = await this.branchModel.find();\n    return branches;\n  }\n\n  async findOne(id: string) {\n    const branch = await this.branchModel.findById(id);\n    return branch;\n  }\n\n  async update(id: string, updateBranchDto: UpdateBranchDto) {\n    const branch = await this.branchModel.findOneAndUpdate({_id:id},{updateBranchDto},{new:true});\n    return branch;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBranchDto.html":{"url":"classes/CreateBranchDto.html","title":"class - CreateBranchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBranchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/dto/create-branch.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'La sede debe ser un texto.'})@IsNotEmpty({message: 'La sede no debe estar vacio.'})@MinLength(3, {message: 'La sede debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'La sede debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'La sede no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'La sede no puede contener solo numeros.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(EstatusBranch)@IsNotEmpty({message: 'El estado no debe estar vacio.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Debe selecionar un usuario.'})@IsMongoId({message: 'Debe ingresar un usuario valido'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/branch/dto/create-branch.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Transform } from \"class-transformer\";\nimport { IsEnum, IsMongoId, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nimport { EstatusBranch } from \"src/common/enum\";\nimport { regexHelper, sanitizeHelper } from \"src/common/helper\";\n\nexport class CreateBranchDto {\n    @IsString({ message: 'La sede debe ser un texto.' })\n    @IsNotEmpty({ message: 'La sede no debe estar vacio.' })\n    @MinLength(3, { message: 'La sede debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'La sede debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    @Matches(regexHelper.specialCharacters, {message:'La sede no puede contener caracteres especiales.'})\n    @Matches(regexHelper.onlyNumbers, { message:'La sede no puede contener solo numeros.'})\n    @ApiProperty()\n    readonly name:string;\n\n\n    @IsNotEmpty({ message: 'Debe selecionar un usuario.' })\n    @IsMongoId({message:'Debe ingresar un usuario valido'})\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly user:string;\n\n    @IsEnum(EstatusBranch)\n    @IsNotEmpty({ message: 'El estado no debe estar vacio.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly status: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePermissionDto.html":{"url":"classes/CreatePermissionDto.html","title":"class - CreatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/dto/create-permission.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePermissionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                permission\n                            \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El nombre debe ser un texto.'})@IsNotEmpty({message: 'El nombre no debe estar vacio.'})@MinLength(3, {message: 'El nombre debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El nombre debe contener un maximo de $constraint1 letras.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId({message: 'El permiso no es valido.'})@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ERoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ERoles)@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsEmpty, IsEnum, IsMongoId, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\nimport mongoose from \"mongoose\";\nimport { ERoles } from \"src/common/enum/roles-status.enum\";\nimport { sanitizeHelper } from \"src/common/helper\";\n\nexport class CreateRoleDto {\n\n    @IsString({ message: 'El nombre debe ser un texto.' })\n    @IsNotEmpty({ message: 'El nombre no debe estar vacio.' })\n    @MinLength(3, { message: 'El nombre debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'El nombre debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly name:string;\n\n    @IsEnum(ERoles)\n    @IsNotEmpty()\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly status:ERoles;\n\n    @IsMongoId({message:'El permiso no es valido.'})\n    @IsOptional()\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    readonly permission: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRouterDto.html":{"url":"classes/CreateRouterDto.html","title":"class - CreateRouterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRouterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/dto/create-router.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                branch\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/router/dto/create-router.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateRouterDto {\n    @IsMongoId()\n    @IsNotEmpty()\n    readonly branch:  string;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                career\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phone\n                            \n                            \n                                    Readonly\n                                rut\n                            \n                            \n                                    Readonly\n                                semesterProgress\n                            \n                            \n                                    Readonly\n                                themesInterest\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        career\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Debe ingresar una carrera'})@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El apellido debe ser un texto.'})@IsNotEmpty({message: 'El apellido no debe estar vacio.'})@Transform( => )@Matches(regexHelper.onlyText, {message: 'El apellido debe contener solo texto.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El nombre debe ser un texto.'})@IsNotEmpty({message: 'El nombre no debe estar vacio.'})@Transform( => )@Matches(regexHelper.onlyText, {message: 'El nombre debe contener solo texto.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@MinLength(5, {message: 'La contraseña debe tener por lo menos $constraint1 caracteres'})@MaxLength(16, {message: 'La contraseña debe tener por lo menos $constraint1 caracteres'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@Matches(regexHelper.phoneNumberValidator, {message: 'El numero de telefono debe contener el siguiente formato: +56 X XXXX XXXX.'})@Matches(regexHelper.onlyNumbersPlusSpace, {message: 'El numero de telefono deben contener solo numeros, un simbolo + y 3 espacios.'})@MinLength(15, {message: 'El numero de telefono debe contener un minimo de 15 letras el siguiente formato: +56 X XXXX XXXX.'})@MaxLength(15, {message: 'El numero de telefono debe contener un maximo de 15 letras el siguiente formato: +56 X XXXX XXXX.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        rut\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )@MinLength(12, {message: 'El rut debe tener un minimo de 12 letras con el siguiente formato: 21.234.567-8.'})@MaxLength(12, {message: 'El rut debe tener un maximo de 12 letras con el siguiente formato: 21.234.567-8.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        semesterProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString({message: 'Debe ingresar el numero del semestre que se encuentra.'})@IsNotEmpty({message: 'Debe ingresar en el semestre que se encuentra actualmente.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        themesInterest\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})@ArrayNotEmpty({message: 'Debe tener por lo menos un tema de interes.'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El usuario debe ser un texto.'})@IsNotEmpty({message: 'El usuario no debe estar vacio.'})@MinLength(3, {message: 'El usuario debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El usuario debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'El usuario no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'El usuario no puede contener solo numeros.'})@Matches(regexHelper.onlyTextfirst3, {message: 'No se permiten numeros dentro de las primeras 3 letras.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ArrayNotEmpty, isArray, IsArray, IsEmail, IsNotEmpty, IsNumber, IsNumberString, IsOptional, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { Transform } from 'class-transformer';\nimport { sanitizeHelper } from 'src/common/helper';\nimport { regexHelper } from 'src/common/helper';\n\nexport class CreateUserDto {\n  @IsString({ message: 'El usuario debe ser un texto.' })\n  @IsNotEmpty({ message: 'El usuario no debe estar vacio.' })\n  @MinLength(3, { message: 'El usuario debe contener $constraint1 o mas letras.' })\n  @MaxLength(16, { message: 'El usuario debe contener un maximo de $constraint1 letras.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.specialCharacters, {message:'El usuario no puede contener caracteres especiales.'})\n  @Matches(regexHelper.onlyNumbers, { message:'El usuario no puede contener solo numeros.'})\n  @Matches(regexHelper.onlyTextfirst3, { message:'No se permiten numeros dentro de las primeras 3 letras.'})\n  @ApiProperty()\n  readonly username: string;\n\n  @IsString({ message: 'El nombre debe ser un texto.' })\n  @IsNotEmpty({ message: 'El nombre no debe estar vacio.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.onlyText, { message:'El nombre debe contener solo texto.'})\n  @ApiProperty()\n  readonly name: string;\n\n  @IsString({ message: 'El apellido debe ser un texto.' })\n  @IsNotEmpty({ message: 'El apellido no debe estar vacio.' })\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.onlyText, { message:'El apellido debe contener solo texto.'})\n  @ApiProperty()\n  readonly lastName: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satinizeOnlyScripts(value))\n  @MinLength(5,{message:'La contraseña debe tener por lo menos $constraint1 caracteres'})\n  @MaxLength(16,{message:'La contraseña debe tener por lo menos $constraint1 caracteres'})\n  readonly password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @Matches(regexHelper.phoneNumberValidator, { message:'El numero de telefono debe contener el siguiente formato: +56 X XXXX XXXX.'})\n  @Matches(regexHelper.onlyNumbersPlusSpace, { message:'El numero de telefono deben contener solo numeros, un simbolo + y 3 espacios.'})\n  @MinLength(15, { message: 'El numero de telefono debe contener un minimo de 15 letras el siguiente formato: +56 X XXXX XXXX.' })\n  @MaxLength(15, { message: 'El numero de telefono debe contener un maximo de 15 letras el siguiente formato: +56 X XXXX XXXX.' })\n  readonly phone:string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  @MinLength(12, { message: 'El rut debe tener un minimo de 12 letras con el siguiente formato: 21.234.567-8.' })\n  @MaxLength(12, { message: 'El rut debe tener un maximo de 12 letras con el siguiente formato: 21.234.567-8.' })\n  readonly rut:string;\n\n\n  @IsArray()\n  @IsString({ each: true }) \n  @ArrayNotEmpty({message:'Debe tener por lo menos un tema de interes.'})\n  @Transform(({ value }) => sanitizeHelper.satonizeALLArray(value))\n  readonly themesInterest:[string];\n\n\n  @IsNumberString({message:'Debe ingresar el numero del semestre que se encuentra.'})\n  @IsNotEmpty({message:'Debe ingresar en el semestre que se encuentra actualmente.'})\n  readonly semesterProgress:number;\n\n\n  @IsString({message:'Debe ingresar una carrera'})\n  @IsNotEmpty()\n  @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n  readonly career:string;\n\n  //readonly roles:     [string];\n  //  sede:        {type:mongoose.Types.ObjectId, ref:'Sede', required:true},\n  //   rolesSede:   {type:mongoose.Types.ObjectId, ref:'Rol', required:true},\n  // readonly status: string;\n  // readonly createdAt:   Date;\n  // readonly verified: boolean;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterUserDto.html":{"url":"classes/FilterUserDto.html","title":"class - FilterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/filter-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                filter\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'El usuario debe ser un texto.'})@IsNotEmpty({message: 'El usuario no debe estar vacio.'})@MinLength(3, {message: 'El usuario debe contener $constraint1 o mas letras.'})@MaxLength(16, {message: 'El usuario debe contener un maximo de $constraint1 letras.'})@Transform( => )@Matches(regexHelper.specialCharacters, {message: 'El usuario no puede contener caracteres especiales.'})@Matches(regexHelper.onlyNumbers, {message: 'El usuario no puede contener solo numeros.'})@Matches(regexHelper.onlyTextfirst3, {message: 'No se permiten numeros dentro de las primeras 3 letras.'})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/filter-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { Transform } from 'class-transformer';\nimport { sanitizeHelper } from 'src/common/helper';\nimport { regexHelper } from 'src/common/helper';\n\nexport class FilterUserDto {\n    @IsString({ message: 'El usuario debe ser un texto.' })\n    @IsNotEmpty({ message: 'El usuario no debe estar vacio.' })\n    @MinLength(3, { message: 'El usuario debe contener $constraint1 o mas letras.' })\n    @MaxLength(16, { message: 'El usuario debe contener un maximo de $constraint1 letras.' })\n    @Transform(({ value }) => sanitizeHelper.satonizeALL(value))\n    @Matches(regexHelper.specialCharacters, {message:'El usuario no puede contener caracteres especiales.'})\n    @Matches(regexHelper.onlyNumbers, { message:'El usuario no puede contener solo numeros.'})\n    @Matches(regexHelper.onlyTextfirst3, { message:'No se permiten numeros dentro de las primeras 3 letras.'})\n\n    //blacklist\n    @ApiProperty()\n    readonly filter:string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalService.html":{"url":"classes/GlobalService.html","title":"class - GlobalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/global.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                routes\n                            \n                            \n                                    Static\n                                routesBlocked\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/common/services/global.service.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        routesBlocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {\n\n        routes: [{\n            path: '*',\n            method: 'get'\n        },\n        {\n            path: '/api',\n            method: 'get'\n        },\n        {\n            path: '/api/router',\n            method: 'post'\n        },\n        {\n            path: '/api/router',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'patch'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'delete'\n        },\n        {\n            path: '/api/error',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger-json',\n            method: 'get'\n        },\n        ]\n\n    }\n                    \n                \n                    \n                        \n                                Defined in src/common/services/global.service.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GlobalService {\n    static routes: any;\n    static routesBlocked: any = {\n\n        routes: [{\n            path: '*',\n            method: 'get'\n        },\n        {\n            path: '/api',\n            method: 'get'\n        },\n        {\n            path: '/api/router',\n            method: 'post'\n        },\n        {\n            path: '/api/router',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'get'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'patch'\n        },\n        {\n            path: '/api/router/:id',\n            method: 'delete'\n        },\n        {\n            path: '/api/error',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger',\n            method: 'get'\n        }, {\n            path: '/api/v1/swagger-json',\n            method: 'get'\n        },\n        ]\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GuestGuard.html":{"url":"guards/GuestGuard.html","title":"guard - GuestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GuestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/guest.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/guest.guard.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class GuestGuard implements CanActivate{\n    canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        return !request.isAuthenticated();\n     }\n    }\n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HashHelper.html":{"url":"classes/HashHelper.html","title":"class - HashHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HashHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/hash.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                salt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                compareHashRefreshToken\n                            \n                            \n                                    Static\n                                    Async\n                                encrypt\n                            \n                            \n                                    Static\n                                hashRefreshToken\n                            \n                            \n                                    Static\n                                    Async\n                                tokenGenerator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/hash.helper.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(str: string, encrypted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:23\n                \n            \n\n\n            \n                \n                    Compara texto encriptado e texto ingresado\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise Retorna un boolean, True si el texto encriptado y el ingresado son iguales.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        compareHashRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    compareHashRefreshToken(str: string, encripted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encripted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:13\n                \n            \n\n\n            \n                \n                    Encripta texto plano\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise Retorna texto encriptado\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        hashRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashRefreshToken(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        tokenGenerator\n                        \n                    \n                \n            \n            \n                \n                    \n                    tokenGenerator()\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/hash.helper.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcryptjs';\nimport * as argon2 from 'argon2';\nconst crypto = require('crypto') \n \nexport class HashHelper {\n  private static salt = 10;\n \n  /**\n   * Encripta texto plano\n   * @param str {string}\n   * @returns Promise Retorna texto encriptado\n   */\n  public static async encrypt(str: string): Promise {\n    return await bcrypt.hash(str, this.salt);\n  }\n\n  /**\n   * Compara texto encriptado e texto ingresado\n   * @param str {string}\n   * @param encrypted {string}\n   * @returns Promise Retorna un boolean, True si el texto encriptado y el ingresado son iguales.\n   */\n  public static async compare(str: string, encrypted: string): Promise {\n    return await bcrypt.compare(str, encrypted);\n  }\n\n  public static async tokenGenerator(): Promise {\n    return await crypto.randomBytes(18).toString('hex').toUpperCase();\n  }\n\n  public static hashRefreshToken(str: string){\n    return argon2.hash(str);\n  }\n\n  public static async compareHashRefreshToken(str:string, encripted: string){\n    return argon2.verify(str, encripted);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBranch.html":{"url":"interfaces/IBranch.html","title":"interface - IBranch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBranch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/interface/branch.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IUser } from 'src/users/interface/user.interface';\n\nexport interface IBranch extends Document {\n    readonly name:string;\n    readonly user:IUser;\n    readonly token: string;\n    readonly createdAt: Date;\n    readonly status: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHash.html":{"url":"interfaces/IHash.html","title":"interface - IHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/hash.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hashRefreshToken\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hashRefreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hashRefreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IUser } from './user.interface';\n\nexport interface IHash extends Document {\n    readonly user:IUser;\n    readonly updatedAt:Date;\n    readonly hashRefreshToken: string;\n\n\n   // readonly device:string;\n   // readonly browser:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPermisssion.html":{"url":"interfaces/IPermisssion.html","title":"interface - IPermisssion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPermisssion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/interface/permission.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            pCreate\n                                        \n                                \n                                \n                                        \n                                            pDelete\n                                        \n                                \n                                \n                                        \n                                            pRead\n                                        \n                                \n                                \n                                        \n                                            pUpdate\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pCreate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pCreate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pDelete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pDelete:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pRead:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pUpdate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pUpdate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\n\n\nexport interface IPermisssion extends Document {\n    readonly router:string;\n    readonly method:string;\n    readonly name:string;\n    readonly pCreate:string;\n    readonly pRead:string;\n    readonly pUpdate:string;\n    readonly pDelete:string;\n    readonly branch:IBranch;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IProfile.html":{"url":"interfaces/IProfile.html","title":"interface - IProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/profile.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            career\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            lastLogin\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            picture\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            rolesBranch\n                                        \n                                \n                                \n                                        \n                                            rut\n                                        \n                                \n                                \n                                        \n                                            semesterProgress\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            themesInterest\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        career\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        career:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastLogin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastLogin:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        picture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        picture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rolesBranch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rolesBranch:         IRoles\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRoles\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rut\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rut:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterProgress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        themesInterest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        themesInterest:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\nimport { IRoles } from 'src/roles/interface/roles.interface';\n\nexport interface IProfile extends Document {\n    readonly name:string;\n    readonly lastName:string;\n    readonly roles:[string];\n    readonly branch:IBranch;\n    readonly rolesBranch:IRoles;\n    readonly rut:string;\n    readonly status: string;\n    readonly picture:string;\n    readonly email:string;\n    readonly phone:string;\n    readonly career:string;\n    readonly themesInterest:[string];\n    readonly semesterProgress:number;\n    readonly lastLogin:Date;\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRefreshHash.html":{"url":"interfaces/IRefreshHash.html","title":"interface - IRefreshHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRefreshHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/refresh.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRefreshHash{\n    \n    readonly sub: string;\n    readonly iat: number;\n    readonly exp: number;\n    readonly refreshToken: string;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRoles.html":{"url":"interfaces/IRoles.html","title":"interface - IRoles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/interface/roles.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            permission\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permission\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permission:         IPermisssion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPermisssion\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\nimport { IPermisssion } from 'src/permission/interface/permission.schema';\n\n\nexport interface IRoles extends Document {\n    readonly name:string;\n    readonly status:string;\n    readonly branch: IBranch;\n    readonly permission: IPermisssion;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRouter.html":{"url":"interfaces/IRouter.html","title":"interface - IRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/interface/router.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            branch\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        branch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        branch:         IBranch\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBranch\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { IBranch } from 'src/branch/interface/branch.interface';\n\nexport interface IRouter extends Document {\n    readonly router: string;\n    readonly method: string;\n    readonly status: boolean; \n    readonly branch: IBranch;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interface/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            hash\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            profile\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                                \n                                        \n                                            verified\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hash:         IHash\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IHash\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profile:         IProfile\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IProfile\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import mongoose, { Document } from 'mongoose';\nimport { IRoles } from 'src/roles/interface/roles.interface';\nimport { IHash } from './hash.interface';\nimport { IProfile } from './profile.interface';\n\nexport interface IUser extends Document {\n    readonly username:string;\n    readonly profile:IProfile;\n    readonly hash: IHash;\n             password:string;\n    readonly createdAt:Date;\n    readonly verified:boolean;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserHash.html":{"url":"interfaces/IUserHash.html","title":"interface - IUserHash","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserHash\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/refresh.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUserHash {\n    readonly token:string;\n    readonly sub:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n\n    handleRequest(err: any, user: any, info: any){\n        if(err || !user){\n            throw err || new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtLocalAuthGuard.html":{"url":"injectables/JwtLocalAuthGuard.html","title":"injectable - JwtLocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtLocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtLocalAuthGuard extends AuthGuard('local'){\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtNoAuthGuard.html":{"url":"injectables/JwtNoAuthGuard.html","title":"injectable - JwtNoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtNoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-no-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-no-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class JwtNoAuthGuard extends AuthGuard('jwt'){\n\n\n    handleRequest(err: any, user: any, info: any){\n        if(user){\n            throw new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-refresh.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh'){\n    handleRequest(err: any, user: any, info: any){\n        if(err || !user){\n            throw err || new UnauthorizedException('No se encuentra autorizado');\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy,'jwt') {\n  constructor(private userService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n  async validate(payload: any) {\n     const { sub: _id } = payload;\n    return await this.userService.getUserById(_id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/local-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local'){\n    async canActivate(context: ExecutionContext){\n        const result = (await super.canActivate(context)) as boolean;\n        const request = context.switchToHttp().getRequest();\n        await super.logIn(request);\n        return result;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionController.html":{"url":"controllers/PermissionController.html","title":"controller - PermissionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permission\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createPermissionDto: CreatePermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPermissionDto\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updatePermissionDto: UpdatePermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionDto\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { PermissionService } from './permission.service';\nimport { CreatePermissionDto } from './dto/create-permission.dto';\nimport { UpdatePermissionDto } from './dto/update-permission.dto';\n\n@Controller('permission')\nexport class PermissionController {\n  constructor(private readonly permissionService: PermissionService) {}\n\n  @Post()\n  create(@Body() createPermissionDto: CreatePermissionDto) {\n    return this.permissionService.create(createPermissionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.permissionService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.permissionService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePermissionDto: UpdatePermissionDto) {\n    return this.permissionService.update(+id, updatePermissionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.permissionService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PermissionModule.html":{"url":"modules/PermissionModule.html","title":"module - PermissionModule","body":"\n                   \n\n\n\n\n    Modules\n    PermissionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_providers\n\n\n\n\nPermissionService\n\nPermissionService\n\n\n\nPermissionModule\n\nPermissionModule\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/permission/permission.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PermissionService } from './permission.service';\nimport { PermissionController } from './permission.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PermissionSchema } from './schemas/permission.schema';\n\n@Module({\n  imports:[\n    MongooseModule.forFeature([\n      {name:'Permission', schema: PermissionSchema},\n\n  ])],\n  controllers: [PermissionController],\n  providers: [PermissionService]\n})\nexport class PermissionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionService.html":{"url":"injectables/PermissionService.html","title":"injectable - PermissionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createPermissionDto: CreatePermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPermissionDto\n                                    \n                                                CreatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updatePermissionDto: UpdatePermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePermissionDto\n                                    \n                                                UpdatePermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePermissionDto } from './dto/create-permission.dto';\nimport { UpdatePermissionDto } from './dto/update-permission.dto';\n\n@Injectable()\nexport class PermissionService {\n  create(createPermissionDto: CreatePermissionDto) {\n    return 'This action adds a new permission';\n  }\n\n  findAll() {\n    return `This action returns all permission`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} permission`;\n  }\n\n  update(id: number, updatePermissionDto: UpdatePermissionDto) {\n    return `This action updates a #${id} permission`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} permission`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createRoleDto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\n\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Post()\n  create(@Body() createRoleDto: CreateRoleDto) {\n    return this.rolesService.create(createRoleDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.rolesService.findAll();\n  }  \n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {\n    return this.rolesService.update(+id, updateRoleDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.rolesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService\n\nRolesService\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RolesSchema } from './schemas/roles.schema';\n\n@Module({  \n  imports:[\n  MongooseModule.forFeature([\n    {name:'Roles', schema: RolesSchema},\n\n])],\n  controllers: [RolesController],\n  providers: [RolesService]\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { IRoles } from './interface/roles.interface';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectModel('Roles') private roleModel: Model\n  ) { }\n\n  async create(createRoleDto: CreateRoleDto) {\n    const roles = new this.roleModel({...createRoleDto});\n\n    await roles.save();\n\n    return 'This action adds a new role';\n  }\n\n  findAll() {\n    return `This action returns all roles`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} role`;\n  }\n\n  update(id: number, updateRoleDto: UpdateRoleDto) {\n    return `This action updates a #${id} role`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} role`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RouterController.html":{"url":"controllers/RouterController.html","title":"controller - RouterController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RouterController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/router.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                router\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createRouterDto: CreateRouterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Post()\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRouterDto\n                                    \n                                                CreateRouterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get()\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateRouterDto: UpdateRouterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/router/router.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRouterDto\n                                    \n                                                UpdateRouterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { RouterService } from './router.service';\nimport { CreateRouterDto } from './dto/create-router.dto';\nimport { UpdateRouterDto } from './dto/update-router.dto';\nimport { JWTSession } from 'src/common/decorators';\n\n@Controller('router')\nexport class RouterController {\n  constructor(private readonly routerService: RouterService) {}\n\n  @JWTSession()\n  @Post()\n  create(@Body() createRouterDto:CreateRouterDto) {\n    return this.routerService.create(createRouterDto);\n  }\n\n  @JWTSession()\n  @Get()\n  findAll() {\n    return this.routerService.findAll();\n  }\n\n  @JWTSession()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n   \n    return this.routerService.findOne(id);\n  }\n\n  @JWTSession()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRouterDto: UpdateRouterDto) {\n    return this.routerService.update(id, updateRouterDto);\n  }\n\n  @JWTSession()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.routerService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RouterGuard.html":{"url":"guards/RouterGuard.html","title":"guard - RouterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RouterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/router.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(routerService: RouterService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/router.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerService\n                                                  \n                                                        \n                                                                        RouterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/router.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { RouterService } from \"src/router/router.service\";\n\n\n@Injectable()\nexport class RouterGuard implements CanActivate{\n    constructor(private readonly routerService:RouterService) {}\n    \n    async canActivate(context: ExecutionContext){\n        const request = context.switchToHttp().getRequest();\n        const header = request.headers.code;\n        if(!header) return false;\n        if(header == '553F99A23DD58E17E115915B4D98AF2DC44F') return true;\n        const access = await (await this.routerService.access(request.method.toLowerCase(), request.route.path, header))\n        if(!access) return false;\n        return true;\n        //return access.status;\n     }\n    }\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RouterModule.html":{"url":"modules/RouterModule.html","title":"module - RouterModule","body":"\n                   \n\n\n\n\n    Modules\n    RouterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_providers\n\n\n\ncluster_RouterModule_exports\n\n\n\n\nRouterService \n\nRouterService \n\n\n\nRouterModule\n\nRouterModule\n\nRouterService  -->\n\nRouterModule->RouterService \n\n\n\n\n\nRouterService\n\nRouterService\n\nRouterModule -->\n\nRouterService->RouterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/router/router.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RouterService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RouterController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RouterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { RouterService } from './router.service';\nimport { RouterController } from './router.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RouterSchema } from './schemas/router.schema';\n\n@Global()\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'Router', schema:RouterSchema}\n\n    ])\n  ],\n  controllers: [RouterController],\n  providers: [RouterService],\n  exports:[RouterService]\n\n\n})\nexport class RouterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RouterService.html":{"url":"injectables/RouterService.html","title":"injectable - RouterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RouterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/router.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                access\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(routerModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/router/router.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routerModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        access\n                        \n                    \n                \n            \n            \n                \n                    \n                    access(method: string, path: string, branch: string)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(branch: any)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    branch\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRouterDto: UpdateRouterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/router/router.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRouterDto\n                                    \n                                                UpdateRouterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { GlobalService } from 'src/common/services/global.service';\nimport { CreateRouterDto } from './dto/create-router.dto';\nimport { UpdateRouterDto } from './dto/update-router.dto';\nimport { IRouter } from './interface/router.interface';\n\n@Injectable()\nexport class RouterService {\n  constructor(@InjectModel('Router') private routerModel: Model){}\n\n  async create(branch:any) {\n    var router = [];\n    for (let i = 0; i  v.path == element.path && v.method == element.method)){\n        router.push({method:element.method,router:element.path,branch:branch,status:true});\n      }\n    }\n    const bulk = await this.routerModel.insertMany(router);\n    return bulk;\n  }\n\n  findAll() {\n    return `This action returns all router`;\n  }\n  async findOne(id: string) {\n    const result = await this.routerModel.find({branch:id});\n    return result;\n  }\n\n  async access(method: string, path:string, branch:string) {\n    const result = await this.routerModel.findOne({router:path,method:method,branch}); \n\n    return result;\n  }\n\n  async update(id: string, updateRouterDto: UpdateRouterDto) {\n    var {status} = updateRouterDto;\n    const result = await this.routerModel.findByIdAndUpdate(id,{status},{new:true});\n    return result;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} router`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/rt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy,'jwt-refresh') {\n  constructor(private userService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request:Request)=>{\n        let data = request?.signedCookies.Authorization;\n        if(!data){\n          return null;\n        }\n        return data;\n      }]),\n      secretOrKey: process.env.JWT_REFRESH_TOKEN_SECRET,\n      passReqToCallback:true,\n      \n    });\n  }\n  async validate(req: Request, payload: any) {\n    if(!payload){\n        throw new BadRequestException('No se encuentra autorizado');\n    }\n    \n    let data = req?.signedCookies.Authorization;\n\n    if(!data){\n      throw new BadRequestException('No se encuentra autorizado');\n    }\n    // const refreshToken = req.get('authorization').replace('Bearer','').trim();\n    return {token:data, sub:payload.sub};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionSerializer.html":{"url":"injectables/SessionSerializer.html","title":"injectable - SessionSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/serializer/session.serializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(user: any, done: (err: Error,payloader: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/serializer/session.serializer.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: any, done: (err: Error,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/serializer/session.serializer.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportSerializer} from \"@nestjs/passport\";\n\n@Injectable()\nexport class SessionSerializer extends PassportSerializer {\n\n    serializeUser(user: any, done: (err:Error, user:any) => void):any {\n        done(null, user);\n    }\n    async deserializeUser(user: any, done: (err:Error, payloader:string) => void) {\n        done(null, user);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBranchDto.html":{"url":"classes/UpdateBranchDto.html","title":"class - UpdateBranchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBranchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/branch/dto/update-branch.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateBranchDto } from './create-branch.dto';\n\nexport class UpdateBranchDto extends PartialType(CreateBranchDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionDto.html":{"url":"classes/UpdatePermissionDto.html","title":"class - UpdatePermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/dto/update-permission.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePermissionDto } from './create-permission.dto';\n\nexport class UpdatePermissionDto extends PartialType(CreatePermissionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRouterDto.html":{"url":"classes/UpdateRouterDto.html","title":"class - UpdateRouterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRouterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/router/dto/update-router.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/router/dto/update-router.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRouterDto } from './create-router.dto';\n\nexport class UpdateRouterDto extends PartialType(CreateRouterDto) {\n    status:boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                filterUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(res, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtNoAuthGuard)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        filterUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterUser(res, filterUserDto: FilterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('filter/user')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterUserDto\n                                    \n                                                FilterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(res, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @JWTSession()@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Res, BadRequestException, HttpStatus, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JWTSession, User } from 'src/common/decorators'; \nimport { IUser } from './interface/user.interface';\nimport { JwtNoAuthGuard } from 'src/auth/guards/jwt-no-auth.guard';\nimport { FilterUserDto } from './dto/filter-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtNoAuthGuard)\n  @Post('create')\n  async create(@Res() res,@Body() createUserDto: CreateUserDto) {\n    const mail = await this.usersService.getUserByEmail(createUserDto.email);\n    if(mail) throw new BadRequestException('Correo no disponible')\n    \n    const username = await this.usersService.getUserByEmail(createUserDto.username);\n    if(username) throw new BadRequestException('Nombre de usuario no disponible')\n\n    await this.usersService.create(createUserDto);\n\n    return res.status(HttpStatus.OK).json({\n      message:'Usuario Creado, se enviara un correo cuando se habilite su cuenta'\n    })\n  }\n\n  @JWTSession()\n  @Get()\n  async findAll(@Res() res) {\n    const users = await this.usersService.findAll();\n      return res.status(HttpStatus.OK).json(users);\n  }\n\n  @JWTSession()\n  @Get('profile')\n  async profile(@Res() res, @User() user:IUser) {\n    const users = await this.usersService.getUserByUsername(user.username);\n    //TODO: MOSTRAR PERFIL Y NO LA PASSWORD HASHEADA\n    console.log(user)\n    //return this.usersService.findAll();\n      return res.status(HttpStatus.OK).json( [])\n  }\n\n  @Post('filter/user')\n  async filterUser(@Res() res, @Body() filterUserDto: FilterUserDto){\n    const available = await this.usersService.getUserbyUsernameFilter(filterUserDto.filter);\n    return res.status(HttpStatus.OK).json(available);\n  }\n\n\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from './schemas/user.schema';\nimport { ProfileSchema } from './schemas/profile.schema';\nimport { HashSchema } from './schemas/hash.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name:'User', schema: UserSchema},\n      {name:'Profile', schema: ProfileSchema},\n      {name:'Hash', schema: HashSchema}\n    ])\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports:[UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteHashToken\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getfreshToken\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                getUserbyUsernameFilter\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                    Async\n                                updateOrCreateHashToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, profileModel: Model, hashModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHashToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHashToken(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getfreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getfreshToken(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string, UserInterface?: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    UserInterface\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserbyUsernameFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserbyUsernameFilter(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOrCreateHashToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOrCreateHashToken(_id: string, hashRefreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashRefreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { IHash } from './interface/hash.interface';\nimport { IProfile } from './interface/profile.interface';\nimport { IUser } from './interface/user.interface';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel('User') private userModel: Model,\n    @InjectModel('Profile') private profileModel: Model,\n    @InjectModel('Hash') private hashModel: Model\n  ) { }\n\n  async create(createUserDto: CreateUserDto) {\n    const profile = new this.profileModel({ ...createUserDto });\n    await profile.save();\n\n    const profileId = profile._id.toString();\n\n    const user = new this.userModel({ ...createUserDto, profile: profileId });\n    await user.save();\n\n    return user;\n  }\n\n  findAll() {\n    return `This action returns all users`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n\n  async getUserbyUsernameFilter(username:string):Promise{\n\n    const user = await this.userModel.findOne({username});\n    if(user) return false;\n\n    return true;\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const user = await this.profileModel.findOne({ email }).select('+password');\n    return user;\n  }\n  async getUserByUsername(username: string): Promise {\n    const user = await this.userModel.findOne({ username }).select('+password');\n    return user;\n  }\n\n  async getUserById(id: string, UserInterface?: IUser): Promise {\n    const user = await this.userModel.findOne({ _id: id }).populate('profile')\n      .then(u => !UserInterface ? u : !!u && UserInterface.id === u.id ? u : null);\n    return user;\n  }\n\n  async updateOrCreateHashToken(_id: string, hashRefreshToken: string) {\n    try {\n      var hash = await this.hashModel.findOneAndUpdate({ user: _id }, {user:_id,hashRefreshToken, updatedAt:Date.now() }, { new: true });\n\n      if (!hash) {\n        hash = new this.hashModel({ user: _id, hashRefreshToken: hashRefreshToken });\n        await hash.save();\n      }\n\n      return hash;\n    } catch (e) {\n\n      const hash = new this.hashModel({ user: _id, hashRefreshToken: hashRefreshToken });\n      await hash.save();\n      return hash;\n    }\n  }\n\n  async getfreshToken(_id:string){\n    const token = await this.hashModel.findOne({user:_id});\n    return token;\n  }\n\n  async deleteHashToken(_id: string) {\n    const hash = await this.hashModel.findOneAndDelete({ user:  _id  });\n    return hash;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.roles.ts\n            \n            variable\n            roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/authenticated.guard.ts\n            \n            guard\n            AuthenticatedGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/guest.guard.ts\n            \n            guard\n            GuestGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-local-auth.guard.ts\n            \n            injectable\n            JwtLocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-no-auth.guard.ts\n            \n            injectable\n            JwtNoAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/router.guard.ts\n            \n            guard\n            RouterGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/serializer/session.serializer.ts\n            \n            injectable\n            SessionSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            localStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/branch/branch.controller.ts\n            \n            controller\n            BranchController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/branch/branch.service.ts\n            \n            injectable\n            BranchService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/branch/dto/create-branch.dto.ts\n            \n            class\n            CreateBranchDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/branch/dto/update-branch.dto.ts\n            \n            class\n            UpdateBranchDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/branch/interface/branch.interface.ts\n            \n            interface\n            IBranch\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/branch/schemas/branch.schema.ts\n            \n            variable\n            BranchSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/branch.decorator.ts\n            \n            variable\n            Branch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/jwtSession.decorator.ts\n            \n            function\n            JWTSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/session.decorator.ts\n            \n            function\n            Session\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/hash.helper.ts\n            \n            class\n            HashHelper\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/common/helper/hash.helper.ts\n            \n            variable\n            crypto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helper/regex.helper.ts\n            \n            class\n            regexHelper\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/helper/satinize.helper.ts\n            \n            class\n            sanitizeHelper\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/common/services/global.service.ts\n            \n            class\n            GlobalService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/refresh.type.ts\n            \n            interface\n            IUserHash\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            MongoStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permission/dto/create-permission.dto.ts\n            \n            class\n            CreatePermissionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permission/dto/update-permission.dto.ts\n            \n            class\n            UpdatePermissionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permission/interface/permission.schema.ts\n            \n            interface\n            IPermisssion\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/permission/permission.controller.ts\n            \n            controller\n            PermissionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/permission/permission.service.ts\n            \n            injectable\n            PermissionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/permission/schemas/permission.schema.ts\n            \n            variable\n            PermissionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/interface/roles.interface.ts\n            \n            interface\n            IRoles\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/schemas/roles.schema.ts\n            \n            variable\n            RolesSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/router/dto/create-router.dto.ts\n            \n            class\n            CreateRouterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/router/dto/update-router.dto.ts\n            \n            class\n            UpdateRouterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/router/interface/router.interface.ts\n            \n            interface\n            IRouter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/router/router.controller.ts\n            \n            controller\n            RouterController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/router/router.service.ts\n            \n            injectable\n            RouterService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/router/schemas/router.schema.ts\n            \n            variable\n            RouterSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/dto/filter-user.dto.ts\n            \n            class\n            FilterUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interface/hash.interface.ts\n            \n            interface\n            IHash\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/interface/profile.interface.ts\n            \n            interface\n            IProfile\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/users/interface/refresh.interface.ts\n            \n            interface\n            IRefreshHash\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/interface/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/schemas/hash.schema.ts\n            \n            variable\n            HashSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/profile.schema.ts\n            \n            variable\n            ProfileSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/throttler : ^3.0.0\n        \n            argon2 : ^0.28.7\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            connect-mongo : ^4.6.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            helmet : ^5.1.1\n        \n            mongoose : ^6.5.1\n        \n            nest-access-control : ^2.2.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sanitize-html : ^2.7.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppResources   (src/.../app.roles.ts)\n                        \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                        \n                            ECrud   (src/.../crud.enum.ts)\n                        \n                        \n                            EMethod   (src/.../method.enum.ts)\n                        \n                        \n                            ERoles   (src/.../roles-status.enum.ts)\n                        \n                        \n                            EstatusBranch   (src/.../branch-status.enum.ts)\n                        \n                        \n                            EUserBlackList   (src/.../username-blacklist.enum.ts)\n                        \n                        \n                            statusUser   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppResources\n                    \n                \n                    \n                        \n                            Lista de rutas disponibles.\nLa ruta 'POST' esta de ejemplo\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                    \n                        \n                            Lista de roles dentro del sistema.\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/common/enum/crud.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ECrud\n                    \n                \n                        \n                            \n                                 YES\n                            \n                        \n                        \n                            \n                                Value : YES\n                            \n                        \n                        \n                            \n                                 NO\n                            \n                        \n                        \n                            \n                                Value : NO\n                            \n                        \n                        \n                            \n                                 OWNED\n                            \n                        \n                        \n                            \n                                Value : OWNED\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : ALL\n                            \n                        \n            \n        \n\n    src/common/enum/method.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EMethod\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n\n    src/common/enum/roles-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ERoles\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n            \n        \n\n    src/common/enum/branch-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EstatusBranch\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n                        \n                            \n                                 MAINTENANCE\n                            \n                        \n                        \n                            \n                                Value : MAINTENANCE\n                            \n                        \n            \n        \n\n    src/common/enum/username-blacklist.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EUserBlackList\n                    \n                \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/common/enum/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        statusUser\n                    \n                \n                        \n                            \n                                 WAITING\n                            \n                        \n                        \n                            \n                                Value : WAITING\n                            \n                        \n                        \n                            \n                                 NORMAL\n                            \n                        \n                        \n                            \n                                Value : NORMAL\n                            \n                        \n                        \n                            \n                                 BANNED\n                            \n                        \n                        \n                            \n                                Value : BANNED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            JWTSession   (src/.../jwtSession.decorator.ts)\n                        \n                        \n                            Session   (src/.../session.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n            \n                \nAuth(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorators/jwtSession.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWTSession\n                        \n                    \n                \n            \n            \n                \nJWTSession(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Session\n                        \n                    \n                \n            \n            \n                \nSession(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/localStrategy.html":{"url":"injectables/localStrategy.html","title":"injectable - localStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  localStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: any, username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class localStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: any, username: string, password: string) {\n    const user = await this.authService.validateUsername(username, password);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BranchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RouterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BranchModule\n\n\n\ncluster_BranchModule_providers\n\n\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_exports\n\n\n\ncluster_RouterModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBranchModule\n\nBranchModule\n\nAppModule -->\n\nBranchModule->AppModule\n\n\n\n\n\nPermissionModule\n\nPermissionModule\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRouterModule\n\nRouterModule\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\nRouterService \n\nRouterService \n\nRouterService  -->\n\nRouterModule->RouterService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nlocalStrategy\n\nlocalStrategy\n\nAuthModule -->\n\nlocalStrategy->AuthModule\n\n\n\n\n\nBranchService\n\nBranchService\n\nBranchModule -->\n\nBranchService->BranchModule\n\n\n\n\n\nPermissionService\n\nPermissionService\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nRouterService\n\nRouterService\n\nRouterModule -->\n\nRouterService->RouterModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/regexHelper.html":{"url":"classes/regexHelper.html","title":"class - regexHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  regexHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/regex.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                onlyNumbers\n                            \n                            \n                                    Static\n                                onlyNumbersPlusSpace\n                            \n                            \n                                    Static\n                                onlyText\n                            \n                            \n                                    Static\n                                onlyTextfirst3\n                            \n                            \n                                    Static\n                                phoneNumberValidator\n                            \n                            \n                                    Static\n                                rutValidar\n                            \n                            \n                                    Static\n                                specialCharacters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyNumbers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?!^\\d+$)^.+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyNumbersPlusSpace\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[+][0-9 ]+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        onlyTextfirst3\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\d*(?:[a-zA-Z]){3,}\\d*/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        phoneNumberValidator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /((00)?(\\+)?\\d{1,3})[-\\s]+(\\d{1,3})[-\\s]+(\\d{4,10})/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        rutValidar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(\\d{1,3}(?:\\.\\d{1,3}){2}-[\\dkK])$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        specialCharacters\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z ,.'-/0-9]*$/\n                    \n                \n                    \n                        \n                                Defined in src/common/helper/regex.helper.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class regexHelper {\n   public static onlyNumbers = /(?!^\\d+$)^.+$/;\n   public static specialCharacters = /^[a-z ,.'-/0-9]*$/;\n   public static onlyTextfirst3 = /\\d*(?:[a-zA-Z]){3,}\\d*/;\n   public static onlyText = /^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$/;\n   public static phoneNumberValidator = /((00)?(\\+)?\\d{1,3})[-\\s]+(\\d{1,3})[-\\s]+(\\d{4,10})/;\n   public static onlyNumbersPlusSpace = /^[+][0-9 ]+$/;\n   public static rutValidar = /^(\\d{1,3}(?:\\.\\d{1,3}){2}-[\\dkK])$/;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/sanitizeHelper.html":{"url":"classes/sanitizeHelper.html","title":"class - sanitizeHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  sanitizeHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helper/satinize.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                satinizeOnlyScripts\n                            \n                            \n                                    Static\n                                satonizeALL\n                            \n                            \n                                    Static\n                                satonizeALLArray\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satinizeOnlyScripts\n                        \n                    \n                \n            \n            \n                \n                    \n                    satinizeOnlyScripts(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satonizeALL\n                        \n                    \n                \n            \n            \n                \n                    \n                    satonizeALL(str: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:10\n                \n            \n\n\n            \n                \n                    Satinizador de texto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Promise Retorna texto Satinizado\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        satonizeALLArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    satonizeALLArray(str: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/helper/satinize.helper.ts:26\n                \n            \n\n\n            \n                \n                    Satinizador de array de textos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Promise Retorna texto Satinizado\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as sanitizeHtml from 'sanitize-html';\n\nexport class sanitizeHelper {\n\n      /**\n   * Satinizador de texto\n   * @param str {string}\n   * @returns Promise Retorna texto Satinizado\n   */\n  public static satonizeALL(str: string):string {\n    return  sanitizeHtml(str,{ allowedTags: [],  allowedAttributes: {}, disallowedTagsMode: 'discard'});\n  }\n\n\n  public static satinizeOnlyScripts(str:string):string{\n    return sanitizeHtml(str);\n  }\n\n\n\n      /**\n   * Satinizador de array de textos\n   * @param str {string[]}\n   * @returns Promise Retorna texto Satinizado\n   */\n  public static satonizeALLArray(str: string[]):string[] {\n    let value = [];\n    str.forEach((i)=>{\n      value.push(sanitizeHtml(i,{ allowedTags: [],  allowedAttributes: {}, disallowedTagsMode: 'discard'}));\n    });\n    \n      return value;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Branch   (src/.../branch.decorator.ts)\n                        \n                        \n                            BranchSchema   (src/.../branch.schema.ts)\n                        \n                        \n                            crypto   (src/.../hash.helper.ts)\n                        \n                        \n                            HashSchema   (src/.../hash.schema.ts)\n                        \n                        \n                            MongoStore   (src/.../main.ts)\n                        \n                        \n                            PermissionSchema   (src/.../permission.schema.ts)\n                        \n                        \n                            ProfileSchema   (src/.../profile.schema.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            RolesSchema   (src/.../roles.schema.ts)\n                        \n                        \n                            RouterSchema   (src/.../router.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/branch.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Branch\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data:string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        const branch = request.headers.code;     \n        if (branch =='62a90153efa940f40780e438') return {};\n        return {branch};\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/branch/schemas/branch.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BranchSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    name:{type:String, require},\n    user:{ type: mongoose.Types.ObjectId, ref:'User' },\n    token:{type:String, required:true },\n    createdAt: { type: Date, default: Date.now },\n    status: {type:String, enum:EstatusBranch, required: true, default: EstatusBranch.ACTIVE}\n})\n                    \n                \n\n\n        \n    \n\n    src/common/helper/hash.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('crypto')\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/hash.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HashSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    user:{ type: mongoose.Types.ObjectId, ref:'User' },\n    updatedAt: { type: Date, default: Date.now },\n    hashRefreshToken: {type:String, required: true}\n})\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MongoStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('connect-mongo')\n                    \n                \n\n\n        \n    \n\n    src/permission/schemas/permission.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    router:{ type:String}, //TODO: ENUM ROUTER LIST\n    method:{ type:String, enum:EMethod, required:true},\n    name:{ type:String, required:true },\n    pCreate : {type:String, enum:ECrud, default:ECrud.NO},\n    pRead:   { type:String, enum:ECrud, default:ECrud.NO},\n    pUpdate: { type:String, enum:ECrud, default:ECrud.NO},\n    pDelete: { type:String, enum:ECrud, default:ECrud.NO},\n    branch: { type:mongoose.Types.ObjectId, ref:'Branch', required:true}\n})\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/profile.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProfileSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n   // user: { type: mongoose.Types.ObjectId, ref:'User', required:true },\n    name: { type: String, required: true },\n    lastName: { type: String, required: true },\n    roles: { type: [String], required: true, enum: AppRoles, default: AppRoles.USER },\n    branch:    {type:mongoose.Types.ObjectId, ref:'Branch', required:true},\n    //revisar\n    rolesBranch:   [{type:mongoose.Types.ObjectId, ref:'Roles', required:true}],\n    rut:{type:String, required:true},\n    status: { type: String, enum: statusUser, default: statusUser.WAITING },\n    picture:{ type:String},\n    email: { type: String, required: true },\n    phone:{ type:String, required: true},\n    career:{ type:String, required:true},\n    themesInterest: {type:[String], required:true},\n    semesterProgress:{type:Number, min:1, max:8, required:true},\n    lastLogin: {type: Date, default:Date.now, required:true}\n\n})\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic',true)\n                    \n                \n\n\n        \n    \n\n    src/app.roles.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RolesBuilder\n\n                    \n                \n                \n                    \n                        Default value : new RolesBuilder()\n                    \n                \n\n\n        \n    \n\n    src/roles/schemas/roles.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RolesSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    name:{ type:String, required:true},\n    status:{ type:String, enum:ERoles, default: ERoles.ACTIVE},\n    branch: { type:mongoose.Types.ObjectId, ref:'Branch', required:true},\n    permission:[{type:mongoose.Types.ObjectId, ref:'Permission'}]\n})\n                    \n                \n\n\n        \n    \n\n    src/router/schemas/router.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RouterSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    router: { type:String, required:true},\n    method: { type:String, required:true},\n    status:{ type:Boolean, required:true, default:true},\n    branch:{ type:mongoose.Types.ObjectId, ref:'Branch'},\n\n    \n})\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data:string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        const user = request.user;\n\n        return data ? user && user[data] : user;\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Schema({\n    username: { type: String, required: true },\n    profile:{type: mongoose.Types.ObjectId, ref:'Profile'},\n    hash:{type: mongoose.Types.ObjectId, ref:'Hash'},\n    password: { type: String, required: true, select: false },\n    createdAt: { type: Date, default: Date.now },\n    verified: { type: Boolean, default: false },\n}).pre(\"save\", async function (next) {\n\n    if (!this.isModified('password')) return next();\n    this.password = await HashHelper.encrypt(this.password);\n\n    return next();\n\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
